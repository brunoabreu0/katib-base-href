// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package modeldb

import (
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ProblemType int64
const (
  ProblemType_UNDEFINED ProblemType = 0
  ProblemType_BINARY_CLASSIFICATION ProblemType = 1
  ProblemType_MULTICLASS_CLASSIFICATION ProblemType = 2
  ProblemType_REGRESSION ProblemType = 3
  ProblemType_CLUSTERING ProblemType = 4
  ProblemType_RECOMMENDATION ProblemType = 5
)

func (p ProblemType) String() string {
  switch p {
  case ProblemType_UNDEFINED: return "UNDEFINED"
  case ProblemType_BINARY_CLASSIFICATION: return "BINARY_CLASSIFICATION"
  case ProblemType_MULTICLASS_CLASSIFICATION: return "MULTICLASS_CLASSIFICATION"
  case ProblemType_REGRESSION: return "REGRESSION"
  case ProblemType_CLUSTERING: return "CLUSTERING"
  case ProblemType_RECOMMENDATION: return "RECOMMENDATION"
  }
  return "<UNSET>"
}

func ProblemTypeFromString(s string) (ProblemType, error) {
  switch s {
  case "UNDEFINED": return ProblemType_UNDEFINED, nil 
  case "BINARY_CLASSIFICATION": return ProblemType_BINARY_CLASSIFICATION, nil 
  case "MULTICLASS_CLASSIFICATION": return ProblemType_MULTICLASS_CLASSIFICATION, nil 
  case "REGRESSION": return ProblemType_REGRESSION, nil 
  case "CLUSTERING": return ProblemType_CLUSTERING, nil 
  case "RECOMMENDATION": return ProblemType_RECOMMENDATION, nil 
  }
  return ProblemType(0), fmt.Errorf("not a valid ProblemType string")
}


func ProblemTypePtr(v ProblemType) *ProblemType { return &v }

func (p ProblemType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProblemType) UnmarshalText(text []byte) error {
q, err := ProblemTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProblemType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProblemType(v)
return nil
}

func (p * ProblemType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ModelCompMetric int64
const (
  ModelCompMetric_PROJECT ModelCompMetric = 0
  ModelCompMetric_EXPERIMENT_RUN ModelCompMetric = 1
  ModelCompMetric_MODEL_TYPE ModelCompMetric = 2
  ModelCompMetric_PROBLEM_TYPE ModelCompMetric = 3
  ModelCompMetric_RMSE ModelCompMetric = 4
  ModelCompMetric_EXPLAINED_VARIANCE ModelCompMetric = 5
  ModelCompMetric_R2 ModelCompMetric = 6
)

func (p ModelCompMetric) String() string {
  switch p {
  case ModelCompMetric_PROJECT: return "PROJECT"
  case ModelCompMetric_EXPERIMENT_RUN: return "EXPERIMENT_RUN"
  case ModelCompMetric_MODEL_TYPE: return "MODEL_TYPE"
  case ModelCompMetric_PROBLEM_TYPE: return "PROBLEM_TYPE"
  case ModelCompMetric_RMSE: return "RMSE"
  case ModelCompMetric_EXPLAINED_VARIANCE: return "EXPLAINED_VARIANCE"
  case ModelCompMetric_R2: return "R2"
  }
  return "<UNSET>"
}

func ModelCompMetricFromString(s string) (ModelCompMetric, error) {
  switch s {
  case "PROJECT": return ModelCompMetric_PROJECT, nil 
  case "EXPERIMENT_RUN": return ModelCompMetric_EXPERIMENT_RUN, nil 
  case "MODEL_TYPE": return ModelCompMetric_MODEL_TYPE, nil 
  case "PROBLEM_TYPE": return ModelCompMetric_PROBLEM_TYPE, nil 
  case "RMSE": return ModelCompMetric_RMSE, nil 
  case "EXPLAINED_VARIANCE": return ModelCompMetric_EXPLAINED_VARIANCE, nil 
  case "R2": return ModelCompMetric_R2, nil 
  }
  return ModelCompMetric(0), fmt.Errorf("not a valid ModelCompMetric string")
}


func ModelCompMetricPtr(v ModelCompMetric) *ModelCompMetric { return &v }

func (p ModelCompMetric) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ModelCompMetric) UnmarshalText(text []byte) error {
q, err := ModelCompMetricFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ModelCompMetric) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ModelCompMetric(v)
return nil
}

func (p * ModelCompMetric) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ModelRankMetric int64
const (
  ModelRankMetric_RMSE ModelRankMetric = 0
  ModelRankMetric_EXPLAINED_VARIANCE ModelRankMetric = 1
  ModelRankMetric_R2 ModelRankMetric = 2
)

func (p ModelRankMetric) String() string {
  switch p {
  case ModelRankMetric_RMSE: return "RMSE"
  case ModelRankMetric_EXPLAINED_VARIANCE: return "EXPLAINED_VARIANCE"
  case ModelRankMetric_R2: return "R2"
  }
  return "<UNSET>"
}

func ModelRankMetricFromString(s string) (ModelRankMetric, error) {
  switch s {
  case "RMSE": return ModelRankMetric_RMSE, nil 
  case "EXPLAINED_VARIANCE": return ModelRankMetric_EXPLAINED_VARIANCE, nil 
  case "R2": return ModelRankMetric_R2, nil 
  }
  return ModelRankMetric(0), fmt.Errorf("not a valid ModelRankMetric string")
}


func ModelRankMetricPtr(v ModelRankMetric) *ModelRankMetric { return &v }

func (p ModelRankMetric) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ModelRankMetric) UnmarshalText(text []byte) error {
q, err := ModelRankMetricFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ModelRankMetric) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ModelRankMetric(v)
return nil
}

func (p * ModelRankMetric) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ID
//  - Name
//  - Author
//  - Description
type Project struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Author string `thrift:"author,3" db:"author" json:"author"`
  Description string `thrift:"description,4" db:"description" json:"description"`
}

func NewProject() *Project {
  return &Project{
ID: -1,
}
}


func (p *Project) GetID() int32 {
  return p.ID
}

func (p *Project) GetName() string {
  return p.Name
}

func (p *Project) GetAuthor() string {
  return p.Author
}

func (p *Project) GetDescription() string {
  return p.Description
}
func (p *Project) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Project)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Project)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Project)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Author = v
}
  return nil
}

func (p *Project)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *Project) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Project"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Project) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Project) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Project) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("author", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:author: ", p), err) }
  if err := oprot.WriteString(string(p.Author)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.author (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:author: ", p), err) }
  return err
}

func (p *Project) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err) }
  return err
}

func (p *Project) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Project(%+v)", *p)
}

// Attributes:
//  - ID
//  - ProjectId
//  - Name
//  - Description
//  - IsDefault
type Experiment struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  ProjectId int32 `thrift:"projectId,2" db:"projectId" json:"projectId"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  Description string `thrift:"description,4" db:"description" json:"description"`
  IsDefault bool `thrift:"isDefault,5" db:"isDefault" json:"isDefault"`
}

func NewExperiment() *Experiment {
  return &Experiment{
ID: -1,
}
}


func (p *Experiment) GetID() int32 {
  return p.ID
}

func (p *Experiment) GetProjectId() int32 {
  return p.ProjectId
}

func (p *Experiment) GetName() string {
  return p.Name
}

func (p *Experiment) GetDescription() string {
  return p.Description
}

func (p *Experiment) GetIsDefault() bool {
  return p.IsDefault
}
func (p *Experiment) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Experiment)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Experiment)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ProjectId = v
}
  return nil
}

func (p *Experiment)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Experiment)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *Experiment)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsDefault = v
}
  return nil
}

func (p *Experiment) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Experiment"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Experiment) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Experiment) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:projectId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:projectId: ", p), err) }
  return err
}

func (p *Experiment) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *Experiment) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:description: ", p), err) }
  return err
}

func (p *Experiment) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isDefault", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isDefault: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsDefault)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isDefault (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isDefault: ", p), err) }
  return err
}

func (p *Experiment) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Experiment(%+v)", *p)
}

// Attributes:
//  - ID
//  - ExperimentId
//  - Description
//  - Sha
//  - Created
type ExperimentRun struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  ExperimentId int32 `thrift:"experimentId,2" db:"experimentId" json:"experimentId"`
  Description string `thrift:"description,3" db:"description" json:"description"`
  Sha *string `thrift:"sha,4" db:"sha" json:"sha,omitempty"`
  Created *string `thrift:"created,5" db:"created" json:"created,omitempty"`
}

func NewExperimentRun() *ExperimentRun {
  return &ExperimentRun{
ID: -1,
}
}


func (p *ExperimentRun) GetID() int32 {
  return p.ID
}

func (p *ExperimentRun) GetExperimentId() int32 {
  return p.ExperimentId
}

func (p *ExperimentRun) GetDescription() string {
  return p.Description
}
var ExperimentRun_Sha_DEFAULT string
func (p *ExperimentRun) GetSha() string {
  if !p.IsSetSha() {
    return ExperimentRun_Sha_DEFAULT
  }
return *p.Sha
}
var ExperimentRun_Created_DEFAULT string
func (p *ExperimentRun) GetCreated() string {
  if !p.IsSetCreated() {
    return ExperimentRun_Created_DEFAULT
  }
return *p.Created
}
func (p *ExperimentRun) IsSetSha() bool {
  return p.Sha != nil
}

func (p *ExperimentRun) IsSetCreated() bool {
  return p.Created != nil
}

func (p *ExperimentRun) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExperimentRun)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ExperimentRun)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *ExperimentRun)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *ExperimentRun)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Sha = &v
}
  return nil
}

func (p *ExperimentRun)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Created = &v
}
  return nil
}

func (p *ExperimentRun) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentRun"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentRun) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ExperimentRun) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:experimentId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:experimentId: ", p), err) }
  return err
}

func (p *ExperimentRun) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err) }
  if err := oprot.WriteString(string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err) }
  return err
}

func (p *ExperimentRun) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetSha() {
    if err := oprot.WriteFieldBegin("sha", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sha: ", p), err) }
    if err := oprot.WriteString(string(*p.Sha)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sha (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sha: ", p), err) }
  }
  return err
}

func (p *ExperimentRun) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetCreated() {
    if err := oprot.WriteFieldBegin("created", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:created: ", p), err) }
    if err := oprot.WriteString(string(*p.Created)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.created (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:created: ", p), err) }
  }
  return err
}

func (p *ExperimentRun) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentRun(%+v)", *p)
}

// Attributes:
//  - Name
//  - Type
type DataFrameColumn struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Type string `thrift:"type,2" db:"type" json:"type"`
}

func NewDataFrameColumn() *DataFrameColumn {
  return &DataFrameColumn{}
}


func (p *DataFrameColumn) GetName() string {
  return p.Name
}

func (p *DataFrameColumn) GetType() string {
  return p.Type
}
func (p *DataFrameColumn) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataFrameColumn)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *DataFrameColumn)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *DataFrameColumn) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataFrameColumn"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataFrameColumn) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *DataFrameColumn) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *DataFrameColumn) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataFrameColumn(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
//  - ValueType
type MetadataKV struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value string `thrift:"value,2" db:"value" json:"value"`
  ValueType string `thrift:"valueType,3" db:"valueType" json:"valueType"`
}

func NewMetadataKV() *MetadataKV {
  return &MetadataKV{}
}


func (p *MetadataKV) GetKey() string {
  return p.Key
}

func (p *MetadataKV) GetValue() string {
  return p.Value
}

func (p *MetadataKV) GetValueType() string {
  return p.ValueType
}
func (p *MetadataKV) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetadataKV)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *MetadataKV)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *MetadataKV)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ValueType = v
}
  return nil
}

func (p *MetadataKV) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MetadataKV"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetadataKV) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *MetadataKV) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *MetadataKV) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("valueType", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:valueType: ", p), err) }
  if err := oprot.WriteString(string(p.ValueType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.valueType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:valueType: ", p), err) }
  return err
}

func (p *MetadataKV) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetadataKV(%+v)", *p)
}

// Attributes:
//  - ID
//  - Schema
//  - NumRows
//  - Tag
//  - Filepath
//  - Metadata
type DataFrame struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Schema []*DataFrameColumn `thrift:"schema,2" db:"schema" json:"schema"`
  NumRows int32 `thrift:"numRows,3" db:"numRows" json:"numRows"`
  Tag string `thrift:"tag,4" db:"tag" json:"tag"`
  Filepath *string `thrift:"filepath,5" db:"filepath" json:"filepath,omitempty"`
  Metadata []*MetadataKV `thrift:"metadata,6" db:"metadata" json:"metadata,omitempty"`
}

func NewDataFrame() *DataFrame {
  return &DataFrame{
ID: -1,
}
}


func (p *DataFrame) GetID() int32 {
  return p.ID
}

func (p *DataFrame) GetSchema() []*DataFrameColumn {
  return p.Schema
}

func (p *DataFrame) GetNumRows() int32 {
  return p.NumRows
}

func (p *DataFrame) GetTag() string {
  return p.Tag
}
var DataFrame_Filepath_DEFAULT string
func (p *DataFrame) GetFilepath() string {
  if !p.IsSetFilepath() {
    return DataFrame_Filepath_DEFAULT
  }
return *p.Filepath
}
var DataFrame_Metadata_DEFAULT []*MetadataKV

func (p *DataFrame) GetMetadata() []*MetadataKV {
  return p.Metadata
}
func (p *DataFrame) IsSetFilepath() bool {
  return p.Filepath != nil
}

func (p *DataFrame) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *DataFrame) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataFrame)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *DataFrame)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DataFrameColumn, 0, size)
  p.Schema =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &DataFrameColumn{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Schema = append(p.Schema, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DataFrame)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumRows = v
}
  return nil
}

func (p *DataFrame)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *DataFrame)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Filepath = &v
}
  return nil
}

func (p *DataFrame)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*MetadataKV, 0, size)
  p.Metadata =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &MetadataKV{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.Metadata = append(p.Metadata, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DataFrame) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataFrame"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataFrame) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DataFrame) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("schema", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:schema: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Schema)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Schema {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:schema: ", p), err) }
  return err
}

func (p *DataFrame) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numRows", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numRows: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumRows)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numRows (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numRows: ", p), err) }
  return err
}

func (p *DataFrame) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tag: ", p), err) }
  return err
}

func (p *DataFrame) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetFilepath() {
    if err := oprot.WriteFieldBegin("filepath", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:filepath: ", p), err) }
    if err := oprot.WriteString(string(*p.Filepath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filepath (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:filepath: ", p), err) }
  }
  return err
}

func (p *DataFrame) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetMetadata() {
    if err := oprot.WriteFieldBegin("metadata", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:metadata: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Metadata)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Metadata {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:metadata: ", p), err) }
  }
  return err
}

func (p *DataFrame) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataFrame(%+v)", *p)
}

// Attributes:
//  - Name
//  - Value
//  - Type
//  - Min
//  - Max
type HyperParameter struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Value string `thrift:"value,2" db:"value" json:"value"`
  Type string `thrift:"type,3" db:"type" json:"type"`
  Min float64 `thrift:"min,4" db:"min" json:"min"`
  Max float64 `thrift:"max,5" db:"max" json:"max"`
}

func NewHyperParameter() *HyperParameter {
  return &HyperParameter{}
}


func (p *HyperParameter) GetName() string {
  return p.Name
}

func (p *HyperParameter) GetValue() string {
  return p.Value
}

func (p *HyperParameter) GetType() string {
  return p.Type
}

func (p *HyperParameter) GetMin() float64 {
  return p.Min
}

func (p *HyperParameter) GetMax() float64 {
  return p.Max
}
func (p *HyperParameter) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HyperParameter)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *HyperParameter)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *HyperParameter)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *HyperParameter)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Min = v
}
  return nil
}

func (p *HyperParameter)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Max = v
}
  return nil
}

func (p *HyperParameter) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HyperParameter"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HyperParameter) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *HyperParameter) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *HyperParameter) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *HyperParameter) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("min", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:min: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Min)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.min (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:min: ", p), err) }
  return err
}

func (p *HyperParameter) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("max", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:max: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Max)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.max (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:max: ", p), err) }
  return err
}

func (p *HyperParameter) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HyperParameter(%+v)", *p)
}

// Attributes:
//  - Project
type ProjectEvent struct {
  Project *Project `thrift:"project,1" db:"project" json:"project"`
}

func NewProjectEvent() *ProjectEvent {
  return &ProjectEvent{}
}

var ProjectEvent_Project_DEFAULT *Project
func (p *ProjectEvent) GetProject() *Project {
  if !p.IsSetProject() {
    return ProjectEvent_Project_DEFAULT
  }
return p.Project
}
func (p *ProjectEvent) IsSetProject() bool {
  return p.Project != nil
}

func (p *ProjectEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProjectEvent)  ReadField1(iprot thrift.TProtocol) error {
  p.Project = &Project{
  ID: -1,
}
  if err := p.Project.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Project), err)
  }
  return nil
}

func (p *ProjectEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProjectEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProjectEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("project", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:project: ", p), err) }
  if err := p.Project.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Project), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:project: ", p), err) }
  return err
}

func (p *ProjectEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProjectEvent(%+v)", *p)
}

// Attributes:
//  - ProjectId
type ProjectEventResponse struct {
  ProjectId int32 `thrift:"projectId,1" db:"projectId" json:"projectId"`
}

func NewProjectEventResponse() *ProjectEventResponse {
  return &ProjectEventResponse{}
}


func (p *ProjectEventResponse) GetProjectId() int32 {
  return p.ProjectId
}
func (p *ProjectEventResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProjectEventResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProjectId = v
}
  return nil
}

func (p *ProjectEventResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProjectEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProjectEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:projectId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:projectId: ", p), err) }
  return err
}

func (p *ProjectEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProjectEventResponse(%+v)", *p)
}

// Attributes:
//  - Experiment
type ExperimentEvent struct {
  Experiment *Experiment `thrift:"experiment,1" db:"experiment" json:"experiment"`
}

func NewExperimentEvent() *ExperimentEvent {
  return &ExperimentEvent{}
}

var ExperimentEvent_Experiment_DEFAULT *Experiment
func (p *ExperimentEvent) GetExperiment() *Experiment {
  if !p.IsSetExperiment() {
    return ExperimentEvent_Experiment_DEFAULT
  }
return p.Experiment
}
func (p *ExperimentEvent) IsSetExperiment() bool {
  return p.Experiment != nil
}

func (p *ExperimentEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExperimentEvent)  ReadField1(iprot thrift.TProtocol) error {
  p.Experiment = &Experiment{
  ID: -1,
}
  if err := p.Experiment.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Experiment), err)
  }
  return nil
}

func (p *ExperimentEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experiment", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experiment: ", p), err) }
  if err := p.Experiment.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Experiment), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experiment: ", p), err) }
  return err
}

func (p *ExperimentEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentEvent(%+v)", *p)
}

// Attributes:
//  - ExperimentId
type ExperimentEventResponse struct {
  ExperimentId int32 `thrift:"experimentId,1" db:"experimentId" json:"experimentId"`
}

func NewExperimentEventResponse() *ExperimentEventResponse {
  return &ExperimentEventResponse{}
}


func (p *ExperimentEventResponse) GetExperimentId() int32 {
  return p.ExperimentId
}
func (p *ExperimentEventResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExperimentEventResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *ExperimentEventResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experimentId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experimentId: ", p), err) }
  return err
}

func (p *ExperimentEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentEventResponse(%+v)", *p)
}

// Attributes:
//  - ExperimentRun
type ExperimentRunEvent struct {
  ExperimentRun *ExperimentRun `thrift:"experimentRun,1" db:"experimentRun" json:"experimentRun"`
}

func NewExperimentRunEvent() *ExperimentRunEvent {
  return &ExperimentRunEvent{}
}

var ExperimentRunEvent_ExperimentRun_DEFAULT *ExperimentRun
func (p *ExperimentRunEvent) GetExperimentRun() *ExperimentRun {
  if !p.IsSetExperimentRun() {
    return ExperimentRunEvent_ExperimentRun_DEFAULT
  }
return p.ExperimentRun
}
func (p *ExperimentRunEvent) IsSetExperimentRun() bool {
  return p.ExperimentRun != nil
}

func (p *ExperimentRunEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExperimentRunEvent)  ReadField1(iprot thrift.TProtocol) error {
  p.ExperimentRun = &ExperimentRun{
  ID: -1,
}
  if err := p.ExperimentRun.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExperimentRun), err)
  }
  return nil
}

func (p *ExperimentRunEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentRunEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentRunEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRun", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experimentRun: ", p), err) }
  if err := p.ExperimentRun.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExperimentRun), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experimentRun: ", p), err) }
  return err
}

func (p *ExperimentRunEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentRunEvent(%+v)", *p)
}

// Attributes:
//  - ExperimentRunId
type ExperimentRunEventResponse struct {
  ExperimentRunId int32 `thrift:"experimentRunId,1" db:"experimentRunId" json:"experimentRunId"`
}

func NewExperimentRunEventResponse() *ExperimentRunEventResponse {
  return &ExperimentRunEventResponse{}
}


func (p *ExperimentRunEventResponse) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}
func (p *ExperimentRunEventResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExperimentRunEventResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *ExperimentRunEventResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentRunEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentRunEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experimentRunId: ", p), err) }
  return err
}

func (p *ExperimentRunEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentRunEventResponse(%+v)", *p)
}

// Attributes:
//  - ID
//  - TransformerType
//  - Hyperparameters
//  - Tag
type TransformerSpec struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  TransformerType string `thrift:"transformerType,2" db:"transformerType" json:"transformerType"`
  Hyperparameters []*HyperParameter `thrift:"hyperparameters,3" db:"hyperparameters" json:"hyperparameters"`
  Tag string `thrift:"tag,4" db:"tag" json:"tag"`
}

func NewTransformerSpec() *TransformerSpec {
  return &TransformerSpec{
ID: -1,
}
}


func (p *TransformerSpec) GetID() int32 {
  return p.ID
}

func (p *TransformerSpec) GetTransformerType() string {
  return p.TransformerType
}

func (p *TransformerSpec) GetHyperparameters() []*HyperParameter {
  return p.Hyperparameters
}

func (p *TransformerSpec) GetTag() string {
  return p.Tag
}
func (p *TransformerSpec) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransformerSpec)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TransformerSpec)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TransformerType = v
}
  return nil
}

func (p *TransformerSpec)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HyperParameter, 0, size)
  p.Hyperparameters =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &HyperParameter{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Hyperparameters = append(p.Hyperparameters, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TransformerSpec)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *TransformerSpec) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TransformerSpec"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransformerSpec) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TransformerSpec) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transformerType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transformerType: ", p), err) }
  if err := oprot.WriteString(string(p.TransformerType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transformerType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transformerType: ", p), err) }
  return err
}

func (p *TransformerSpec) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hyperparameters", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hyperparameters: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Hyperparameters)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Hyperparameters {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hyperparameters: ", p), err) }
  return err
}

func (p *TransformerSpec) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tag: ", p), err) }
  return err
}

func (p *TransformerSpec) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransformerSpec(%+v)", *p)
}

// Attributes:
//  - ID
//  - TransformerType
//  - Tag
//  - Filepath
type Transformer struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  TransformerType string `thrift:"transformerType,2" db:"transformerType" json:"transformerType"`
  Tag string `thrift:"tag,3" db:"tag" json:"tag"`
  Filepath *string `thrift:"filepath,4" db:"filepath" json:"filepath,omitempty"`
}

func NewTransformer() *Transformer {
  return &Transformer{
ID: -1,
}
}


func (p *Transformer) GetID() int32 {
  return p.ID
}

func (p *Transformer) GetTransformerType() string {
  return p.TransformerType
}

func (p *Transformer) GetTag() string {
  return p.Tag
}
var Transformer_Filepath_DEFAULT string
func (p *Transformer) GetFilepath() string {
  if !p.IsSetFilepath() {
    return Transformer_Filepath_DEFAULT
  }
return *p.Filepath
}
func (p *Transformer) IsSetFilepath() bool {
  return p.Filepath != nil
}

func (p *Transformer) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Transformer)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Transformer)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TransformerType = v
}
  return nil
}

func (p *Transformer)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *Transformer)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Filepath = &v
}
  return nil
}

func (p *Transformer) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Transformer"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Transformer) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Transformer) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transformerType", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transformerType: ", p), err) }
  if err := oprot.WriteString(string(p.TransformerType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transformerType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transformerType: ", p), err) }
  return err
}

func (p *Transformer) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tag: ", p), err) }
  return err
}

func (p *Transformer) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetFilepath() {
    if err := oprot.WriteFieldBegin("filepath", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:filepath: ", p), err) }
    if err := oprot.WriteString(string(*p.Filepath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.filepath (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:filepath: ", p), err) }
  }
  return err
}

func (p *Transformer) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Transformer(%+v)", *p)
}

// Attributes:
//  - Coefficient
//  - TStat
//  - StdErr
//  - PValue
type LinearModelTerm struct {
  Coefficient float64 `thrift:"coefficient,1" db:"coefficient" json:"coefficient"`
  TStat *float64 `thrift:"tStat,2" db:"tStat" json:"tStat,omitempty"`
  StdErr *float64 `thrift:"stdErr,3" db:"stdErr" json:"stdErr,omitempty"`
  PValue *float64 `thrift:"pValue,4" db:"pValue" json:"pValue,omitempty"`
}

func NewLinearModelTerm() *LinearModelTerm {
  return &LinearModelTerm{}
}


func (p *LinearModelTerm) GetCoefficient() float64 {
  return p.Coefficient
}
var LinearModelTerm_TStat_DEFAULT float64
func (p *LinearModelTerm) GetTStat() float64 {
  if !p.IsSetTStat() {
    return LinearModelTerm_TStat_DEFAULT
  }
return *p.TStat
}
var LinearModelTerm_StdErr_DEFAULT float64
func (p *LinearModelTerm) GetStdErr() float64 {
  if !p.IsSetStdErr() {
    return LinearModelTerm_StdErr_DEFAULT
  }
return *p.StdErr
}
var LinearModelTerm_PValue_DEFAULT float64
func (p *LinearModelTerm) GetPValue() float64 {
  if !p.IsSetPValue() {
    return LinearModelTerm_PValue_DEFAULT
  }
return *p.PValue
}
func (p *LinearModelTerm) IsSetTStat() bool {
  return p.TStat != nil
}

func (p *LinearModelTerm) IsSetStdErr() bool {
  return p.StdErr != nil
}

func (p *LinearModelTerm) IsSetPValue() bool {
  return p.PValue != nil
}

func (p *LinearModelTerm) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LinearModelTerm)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Coefficient = v
}
  return nil
}

func (p *LinearModelTerm)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TStat = &v
}
  return nil
}

func (p *LinearModelTerm)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StdErr = &v
}
  return nil
}

func (p *LinearModelTerm)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PValue = &v
}
  return nil
}

func (p *LinearModelTerm) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LinearModelTerm"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LinearModelTerm) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("coefficient", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:coefficient: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Coefficient)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.coefficient (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:coefficient: ", p), err) }
  return err
}

func (p *LinearModelTerm) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTStat() {
    if err := oprot.WriteFieldBegin("tStat", thrift.DOUBLE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tStat: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.TStat)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tStat (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tStat: ", p), err) }
  }
  return err
}

func (p *LinearModelTerm) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetStdErr() {
    if err := oprot.WriteFieldBegin("stdErr", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stdErr: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.StdErr)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stdErr (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stdErr: ", p), err) }
  }
  return err
}

func (p *LinearModelTerm) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPValue() {
    if err := oprot.WriteFieldBegin("pValue", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pValue: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.PValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pValue (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pValue: ", p), err) }
  }
  return err
}

func (p *LinearModelTerm) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LinearModelTerm(%+v)", *p)
}

// Attributes:
//  - InterceptTerm
//  - FeatureTerms
//  - ObjectiveHistory
//  - Rmse
//  - ExplainedVariance
//  - R2
type LinearModel struct {
  InterceptTerm *LinearModelTerm `thrift:"interceptTerm,1" db:"interceptTerm" json:"interceptTerm,omitempty"`
  FeatureTerms []*LinearModelTerm `thrift:"featureTerms,2" db:"featureTerms" json:"featureTerms"`
  ObjectiveHistory []float64 `thrift:"objectiveHistory,3" db:"objectiveHistory" json:"objectiveHistory,omitempty"`
  Rmse *float64 `thrift:"rmse,4" db:"rmse" json:"rmse,omitempty"`
  ExplainedVariance *float64 `thrift:"explainedVariance,5" db:"explainedVariance" json:"explainedVariance,omitempty"`
  R2 *float64 `thrift:"r2,6" db:"r2" json:"r2,omitempty"`
}

func NewLinearModel() *LinearModel {
  return &LinearModel{}
}

var LinearModel_InterceptTerm_DEFAULT *LinearModelTerm
func (p *LinearModel) GetInterceptTerm() *LinearModelTerm {
  if !p.IsSetInterceptTerm() {
    return LinearModel_InterceptTerm_DEFAULT
  }
return p.InterceptTerm
}

func (p *LinearModel) GetFeatureTerms() []*LinearModelTerm {
  return p.FeatureTerms
}
var LinearModel_ObjectiveHistory_DEFAULT []float64

func (p *LinearModel) GetObjectiveHistory() []float64 {
  return p.ObjectiveHistory
}
var LinearModel_Rmse_DEFAULT float64
func (p *LinearModel) GetRmse() float64 {
  if !p.IsSetRmse() {
    return LinearModel_Rmse_DEFAULT
  }
return *p.Rmse
}
var LinearModel_ExplainedVariance_DEFAULT float64
func (p *LinearModel) GetExplainedVariance() float64 {
  if !p.IsSetExplainedVariance() {
    return LinearModel_ExplainedVariance_DEFAULT
  }
return *p.ExplainedVariance
}
var LinearModel_R2_DEFAULT float64
func (p *LinearModel) GetR2() float64 {
  if !p.IsSetR2() {
    return LinearModel_R2_DEFAULT
  }
return *p.R2
}
func (p *LinearModel) IsSetInterceptTerm() bool {
  return p.InterceptTerm != nil
}

func (p *LinearModel) IsSetObjectiveHistory() bool {
  return p.ObjectiveHistory != nil
}

func (p *LinearModel) IsSetRmse() bool {
  return p.Rmse != nil
}

func (p *LinearModel) IsSetExplainedVariance() bool {
  return p.ExplainedVariance != nil
}

func (p *LinearModel) IsSetR2() bool {
  return p.R2 != nil
}

func (p *LinearModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LinearModel)  ReadField1(iprot thrift.TProtocol) error {
  p.InterceptTerm = &LinearModelTerm{}
  if err := p.InterceptTerm.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InterceptTerm), err)
  }
  return nil
}

func (p *LinearModel)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LinearModelTerm, 0, size)
  p.FeatureTerms =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &LinearModelTerm{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.FeatureTerms = append(p.FeatureTerms, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LinearModel)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.ObjectiveHistory =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.ObjectiveHistory = append(p.ObjectiveHistory, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LinearModel)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Rmse = &v
}
  return nil
}

func (p *LinearModel)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ExplainedVariance = &v
}
  return nil
}

func (p *LinearModel)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.R2 = &v
}
  return nil
}

func (p *LinearModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LinearModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LinearModel) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetInterceptTerm() {
    if err := oprot.WriteFieldBegin("interceptTerm", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:interceptTerm: ", p), err) }
    if err := p.InterceptTerm.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InterceptTerm), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:interceptTerm: ", p), err) }
  }
  return err
}

func (p *LinearModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureTerms", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:featureTerms: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FeatureTerms)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FeatureTerms {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:featureTerms: ", p), err) }
  return err
}

func (p *LinearModel) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetObjectiveHistory() {
    if err := oprot.WriteFieldBegin("objectiveHistory", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:objectiveHistory: ", p), err) }
    if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.ObjectiveHistory)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ObjectiveHistory {
      if err := oprot.WriteDouble(float64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:objectiveHistory: ", p), err) }
  }
  return err
}

func (p *LinearModel) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetRmse() {
    if err := oprot.WriteFieldBegin("rmse", thrift.DOUBLE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rmse: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Rmse)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.rmse (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rmse: ", p), err) }
  }
  return err
}

func (p *LinearModel) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetExplainedVariance() {
    if err := oprot.WriteFieldBegin("explainedVariance", thrift.DOUBLE, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:explainedVariance: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.ExplainedVariance)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.explainedVariance (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:explainedVariance: ", p), err) }
  }
  return err
}

func (p *LinearModel) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetR2() {
    if err := oprot.WriteFieldBegin("r2", thrift.DOUBLE, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:r2: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.R2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.r2 (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:r2: ", p), err) }
  }
  return err
}

func (p *LinearModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LinearModel(%+v)", *p)
}

// Attributes:
//  - Df
//  - Spec
//  - Model
//  - FeatureColumns
//  - PredictionColumns
//  - LabelColumns
//  - ExperimentRunId
//  - ProblemType
//  - Metadata
type FitEvent struct {
  Df *DataFrame `thrift:"df,1" db:"df" json:"df"`
  Spec *TransformerSpec `thrift:"spec,2" db:"spec" json:"spec"`
  Model *Transformer `thrift:"model,3" db:"model" json:"model"`
  FeatureColumns []string `thrift:"featureColumns,4" db:"featureColumns" json:"featureColumns"`
  PredictionColumns []string `thrift:"predictionColumns,5" db:"predictionColumns" json:"predictionColumns"`
  LabelColumns []string `thrift:"labelColumns,6" db:"labelColumns" json:"labelColumns"`
  ExperimentRunId int32 `thrift:"experimentRunId,7" db:"experimentRunId" json:"experimentRunId"`
  ProblemType ProblemType `thrift:"problemType,8" db:"problemType" json:"problemType,omitempty"`
  Metadata *string `thrift:"metadata,9" db:"metadata" json:"metadata,omitempty"`
}

func NewFitEvent() *FitEvent {
  return &FitEvent{
ProblemType: 0,
}
}

var FitEvent_Df_DEFAULT *DataFrame
func (p *FitEvent) GetDf() *DataFrame {
  if !p.IsSetDf() {
    return FitEvent_Df_DEFAULT
  }
return p.Df
}
var FitEvent_Spec_DEFAULT *TransformerSpec
func (p *FitEvent) GetSpec() *TransformerSpec {
  if !p.IsSetSpec() {
    return FitEvent_Spec_DEFAULT
  }
return p.Spec
}
var FitEvent_Model_DEFAULT *Transformer
func (p *FitEvent) GetModel() *Transformer {
  if !p.IsSetModel() {
    return FitEvent_Model_DEFAULT
  }
return p.Model
}

func (p *FitEvent) GetFeatureColumns() []string {
  return p.FeatureColumns
}

func (p *FitEvent) GetPredictionColumns() []string {
  return p.PredictionColumns
}

func (p *FitEvent) GetLabelColumns() []string {
  return p.LabelColumns
}

func (p *FitEvent) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}
var FitEvent_ProblemType_DEFAULT ProblemType = 0

func (p *FitEvent) GetProblemType() ProblemType {
  return p.ProblemType
}
var FitEvent_Metadata_DEFAULT string
func (p *FitEvent) GetMetadata() string {
  if !p.IsSetMetadata() {
    return FitEvent_Metadata_DEFAULT
  }
return *p.Metadata
}
func (p *FitEvent) IsSetDf() bool {
  return p.Df != nil
}

func (p *FitEvent) IsSetSpec() bool {
  return p.Spec != nil
}

func (p *FitEvent) IsSetModel() bool {
  return p.Model != nil
}

func (p *FitEvent) IsSetProblemType() bool {
  return p.ProblemType != FitEvent_ProblemType_DEFAULT
}

func (p *FitEvent) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *FitEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FitEvent)  ReadField1(iprot thrift.TProtocol) error {
  p.Df = &DataFrame{
  ID: -1,
}
  if err := p.Df.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Df), err)
  }
  return nil
}

func (p *FitEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.Spec = &TransformerSpec{
  ID: -1,
}
  if err := p.Spec.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Spec), err)
  }
  return nil
}

func (p *FitEvent)  ReadField3(iprot thrift.TProtocol) error {
  p.Model = &Transformer{
  ID: -1,
}
  if err := p.Model.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Model), err)
  }
  return nil
}

func (p *FitEvent)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.FeatureColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.FeatureColumns = append(p.FeatureColumns, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FitEvent)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PredictionColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.PredictionColumns = append(p.PredictionColumns, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FitEvent)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.LabelColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.LabelColumns = append(p.LabelColumns, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FitEvent)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *FitEvent)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := ProblemType(v)
  p.ProblemType = temp
}
  return nil
}

func (p *FitEvent)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Metadata = &v
}
  return nil
}

func (p *FitEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FitEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FitEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("df", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:df: ", p), err) }
  if err := p.Df.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Df), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:df: ", p), err) }
  return err
}

func (p *FitEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spec", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:spec: ", p), err) }
  if err := p.Spec.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Spec), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:spec: ", p), err) }
  return err
}

func (p *FitEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:model: ", p), err) }
  if err := p.Model.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Model), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:model: ", p), err) }
  return err
}

func (p *FitEvent) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureColumns", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:featureColumns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.FeatureColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FeatureColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:featureColumns: ", p), err) }
  return err
}

func (p *FitEvent) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("predictionColumns", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:predictionColumns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PredictionColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PredictionColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:predictionColumns: ", p), err) }
  return err
}

func (p *FitEvent) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("labelColumns", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:labelColumns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.LabelColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LabelColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:labelColumns: ", p), err) }
  return err
}

func (p *FitEvent) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:experimentRunId: ", p), err) }
  return err
}

func (p *FitEvent) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetProblemType() {
    if err := oprot.WriteFieldBegin("problemType", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:problemType: ", p), err) }
    if err := oprot.WriteI32(int32(p.ProblemType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.problemType (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:problemType: ", p), err) }
  }
  return err
}

func (p *FitEvent) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetMetadata() {
    if err := oprot.WriteFieldBegin("metadata", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:metadata: ", p), err) }
    if err := oprot.WriteString(string(*p.Metadata)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.metadata (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:metadata: ", p), err) }
  }
  return err
}

func (p *FitEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FitEvent(%+v)", *p)
}

// Attributes:
//  - DfId
//  - SpecId
//  - ModelId
//  - EventId
//  - FitEventId
type FitEventResponse struct {
  DfId int32 `thrift:"dfId,1" db:"dfId" json:"dfId"`
  SpecId int32 `thrift:"specId,2" db:"specId" json:"specId"`
  ModelId int32 `thrift:"modelId,3" db:"modelId" json:"modelId"`
  EventId int32 `thrift:"eventId,4" db:"eventId" json:"eventId"`
  FitEventId int32 `thrift:"fitEventId,5" db:"fitEventId" json:"fitEventId"`
}

func NewFitEventResponse() *FitEventResponse {
  return &FitEventResponse{}
}


func (p *FitEventResponse) GetDfId() int32 {
  return p.DfId
}

func (p *FitEventResponse) GetSpecId() int32 {
  return p.SpecId
}

func (p *FitEventResponse) GetModelId() int32 {
  return p.ModelId
}

func (p *FitEventResponse) GetEventId() int32 {
  return p.EventId
}

func (p *FitEventResponse) GetFitEventId() int32 {
  return p.FitEventId
}
func (p *FitEventResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FitEventResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DfId = v
}
  return nil
}

func (p *FitEventResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SpecId = v
}
  return nil
}

func (p *FitEventResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *FitEventResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EventId = v
}
  return nil
}

func (p *FitEventResponse)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FitEventId = v
}
  return nil
}

func (p *FitEventResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FitEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FitEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dfId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dfId: ", p), err) }
  if err := oprot.WriteI32(int32(p.DfId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dfId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dfId: ", p), err) }
  return err
}

func (p *FitEventResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("specId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:specId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpecId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.specId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:specId: ", p), err) }
  return err
}

func (p *FitEventResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:modelId: ", p), err) }
  return err
}

func (p *FitEventResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eventId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:eventId: ", p), err) }
  if err := oprot.WriteI32(int32(p.EventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:eventId: ", p), err) }
  return err
}

func (p *FitEventResponse) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fitEventId", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fitEventId: ", p), err) }
  if err := oprot.WriteI32(int32(p.FitEventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fitEventId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fitEventId: ", p), err) }
  return err
}

func (p *FitEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FitEventResponse(%+v)", *p)
}

// Attributes:
//  - Df
//  - Model
//  - MetricType
//  - MetricValue
//  - LabelCol
//  - PredictionCol
//  - ExperimentRunId
type MetricEvent struct {
  Df *DataFrame `thrift:"df,1" db:"df" json:"df"`
  Model *Transformer `thrift:"model,2" db:"model" json:"model"`
  MetricType string `thrift:"metricType,3" db:"metricType" json:"metricType"`
  MetricValue float64 `thrift:"metricValue,4" db:"metricValue" json:"metricValue"`
  LabelCol string `thrift:"labelCol,5" db:"labelCol" json:"labelCol"`
  PredictionCol string `thrift:"predictionCol,6" db:"predictionCol" json:"predictionCol"`
  ExperimentRunId int32 `thrift:"experimentRunId,7" db:"experimentRunId" json:"experimentRunId"`
}

func NewMetricEvent() *MetricEvent {
  return &MetricEvent{}
}

var MetricEvent_Df_DEFAULT *DataFrame
func (p *MetricEvent) GetDf() *DataFrame {
  if !p.IsSetDf() {
    return MetricEvent_Df_DEFAULT
  }
return p.Df
}
var MetricEvent_Model_DEFAULT *Transformer
func (p *MetricEvent) GetModel() *Transformer {
  if !p.IsSetModel() {
    return MetricEvent_Model_DEFAULT
  }
return p.Model
}

func (p *MetricEvent) GetMetricType() string {
  return p.MetricType
}

func (p *MetricEvent) GetMetricValue() float64 {
  return p.MetricValue
}

func (p *MetricEvent) GetLabelCol() string {
  return p.LabelCol
}

func (p *MetricEvent) GetPredictionCol() string {
  return p.PredictionCol
}

func (p *MetricEvent) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}
func (p *MetricEvent) IsSetDf() bool {
  return p.Df != nil
}

func (p *MetricEvent) IsSetModel() bool {
  return p.Model != nil
}

func (p *MetricEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetricEvent)  ReadField1(iprot thrift.TProtocol) error {
  p.Df = &DataFrame{
  ID: -1,
}
  if err := p.Df.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Df), err)
  }
  return nil
}

func (p *MetricEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.Model = &Transformer{
  ID: -1,
}
  if err := p.Model.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Model), err)
  }
  return nil
}

func (p *MetricEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MetricType = v
}
  return nil
}

func (p *MetricEvent)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MetricValue = v
}
  return nil
}

func (p *MetricEvent)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LabelCol = v
}
  return nil
}

func (p *MetricEvent)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PredictionCol = v
}
  return nil
}

func (p *MetricEvent)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *MetricEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MetricEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetricEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("df", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:df: ", p), err) }
  if err := p.Df.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Df), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:df: ", p), err) }
  return err
}

func (p *MetricEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model: ", p), err) }
  if err := p.Model.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Model), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model: ", p), err) }
  return err
}

func (p *MetricEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metricType", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:metricType: ", p), err) }
  if err := oprot.WriteString(string(p.MetricType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metricType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:metricType: ", p), err) }
  return err
}

func (p *MetricEvent) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metricValue", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metricValue: ", p), err) }
  if err := oprot.WriteDouble(float64(p.MetricValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metricValue (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metricValue: ", p), err) }
  return err
}

func (p *MetricEvent) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("labelCol", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:labelCol: ", p), err) }
  if err := oprot.WriteString(string(p.LabelCol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.labelCol (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:labelCol: ", p), err) }
  return err
}

func (p *MetricEvent) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("predictionCol", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:predictionCol: ", p), err) }
  if err := oprot.WriteString(string(p.PredictionCol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.predictionCol (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:predictionCol: ", p), err) }
  return err
}

func (p *MetricEvent) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:experimentRunId: ", p), err) }
  return err
}

func (p *MetricEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetricEvent(%+v)", *p)
}

// Attributes:
//  - ModelId
//  - DfId
//  - EventId
//  - MetricEventId
type MetricEventResponse struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
  DfId int32 `thrift:"dfId,2" db:"dfId" json:"dfId"`
  EventId int32 `thrift:"eventId,3" db:"eventId" json:"eventId"`
  MetricEventId int32 `thrift:"metricEventId,4" db:"metricEventId" json:"metricEventId"`
}

func NewMetricEventResponse() *MetricEventResponse {
  return &MetricEventResponse{}
}


func (p *MetricEventResponse) GetModelId() int32 {
  return p.ModelId
}

func (p *MetricEventResponse) GetDfId() int32 {
  return p.DfId
}

func (p *MetricEventResponse) GetEventId() int32 {
  return p.EventId
}

func (p *MetricEventResponse) GetMetricEventId() int32 {
  return p.MetricEventId
}
func (p *MetricEventResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MetricEventResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *MetricEventResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DfId = v
}
  return nil
}

func (p *MetricEventResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EventId = v
}
  return nil
}

func (p *MetricEventResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MetricEventId = v
}
  return nil
}

func (p *MetricEventResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MetricEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MetricEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *MetricEventResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dfId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dfId: ", p), err) }
  if err := oprot.WriteI32(int32(p.DfId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dfId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dfId: ", p), err) }
  return err
}

func (p *MetricEventResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eventId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:eventId: ", p), err) }
  if err := oprot.WriteI32(int32(p.EventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:eventId: ", p), err) }
  return err
}

func (p *MetricEventResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metricEventId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metricEventId: ", p), err) }
  if err := oprot.WriteI32(int32(p.MetricEventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metricEventId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metricEventId: ", p), err) }
  return err
}

func (p *MetricEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetricEventResponse(%+v)", *p)
}

// Attributes:
//  - OldDataFrame
//  - NewDataFrame_
//  - Transformer
//  - InputColumns
//  - OutputColumns
//  - ExperimentRunId
type TransformEvent struct {
  OldDataFrame *DataFrame `thrift:"oldDataFrame,1" db:"oldDataFrame" json:"oldDataFrame"`
  NewDataFrame_ *DataFrame `thrift:"newDataFrame,2" db:"newDataFrame" json:"newDataFrame"`
  Transformer *Transformer `thrift:"transformer,3" db:"transformer" json:"transformer"`
  InputColumns []string `thrift:"inputColumns,4" db:"inputColumns" json:"inputColumns"`
  OutputColumns []string `thrift:"outputColumns,5" db:"outputColumns" json:"outputColumns"`
  ExperimentRunId int32 `thrift:"experimentRunId,6" db:"experimentRunId" json:"experimentRunId"`
}

func NewTransformEvent() *TransformEvent {
  return &TransformEvent{}
}

var TransformEvent_OldDataFrame_DEFAULT *DataFrame
func (p *TransformEvent) GetOldDataFrame() *DataFrame {
  if !p.IsSetOldDataFrame() {
    return TransformEvent_OldDataFrame_DEFAULT
  }
return p.OldDataFrame
}
var TransformEvent_NewDataFrame__DEFAULT *DataFrame
func (p *TransformEvent) GetNewDataFrame_() *DataFrame {
  if !p.IsSetNewDataFrame_() {
    return TransformEvent_NewDataFrame__DEFAULT
  }
return p.NewDataFrame_
}
var TransformEvent_Transformer_DEFAULT *Transformer
func (p *TransformEvent) GetTransformer() *Transformer {
  if !p.IsSetTransformer() {
    return TransformEvent_Transformer_DEFAULT
  }
return p.Transformer
}

func (p *TransformEvent) GetInputColumns() []string {
  return p.InputColumns
}

func (p *TransformEvent) GetOutputColumns() []string {
  return p.OutputColumns
}

func (p *TransformEvent) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}
func (p *TransformEvent) IsSetOldDataFrame() bool {
  return p.OldDataFrame != nil
}

func (p *TransformEvent) IsSetNewDataFrame_() bool {
  return p.NewDataFrame_ != nil
}

func (p *TransformEvent) IsSetTransformer() bool {
  return p.Transformer != nil
}

func (p *TransformEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransformEvent)  ReadField1(iprot thrift.TProtocol) error {
  p.OldDataFrame = &DataFrame{
  ID: -1,
}
  if err := p.OldDataFrame.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OldDataFrame), err)
  }
  return nil
}

func (p *TransformEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.NewDataFrame_ = &DataFrame{
  ID: -1,
}
  if err := p.NewDataFrame_.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NewDataFrame_), err)
  }
  return nil
}

func (p *TransformEvent)  ReadField3(iprot thrift.TProtocol) error {
  p.Transformer = &Transformer{
  ID: -1,
}
  if err := p.Transformer.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transformer), err)
  }
  return nil
}

func (p *TransformEvent)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.InputColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.InputColumns = append(p.InputColumns, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TransformEvent)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.OutputColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.OutputColumns = append(p.OutputColumns, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TransformEvent)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *TransformEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TransformEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransformEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldDataFrame", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oldDataFrame: ", p), err) }
  if err := p.OldDataFrame.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OldDataFrame), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oldDataFrame: ", p), err) }
  return err
}

func (p *TransformEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newDataFrame", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:newDataFrame: ", p), err) }
  if err := p.NewDataFrame_.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NewDataFrame_), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:newDataFrame: ", p), err) }
  return err
}

func (p *TransformEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transformer", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:transformer: ", p), err) }
  if err := p.Transformer.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transformer), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:transformer: ", p), err) }
  return err
}

func (p *TransformEvent) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inputColumns", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:inputColumns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.InputColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.InputColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:inputColumns: ", p), err) }
  return err
}

func (p *TransformEvent) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("outputColumns", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:outputColumns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.OutputColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.OutputColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:outputColumns: ", p), err) }
  return err
}

func (p *TransformEvent) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:experimentRunId: ", p), err) }
  return err
}

func (p *TransformEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransformEvent(%+v)", *p)
}

// Attributes:
//  - OldDataFrameId
//  - NewDataFrameId_
//  - TransformerId
//  - EventId
//  - Filepath
type TransformEventResponse struct {
  OldDataFrameId int32 `thrift:"oldDataFrameId,1" db:"oldDataFrameId" json:"oldDataFrameId"`
  NewDataFrameId_ int32 `thrift:"newDataFrameId,2" db:"newDataFrameId" json:"newDataFrameId"`
  TransformerId int32 `thrift:"transformerId,3" db:"transformerId" json:"transformerId"`
  EventId int32 `thrift:"eventId,4" db:"eventId" json:"eventId"`
  Filepath string `thrift:"filepath,5" db:"filepath" json:"filepath"`
}

func NewTransformEventResponse() *TransformEventResponse {
  return &TransformEventResponse{}
}


func (p *TransformEventResponse) GetOldDataFrameId() int32 {
  return p.OldDataFrameId
}

func (p *TransformEventResponse) GetNewDataFrameId_() int32 {
  return p.NewDataFrameId_
}

func (p *TransformEventResponse) GetTransformerId() int32 {
  return p.TransformerId
}

func (p *TransformEventResponse) GetEventId() int32 {
  return p.EventId
}

func (p *TransformEventResponse) GetFilepath() string {
  return p.Filepath
}
func (p *TransformEventResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransformEventResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OldDataFrameId = v
}
  return nil
}

func (p *TransformEventResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewDataFrameId_ = v
}
  return nil
}

func (p *TransformEventResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TransformerId = v
}
  return nil
}

func (p *TransformEventResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EventId = v
}
  return nil
}

func (p *TransformEventResponse)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Filepath = v
}
  return nil
}

func (p *TransformEventResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TransformEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransformEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldDataFrameId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oldDataFrameId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OldDataFrameId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldDataFrameId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oldDataFrameId: ", p), err) }
  return err
}

func (p *TransformEventResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newDataFrameId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:newDataFrameId: ", p), err) }
  if err := oprot.WriteI32(int32(p.NewDataFrameId_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newDataFrameId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:newDataFrameId: ", p), err) }
  return err
}

func (p *TransformEventResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transformerId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:transformerId: ", p), err) }
  if err := oprot.WriteI32(int32(p.TransformerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transformerId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:transformerId: ", p), err) }
  return err
}

func (p *TransformEventResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eventId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:eventId: ", p), err) }
  if err := oprot.WriteI32(int32(p.EventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:eventId: ", p), err) }
  return err
}

func (p *TransformEventResponse) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("filepath", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:filepath: ", p), err) }
  if err := oprot.WriteString(string(p.Filepath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filepath (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:filepath: ", p), err) }
  return err
}

func (p *TransformEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransformEventResponse(%+v)", *p)
}

// Attributes:
//  - OldDataFrame
//  - Weights
//  - Seed
//  - SplitDataFrames
//  - ExperimentRunId
type RandomSplitEvent struct {
  OldDataFrame *DataFrame `thrift:"oldDataFrame,1" db:"oldDataFrame" json:"oldDataFrame"`
  Weights []float64 `thrift:"weights,2" db:"weights" json:"weights"`
  Seed int64 `thrift:"seed,3" db:"seed" json:"seed"`
  SplitDataFrames []*DataFrame `thrift:"splitDataFrames,4" db:"splitDataFrames" json:"splitDataFrames"`
  ExperimentRunId int32 `thrift:"experimentRunId,5" db:"experimentRunId" json:"experimentRunId"`
}

func NewRandomSplitEvent() *RandomSplitEvent {
  return &RandomSplitEvent{}
}

var RandomSplitEvent_OldDataFrame_DEFAULT *DataFrame
func (p *RandomSplitEvent) GetOldDataFrame() *DataFrame {
  if !p.IsSetOldDataFrame() {
    return RandomSplitEvent_OldDataFrame_DEFAULT
  }
return p.OldDataFrame
}

func (p *RandomSplitEvent) GetWeights() []float64 {
  return p.Weights
}

func (p *RandomSplitEvent) GetSeed() int64 {
  return p.Seed
}

func (p *RandomSplitEvent) GetSplitDataFrames() []*DataFrame {
  return p.SplitDataFrames
}

func (p *RandomSplitEvent) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}
func (p *RandomSplitEvent) IsSetOldDataFrame() bool {
  return p.OldDataFrame != nil
}

func (p *RandomSplitEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RandomSplitEvent)  ReadField1(iprot thrift.TProtocol) error {
  p.OldDataFrame = &DataFrame{
  ID: -1,
}
  if err := p.OldDataFrame.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OldDataFrame), err)
  }
  return nil
}

func (p *RandomSplitEvent)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.Weights =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.Weights = append(p.Weights, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RandomSplitEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Seed = v
}
  return nil
}

func (p *RandomSplitEvent)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DataFrame, 0, size)
  p.SplitDataFrames =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &DataFrame{
    ID: -1,
}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.SplitDataFrames = append(p.SplitDataFrames, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RandomSplitEvent)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *RandomSplitEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RandomSplitEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RandomSplitEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldDataFrame", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oldDataFrame: ", p), err) }
  if err := p.OldDataFrame.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OldDataFrame), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oldDataFrame: ", p), err) }
  return err
}

func (p *RandomSplitEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("weights", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:weights: ", p), err) }
  if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.Weights)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Weights {
    if err := oprot.WriteDouble(float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:weights: ", p), err) }
  return err
}

func (p *RandomSplitEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seed", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seed: ", p), err) }
  if err := oprot.WriteI64(int64(p.Seed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seed (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seed: ", p), err) }
  return err
}

func (p *RandomSplitEvent) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("splitDataFrames", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:splitDataFrames: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SplitDataFrames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SplitDataFrames {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:splitDataFrames: ", p), err) }
  return err
}

func (p *RandomSplitEvent) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:experimentRunId: ", p), err) }
  return err
}

func (p *RandomSplitEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RandomSplitEvent(%+v)", *p)
}

// Attributes:
//  - OldDataFrameId
//  - SplitIds
//  - SplitEventId
type RandomSplitEventResponse struct {
  OldDataFrameId int32 `thrift:"oldDataFrameId,1" db:"oldDataFrameId" json:"oldDataFrameId"`
  SplitIds []int32 `thrift:"splitIds,2" db:"splitIds" json:"splitIds"`
  SplitEventId int32 `thrift:"splitEventId,3" db:"splitEventId" json:"splitEventId"`
}

func NewRandomSplitEventResponse() *RandomSplitEventResponse {
  return &RandomSplitEventResponse{}
}


func (p *RandomSplitEventResponse) GetOldDataFrameId() int32 {
  return p.OldDataFrameId
}

func (p *RandomSplitEventResponse) GetSplitIds() []int32 {
  return p.SplitIds
}

func (p *RandomSplitEventResponse) GetSplitEventId() int32 {
  return p.SplitEventId
}
func (p *RandomSplitEventResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RandomSplitEventResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OldDataFrameId = v
}
  return nil
}

func (p *RandomSplitEventResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.SplitIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.SplitIds = append(p.SplitIds, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RandomSplitEventResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SplitEventId = v
}
  return nil
}

func (p *RandomSplitEventResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RandomSplitEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RandomSplitEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldDataFrameId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oldDataFrameId: ", p), err) }
  if err := oprot.WriteI32(int32(p.OldDataFrameId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldDataFrameId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oldDataFrameId: ", p), err) }
  return err
}

func (p *RandomSplitEventResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("splitIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:splitIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.SplitIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SplitIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:splitIds: ", p), err) }
  return err
}

func (p *RandomSplitEventResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("splitEventId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:splitEventId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SplitEventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.splitEventId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:splitEventId: ", p), err) }
  return err
}

func (p *RandomSplitEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RandomSplitEventResponse(%+v)", *p)
}

// Attributes:
//  - StageNumber
//  - Te
type PipelineTransformStage struct {
  StageNumber int32 `thrift:"stageNumber,1" db:"stageNumber" json:"stageNumber"`
  Te *TransformEvent `thrift:"te,2" db:"te" json:"te"`
}

func NewPipelineTransformStage() *PipelineTransformStage {
  return &PipelineTransformStage{}
}


func (p *PipelineTransformStage) GetStageNumber() int32 {
  return p.StageNumber
}
var PipelineTransformStage_Te_DEFAULT *TransformEvent
func (p *PipelineTransformStage) GetTe() *TransformEvent {
  if !p.IsSetTe() {
    return PipelineTransformStage_Te_DEFAULT
  }
return p.Te
}
func (p *PipelineTransformStage) IsSetTe() bool {
  return p.Te != nil
}

func (p *PipelineTransformStage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PipelineTransformStage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StageNumber = v
}
  return nil
}

func (p *PipelineTransformStage)  ReadField2(iprot thrift.TProtocol) error {
  p.Te = &TransformEvent{}
  if err := p.Te.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Te), err)
  }
  return nil
}

func (p *PipelineTransformStage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PipelineTransformStage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PipelineTransformStage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stageNumber", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stageNumber: ", p), err) }
  if err := oprot.WriteI32(int32(p.StageNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stageNumber (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stageNumber: ", p), err) }
  return err
}

func (p *PipelineTransformStage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("te", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:te: ", p), err) }
  if err := p.Te.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Te), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:te: ", p), err) }
  return err
}

func (p *PipelineTransformStage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PipelineTransformStage(%+v)", *p)
}

// Attributes:
//  - StageNumber
//  - Fe
type PipelineFitStage struct {
  StageNumber int32 `thrift:"stageNumber,1" db:"stageNumber" json:"stageNumber"`
  Fe *FitEvent `thrift:"fe,2" db:"fe" json:"fe"`
}

func NewPipelineFitStage() *PipelineFitStage {
  return &PipelineFitStage{}
}


func (p *PipelineFitStage) GetStageNumber() int32 {
  return p.StageNumber
}
var PipelineFitStage_Fe_DEFAULT *FitEvent
func (p *PipelineFitStage) GetFe() *FitEvent {
  if !p.IsSetFe() {
    return PipelineFitStage_Fe_DEFAULT
  }
return p.Fe
}
func (p *PipelineFitStage) IsSetFe() bool {
  return p.Fe != nil
}

func (p *PipelineFitStage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PipelineFitStage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StageNumber = v
}
  return nil
}

func (p *PipelineFitStage)  ReadField2(iprot thrift.TProtocol) error {
  p.Fe = &FitEvent{
  ProblemType:   0,
}
  if err := p.Fe.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fe), err)
  }
  return nil
}

func (p *PipelineFitStage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PipelineFitStage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PipelineFitStage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stageNumber", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stageNumber: ", p), err) }
  if err := oprot.WriteI32(int32(p.StageNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stageNumber (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stageNumber: ", p), err) }
  return err
}

func (p *PipelineFitStage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fe", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fe: ", p), err) }
  if err := p.Fe.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fe), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fe: ", p), err) }
  return err
}

func (p *PipelineFitStage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PipelineFitStage(%+v)", *p)
}

// Attributes:
//  - PipelineFit
//  - TransformStages
//  - FitStages
//  - ExperimentRunId
type PipelineEvent struct {
  PipelineFit *FitEvent `thrift:"pipelineFit,1" db:"pipelineFit" json:"pipelineFit"`
  TransformStages []*PipelineTransformStage `thrift:"transformStages,2" db:"transformStages" json:"transformStages"`
  FitStages []*PipelineFitStage `thrift:"fitStages,3" db:"fitStages" json:"fitStages"`
  ExperimentRunId int32 `thrift:"experimentRunId,4" db:"experimentRunId" json:"experimentRunId"`
}

func NewPipelineEvent() *PipelineEvent {
  return &PipelineEvent{}
}

var PipelineEvent_PipelineFit_DEFAULT *FitEvent
func (p *PipelineEvent) GetPipelineFit() *FitEvent {
  if !p.IsSetPipelineFit() {
    return PipelineEvent_PipelineFit_DEFAULT
  }
return p.PipelineFit
}

func (p *PipelineEvent) GetTransformStages() []*PipelineTransformStage {
  return p.TransformStages
}

func (p *PipelineEvent) GetFitStages() []*PipelineFitStage {
  return p.FitStages
}

func (p *PipelineEvent) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}
func (p *PipelineEvent) IsSetPipelineFit() bool {
  return p.PipelineFit != nil
}

func (p *PipelineEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PipelineEvent)  ReadField1(iprot thrift.TProtocol) error {
  p.PipelineFit = &FitEvent{
  ProblemType:   0,
}
  if err := p.PipelineFit.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PipelineFit), err)
  }
  return nil
}

func (p *PipelineEvent)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PipelineTransformStage, 0, size)
  p.TransformStages =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &PipelineTransformStage{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.TransformStages = append(p.TransformStages, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PipelineEvent)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PipelineFitStage, 0, size)
  p.FitStages =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &PipelineFitStage{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.FitStages = append(p.FitStages, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PipelineEvent)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *PipelineEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PipelineEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PipelineEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pipelineFit", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pipelineFit: ", p), err) }
  if err := p.PipelineFit.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PipelineFit), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pipelineFit: ", p), err) }
  return err
}

func (p *PipelineEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transformStages", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transformStages: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TransformStages)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TransformStages {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transformStages: ", p), err) }
  return err
}

func (p *PipelineEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fitStages", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fitStages: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FitStages)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FitStages {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fitStages: ", p), err) }
  return err
}

func (p *PipelineEvent) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:experimentRunId: ", p), err) }
  return err
}

func (p *PipelineEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PipelineEvent(%+v)", *p)
}

// Attributes:
//  - PipelineFitResponse
//  - TransformStagesResponses
//  - FitStagesResponses
type PipelineEventResponse struct {
  PipelineFitResponse *FitEventResponse `thrift:"pipelineFitResponse,1" db:"pipelineFitResponse" json:"pipelineFitResponse"`
  TransformStagesResponses []*TransformEventResponse `thrift:"transformStagesResponses,2" db:"transformStagesResponses" json:"transformStagesResponses"`
  FitStagesResponses []*FitEventResponse `thrift:"fitStagesResponses,3" db:"fitStagesResponses" json:"fitStagesResponses"`
}

func NewPipelineEventResponse() *PipelineEventResponse {
  return &PipelineEventResponse{}
}

var PipelineEventResponse_PipelineFitResponse_DEFAULT *FitEventResponse
func (p *PipelineEventResponse) GetPipelineFitResponse() *FitEventResponse {
  if !p.IsSetPipelineFitResponse() {
    return PipelineEventResponse_PipelineFitResponse_DEFAULT
  }
return p.PipelineFitResponse
}

func (p *PipelineEventResponse) GetTransformStagesResponses() []*TransformEventResponse {
  return p.TransformStagesResponses
}

func (p *PipelineEventResponse) GetFitStagesResponses() []*FitEventResponse {
  return p.FitStagesResponses
}
func (p *PipelineEventResponse) IsSetPipelineFitResponse() bool {
  return p.PipelineFitResponse != nil
}

func (p *PipelineEventResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PipelineEventResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.PipelineFitResponse = &FitEventResponse{}
  if err := p.PipelineFitResponse.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PipelineFitResponse), err)
  }
  return nil
}

func (p *PipelineEventResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TransformEventResponse, 0, size)
  p.TransformStagesResponses =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := &TransformEventResponse{}
    if err := _elem15.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.TransformStagesResponses = append(p.TransformStagesResponses, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PipelineEventResponse)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FitEventResponse, 0, size)
  p.FitStagesResponses =  tSlice
  for i := 0; i < size; i ++ {
    _elem16 := &FitEventResponse{}
    if err := _elem16.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
    }
    p.FitStagesResponses = append(p.FitStagesResponses, _elem16)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PipelineEventResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PipelineEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PipelineEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pipelineFitResponse", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pipelineFitResponse: ", p), err) }
  if err := p.PipelineFitResponse.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PipelineFitResponse), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pipelineFitResponse: ", p), err) }
  return err
}

func (p *PipelineEventResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transformStagesResponses", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:transformStagesResponses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TransformStagesResponses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TransformStagesResponses {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:transformStagesResponses: ", p), err) }
  return err
}

func (p *PipelineEventResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fitStagesResponses", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fitStagesResponses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FitStagesResponses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FitStagesResponses {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fitStagesResponses: ", p), err) }
  return err
}

func (p *PipelineEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PipelineEventResponse(%+v)", *p)
}

// Attributes:
//  - Type
//  - Df
//  - Spec
//  - Transformer
//  - Message
type AnnotationFragment struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
  Df *DataFrame `thrift:"df,2" db:"df" json:"df"`
  Spec *TransformerSpec `thrift:"spec,3" db:"spec" json:"spec"`
  Transformer *Transformer `thrift:"transformer,4" db:"transformer" json:"transformer"`
  Message string `thrift:"message,5" db:"message" json:"message"`
}

func NewAnnotationFragment() *AnnotationFragment {
  return &AnnotationFragment{}
}


func (p *AnnotationFragment) GetType() string {
  return p.Type
}
var AnnotationFragment_Df_DEFAULT *DataFrame
func (p *AnnotationFragment) GetDf() *DataFrame {
  if !p.IsSetDf() {
    return AnnotationFragment_Df_DEFAULT
  }
return p.Df
}
var AnnotationFragment_Spec_DEFAULT *TransformerSpec
func (p *AnnotationFragment) GetSpec() *TransformerSpec {
  if !p.IsSetSpec() {
    return AnnotationFragment_Spec_DEFAULT
  }
return p.Spec
}
var AnnotationFragment_Transformer_DEFAULT *Transformer
func (p *AnnotationFragment) GetTransformer() *Transformer {
  if !p.IsSetTransformer() {
    return AnnotationFragment_Transformer_DEFAULT
  }
return p.Transformer
}

func (p *AnnotationFragment) GetMessage() string {
  return p.Message
}
func (p *AnnotationFragment) IsSetDf() bool {
  return p.Df != nil
}

func (p *AnnotationFragment) IsSetSpec() bool {
  return p.Spec != nil
}

func (p *AnnotationFragment) IsSetTransformer() bool {
  return p.Transformer != nil
}

func (p *AnnotationFragment) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AnnotationFragment)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *AnnotationFragment)  ReadField2(iprot thrift.TProtocol) error {
  p.Df = &DataFrame{
  ID: -1,
}
  if err := p.Df.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Df), err)
  }
  return nil
}

func (p *AnnotationFragment)  ReadField3(iprot thrift.TProtocol) error {
  p.Spec = &TransformerSpec{
  ID: -1,
}
  if err := p.Spec.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Spec), err)
  }
  return nil
}

func (p *AnnotationFragment)  ReadField4(iprot thrift.TProtocol) error {
  p.Transformer = &Transformer{
  ID: -1,
}
  if err := p.Transformer.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transformer), err)
  }
  return nil
}

func (p *AnnotationFragment)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *AnnotationFragment) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AnnotationFragment"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnnotationFragment) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *AnnotationFragment) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("df", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:df: ", p), err) }
  if err := p.Df.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Df), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:df: ", p), err) }
  return err
}

func (p *AnnotationFragment) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spec", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:spec: ", p), err) }
  if err := p.Spec.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Spec), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:spec: ", p), err) }
  return err
}

func (p *AnnotationFragment) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transformer", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transformer: ", p), err) }
  if err := p.Transformer.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transformer), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transformer: ", p), err) }
  return err
}

func (p *AnnotationFragment) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:message: ", p), err) }
  return err
}

func (p *AnnotationFragment) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnnotationFragment(%+v)", *p)
}

// Attributes:
//  - Type
//  - ID
type AnnotationFragmentResponse struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
  ID int32 `thrift:"id,2" db:"id" json:"id"`
}

func NewAnnotationFragmentResponse() *AnnotationFragmentResponse {
  return &AnnotationFragmentResponse{}
}


func (p *AnnotationFragmentResponse) GetType() string {
  return p.Type
}

func (p *AnnotationFragmentResponse) GetID() int32 {
  return p.ID
}
func (p *AnnotationFragmentResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AnnotationFragmentResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *AnnotationFragmentResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *AnnotationFragmentResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AnnotationFragmentResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnnotationFragmentResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *AnnotationFragmentResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *AnnotationFragmentResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnnotationFragmentResponse(%+v)", *p)
}

// Attributes:
//  - Fragments
//  - ExperimentRunId
type AnnotationEvent struct {
  Fragments []*AnnotationFragment `thrift:"fragments,1" db:"fragments" json:"fragments"`
  ExperimentRunId int32 `thrift:"experimentRunId,2" db:"experimentRunId" json:"experimentRunId"`
}

func NewAnnotationEvent() *AnnotationEvent {
  return &AnnotationEvent{}
}


func (p *AnnotationEvent) GetFragments() []*AnnotationFragment {
  return p.Fragments
}

func (p *AnnotationEvent) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}
func (p *AnnotationEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AnnotationEvent)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AnnotationFragment, 0, size)
  p.Fragments =  tSlice
  for i := 0; i < size; i ++ {
    _elem17 := &AnnotationFragment{}
    if err := _elem17.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem17), err)
    }
    p.Fragments = append(p.Fragments, _elem17)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AnnotationEvent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *AnnotationEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AnnotationEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnnotationEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fragments", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fragments: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fragments)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Fragments {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fragments: ", p), err) }
  return err
}

func (p *AnnotationEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:experimentRunId: ", p), err) }
  return err
}

func (p *AnnotationEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnnotationEvent(%+v)", *p)
}

// Attributes:
//  - AnnotationId
//  - FragmentResponses
type AnnotationEventResponse struct {
  AnnotationId int32 `thrift:"annotationId,1" db:"annotationId" json:"annotationId"`
  FragmentResponses []*AnnotationFragmentResponse `thrift:"fragmentResponses,2" db:"fragmentResponses" json:"fragmentResponses"`
}

func NewAnnotationEventResponse() *AnnotationEventResponse {
  return &AnnotationEventResponse{}
}


func (p *AnnotationEventResponse) GetAnnotationId() int32 {
  return p.AnnotationId
}

func (p *AnnotationEventResponse) GetFragmentResponses() []*AnnotationFragmentResponse {
  return p.FragmentResponses
}
func (p *AnnotationEventResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AnnotationEventResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AnnotationId = v
}
  return nil
}

func (p *AnnotationEventResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*AnnotationFragmentResponse, 0, size)
  p.FragmentResponses =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &AnnotationFragmentResponse{}
    if err := _elem18.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.FragmentResponses = append(p.FragmentResponses, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AnnotationEventResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AnnotationEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnnotationEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("annotationId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:annotationId: ", p), err) }
  if err := oprot.WriteI32(int32(p.AnnotationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.annotationId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:annotationId: ", p), err) }
  return err
}

func (p *AnnotationEventResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fragmentResponses", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fragmentResponses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FragmentResponses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FragmentResponses {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fragmentResponses: ", p), err) }
  return err
}

func (p *AnnotationEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnnotationEventResponse(%+v)", *p)
}

// Attributes:
//  - Ancestors
type DataFrameAncestry struct {
  Ancestors []*DataFrame `thrift:"ancestors,1" db:"ancestors" json:"ancestors"`
}

func NewDataFrameAncestry() *DataFrameAncestry {
  return &DataFrameAncestry{}
}


func (p *DataFrameAncestry) GetAncestors() []*DataFrame {
  return p.Ancestors
}
func (p *DataFrameAncestry) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DataFrameAncestry)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*DataFrame, 0, size)
  p.Ancestors =  tSlice
  for i := 0; i < size; i ++ {
    _elem19 := &DataFrame{
    ID: -1,
}
    if err := _elem19.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
    }
    p.Ancestors = append(p.Ancestors, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *DataFrameAncestry) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DataFrameAncestry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DataFrameAncestry) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ancestors", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ancestors: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ancestors)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ancestors {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ancestors: ", p), err) }
  return err
}

func (p *DataFrameAncestry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DataFrameAncestry(%+v)", *p)
}

// Attributes:
//  - Ancestor
//  - ChainIndexModel1
//  - ChainIndexModel2
type CommonAncestor struct {
  Ancestor *DataFrame `thrift:"ancestor,1" db:"ancestor" json:"ancestor,omitempty"`
  ChainIndexModel1 int32 `thrift:"chainIndexModel1,2" db:"chainIndexModel1" json:"chainIndexModel1"`
  ChainIndexModel2 int32 `thrift:"chainIndexModel2,3" db:"chainIndexModel2" json:"chainIndexModel2"`
}

func NewCommonAncestor() *CommonAncestor {
  return &CommonAncestor{}
}

var CommonAncestor_Ancestor_DEFAULT *DataFrame
func (p *CommonAncestor) GetAncestor() *DataFrame {
  if !p.IsSetAncestor() {
    return CommonAncestor_Ancestor_DEFAULT
  }
return p.Ancestor
}

func (p *CommonAncestor) GetChainIndexModel1() int32 {
  return p.ChainIndexModel1
}

func (p *CommonAncestor) GetChainIndexModel2() int32 {
  return p.ChainIndexModel2
}
func (p *CommonAncestor) IsSetAncestor() bool {
  return p.Ancestor != nil
}

func (p *CommonAncestor) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CommonAncestor)  ReadField1(iprot thrift.TProtocol) error {
  p.Ancestor = &DataFrame{
  ID: -1,
}
  if err := p.Ancestor.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ancestor), err)
  }
  return nil
}

func (p *CommonAncestor)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChainIndexModel1 = v
}
  return nil
}

func (p *CommonAncestor)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChainIndexModel2 = v
}
  return nil
}

func (p *CommonAncestor) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CommonAncestor"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CommonAncestor) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetAncestor() {
    if err := oprot.WriteFieldBegin("ancestor", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ancestor: ", p), err) }
    if err := p.Ancestor.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ancestor), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ancestor: ", p), err) }
  }
  return err
}

func (p *CommonAncestor) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chainIndexModel1", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chainIndexModel1: ", p), err) }
  if err := oprot.WriteI32(int32(p.ChainIndexModel1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chainIndexModel1 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chainIndexModel1: ", p), err) }
  return err
}

func (p *CommonAncestor) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chainIndexModel2", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chainIndexModel2: ", p), err) }
  if err := oprot.WriteI32(int32(p.ChainIndexModel2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chainIndexModel2 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chainIndexModel2: ", p), err) }
  return err
}

func (p *CommonAncestor) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CommonAncestor(%+v)", *p)
}

// Attributes:
//  - First
//  - Second
type StringPair struct {
  First string `thrift:"first,1" db:"first" json:"first"`
  Second string `thrift:"second,2" db:"second" json:"second"`
}

func NewStringPair() *StringPair {
  return &StringPair{}
}


func (p *StringPair) GetFirst() string {
  return p.First
}

func (p *StringPair) GetSecond() string {
  return p.Second
}
func (p *StringPair) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *StringPair)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.First = v
}
  return nil
}

func (p *StringPair)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Second = v
}
  return nil
}

func (p *StringPair) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StringPair"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StringPair) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("first", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:first: ", p), err) }
  if err := oprot.WriteString(string(p.First)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.first (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:first: ", p), err) }
  return err
}

func (p *StringPair) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("second", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:second: ", p), err) }
  if err := oprot.WriteString(string(p.Second)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.second (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:second: ", p), err) }
  return err
}

func (p *StringPair) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StringPair(%+v)", *p)
}

// Attributes:
//  - Model1OnlyHyperparams
//  - Model2OnlyHyperparams
//  - SharedHyperparams
type CompareHyperParametersResponse struct {
  Model1OnlyHyperparams map[string]string `thrift:"model1OnlyHyperparams,1" db:"model1OnlyHyperparams" json:"model1OnlyHyperparams"`
  Model2OnlyHyperparams map[string]string `thrift:"model2OnlyHyperparams,2" db:"model2OnlyHyperparams" json:"model2OnlyHyperparams"`
  SharedHyperparams map[string]*StringPair `thrift:"sharedHyperparams,3" db:"sharedHyperparams" json:"sharedHyperparams"`
}

func NewCompareHyperParametersResponse() *CompareHyperParametersResponse {
  return &CompareHyperParametersResponse{}
}


func (p *CompareHyperParametersResponse) GetModel1OnlyHyperparams() map[string]string {
  return p.Model1OnlyHyperparams
}

func (p *CompareHyperParametersResponse) GetModel2OnlyHyperparams() map[string]string {
  return p.Model2OnlyHyperparams
}

func (p *CompareHyperParametersResponse) GetSharedHyperparams() map[string]*StringPair {
  return p.SharedHyperparams
}
func (p *CompareHyperParametersResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompareHyperParametersResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Model1OnlyHyperparams =  tMap
  for i := 0; i < size; i ++ {
var _key20 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key20 = v
}
var _val21 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val21 = v
}
    p.Model1OnlyHyperparams[_key20] = _val21
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CompareHyperParametersResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Model2OnlyHyperparams =  tMap
  for i := 0; i < size; i ++ {
var _key22 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key22 = v
}
var _val23 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val23 = v
}
    p.Model2OnlyHyperparams[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CompareHyperParametersResponse)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*StringPair, size)
  p.SharedHyperparams =  tMap
  for i := 0; i < size; i ++ {
var _key24 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key24 = v
}
    _val25 := &StringPair{}
    if err := _val25.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val25), err)
    }
    p.SharedHyperparams[_key24] = _val25
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *CompareHyperParametersResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CompareHyperParametersResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompareHyperParametersResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model1OnlyHyperparams", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:model1OnlyHyperparams: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Model1OnlyHyperparams)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Model1OnlyHyperparams {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:model1OnlyHyperparams: ", p), err) }
  return err
}

func (p *CompareHyperParametersResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model2OnlyHyperparams", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model2OnlyHyperparams: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Model2OnlyHyperparams)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Model2OnlyHyperparams {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model2OnlyHyperparams: ", p), err) }
  return err
}

func (p *CompareHyperParametersResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sharedHyperparams", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sharedHyperparams: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.SharedHyperparams)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.SharedHyperparams {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sharedHyperparams: ", p), err) }
  return err
}

func (p *CompareHyperParametersResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompareHyperParametersResponse(%+v)", *p)
}

// Attributes:
//  - Model1OnlyFeatures
//  - Model2OnlyFeatures
//  - CommonFeatures
type CompareFeaturesResponse struct {
  Model1OnlyFeatures []string `thrift:"model1OnlyFeatures,1" db:"model1OnlyFeatures" json:"model1OnlyFeatures"`
  Model2OnlyFeatures []string `thrift:"model2OnlyFeatures,2" db:"model2OnlyFeatures" json:"model2OnlyFeatures"`
  CommonFeatures []string `thrift:"commonFeatures,3" db:"commonFeatures" json:"commonFeatures"`
}

func NewCompareFeaturesResponse() *CompareFeaturesResponse {
  return &CompareFeaturesResponse{}
}


func (p *CompareFeaturesResponse) GetModel1OnlyFeatures() []string {
  return p.Model1OnlyFeatures
}

func (p *CompareFeaturesResponse) GetModel2OnlyFeatures() []string {
  return p.Model2OnlyFeatures
}

func (p *CompareFeaturesResponse) GetCommonFeatures() []string {
  return p.CommonFeatures
}
func (p *CompareFeaturesResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CompareFeaturesResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Model1OnlyFeatures =  tSlice
  for i := 0; i < size; i ++ {
var _elem26 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem26 = v
}
    p.Model1OnlyFeatures = append(p.Model1OnlyFeatures, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CompareFeaturesResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Model2OnlyFeatures =  tSlice
  for i := 0; i < size; i ++ {
var _elem27 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem27 = v
}
    p.Model2OnlyFeatures = append(p.Model2OnlyFeatures, _elem27)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CompareFeaturesResponse)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.CommonFeatures =  tSlice
  for i := 0; i < size; i ++ {
var _elem28 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem28 = v
}
    p.CommonFeatures = append(p.CommonFeatures, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CompareFeaturesResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CompareFeaturesResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CompareFeaturesResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model1OnlyFeatures", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:model1OnlyFeatures: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Model1OnlyFeatures)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Model1OnlyFeatures {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:model1OnlyFeatures: ", p), err) }
  return err
}

func (p *CompareFeaturesResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model2OnlyFeatures", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model2OnlyFeatures: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Model2OnlyFeatures)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Model2OnlyFeatures {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model2OnlyFeatures: ", p), err) }
  return err
}

func (p *CompareFeaturesResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commonFeatures", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:commonFeatures: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.CommonFeatures)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CommonFeatures {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:commonFeatures: ", p), err) }
  return err
}

func (p *CompareFeaturesResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CompareFeaturesResponse(%+v)", *p)
}

// Attributes:
//  - FeatureName
//  - PercentileRankInModel1
//  - PercentileRankInModel2
type FeatureImportanceComparison struct {
  FeatureName string `thrift:"featureName,1" db:"featureName" json:"featureName"`
  PercentileRankInModel1 *float64 `thrift:"percentileRankInModel1,2" db:"percentileRankInModel1" json:"percentileRankInModel1,omitempty"`
  PercentileRankInModel2 *float64 `thrift:"percentileRankInModel2,3" db:"percentileRankInModel2" json:"percentileRankInModel2,omitempty"`
}

func NewFeatureImportanceComparison() *FeatureImportanceComparison {
  return &FeatureImportanceComparison{}
}


func (p *FeatureImportanceComparison) GetFeatureName() string {
  return p.FeatureName
}
var FeatureImportanceComparison_PercentileRankInModel1_DEFAULT float64
func (p *FeatureImportanceComparison) GetPercentileRankInModel1() float64 {
  if !p.IsSetPercentileRankInModel1() {
    return FeatureImportanceComparison_PercentileRankInModel1_DEFAULT
  }
return *p.PercentileRankInModel1
}
var FeatureImportanceComparison_PercentileRankInModel2_DEFAULT float64
func (p *FeatureImportanceComparison) GetPercentileRankInModel2() float64 {
  if !p.IsSetPercentileRankInModel2() {
    return FeatureImportanceComparison_PercentileRankInModel2_DEFAULT
  }
return *p.PercentileRankInModel2
}
func (p *FeatureImportanceComparison) IsSetPercentileRankInModel1() bool {
  return p.PercentileRankInModel1 != nil
}

func (p *FeatureImportanceComparison) IsSetPercentileRankInModel2() bool {
  return p.PercentileRankInModel2 != nil
}

func (p *FeatureImportanceComparison) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FeatureImportanceComparison)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FeatureName = v
}
  return nil
}

func (p *FeatureImportanceComparison)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PercentileRankInModel1 = &v
}
  return nil
}

func (p *FeatureImportanceComparison)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PercentileRankInModel2 = &v
}
  return nil
}

func (p *FeatureImportanceComparison) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FeatureImportanceComparison"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FeatureImportanceComparison) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:featureName: ", p), err) }
  if err := oprot.WriteString(string(p.FeatureName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.featureName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:featureName: ", p), err) }
  return err
}

func (p *FeatureImportanceComparison) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPercentileRankInModel1() {
    if err := oprot.WriteFieldBegin("percentileRankInModel1", thrift.DOUBLE, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:percentileRankInModel1: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.PercentileRankInModel1)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.percentileRankInModel1 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:percentileRankInModel1: ", p), err) }
  }
  return err
}

func (p *FeatureImportanceComparison) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetPercentileRankInModel2() {
    if err := oprot.WriteFieldBegin("percentileRankInModel2", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:percentileRankInModel2: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.PercentileRankInModel2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.percentileRankInModel2 (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:percentileRankInModel2: ", p), err) }
  }
  return err
}

func (p *FeatureImportanceComparison) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FeatureImportanceComparison(%+v)", *p)
}

// Attributes:
//  - FeatureIndex
//  - Low
//  - High
type ConfidenceInterval struct {
  FeatureIndex int32 `thrift:"featureIndex,1" db:"featureIndex" json:"featureIndex"`
  Low float64 `thrift:"low,2" db:"low" json:"low"`
  High float64 `thrift:"high,3" db:"high" json:"high"`
}

func NewConfidenceInterval() *ConfidenceInterval {
  return &ConfidenceInterval{}
}


func (p *ConfidenceInterval) GetFeatureIndex() int32 {
  return p.FeatureIndex
}

func (p *ConfidenceInterval) GetLow() float64 {
  return p.Low
}

func (p *ConfidenceInterval) GetHigh() float64 {
  return p.High
}
func (p *ConfidenceInterval) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfidenceInterval)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FeatureIndex = v
}
  return nil
}

func (p *ConfidenceInterval)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Low = v
}
  return nil
}

func (p *ConfidenceInterval)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.High = v
}
  return nil
}

func (p *ConfidenceInterval) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConfidenceInterval"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfidenceInterval) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureIndex", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:featureIndex: ", p), err) }
  if err := oprot.WriteI32(int32(p.FeatureIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.featureIndex (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:featureIndex: ", p), err) }
  return err
}

func (p *ConfidenceInterval) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("low", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:low: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Low)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.low (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:low: ", p), err) }
  return err
}

func (p *ConfidenceInterval) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("high", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:high: ", p), err) }
  if err := oprot.WriteDouble(float64(p.High)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.high (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:high: ", p), err) }
  return err
}

func (p *ConfidenceInterval) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfidenceInterval(%+v)", *p)
}

// Attributes:
//  - ProjId
//  - Experiments
//  - ExperimentRuns
type ProjectExperimentsAndRuns struct {
  ProjId int32 `thrift:"projId,1" db:"projId" json:"projId"`
  Experiments []*Experiment `thrift:"experiments,2" db:"experiments" json:"experiments"`
  ExperimentRuns []*ExperimentRun `thrift:"experimentRuns,3" db:"experimentRuns" json:"experimentRuns"`
}

func NewProjectExperimentsAndRuns() *ProjectExperimentsAndRuns {
  return &ProjectExperimentsAndRuns{}
}


func (p *ProjectExperimentsAndRuns) GetProjId() int32 {
  return p.ProjId
}

func (p *ProjectExperimentsAndRuns) GetExperiments() []*Experiment {
  return p.Experiments
}

func (p *ProjectExperimentsAndRuns) GetExperimentRuns() []*ExperimentRun {
  return p.ExperimentRuns
}
func (p *ProjectExperimentsAndRuns) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProjectExperimentsAndRuns)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProjId = v
}
  return nil
}

func (p *ProjectExperimentsAndRuns)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Experiment, 0, size)
  p.Experiments =  tSlice
  for i := 0; i < size; i ++ {
    _elem29 := &Experiment{
    ID: -1,
}
    if err := _elem29.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem29), err)
    }
    p.Experiments = append(p.Experiments, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProjectExperimentsAndRuns)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExperimentRun, 0, size)
  p.ExperimentRuns =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := &ExperimentRun{
    ID: -1,
}
    if err := _elem30.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.ExperimentRuns = append(p.ExperimentRuns, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProjectExperimentsAndRuns) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProjectExperimentsAndRuns"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProjectExperimentsAndRuns) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:projId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProjId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:projId: ", p), err) }
  return err
}

func (p *ProjectExperimentsAndRuns) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experiments", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:experiments: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Experiments)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Experiments {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:experiments: ", p), err) }
  return err
}

func (p *ProjectExperimentsAndRuns) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRuns", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:experimentRuns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExperimentRuns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ExperimentRuns {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:experimentRuns: ", p), err) }
  return err
}

func (p *ProjectExperimentsAndRuns) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProjectExperimentsAndRuns(%+v)", *p)
}

// Attributes:
//  - Project
//  - NumExperiments
//  - NumExperimentRuns
type ProjectOverviewResponse struct {
  Project *Project `thrift:"project,1" db:"project" json:"project"`
  NumExperiments int32 `thrift:"numExperiments,2" db:"numExperiments" json:"numExperiments"`
  NumExperimentRuns int32 `thrift:"numExperimentRuns,3" db:"numExperimentRuns" json:"numExperimentRuns"`
}

func NewProjectOverviewResponse() *ProjectOverviewResponse {
  return &ProjectOverviewResponse{}
}

var ProjectOverviewResponse_Project_DEFAULT *Project
func (p *ProjectOverviewResponse) GetProject() *Project {
  if !p.IsSetProject() {
    return ProjectOverviewResponse_Project_DEFAULT
  }
return p.Project
}

func (p *ProjectOverviewResponse) GetNumExperiments() int32 {
  return p.NumExperiments
}

func (p *ProjectOverviewResponse) GetNumExperimentRuns() int32 {
  return p.NumExperimentRuns
}
func (p *ProjectOverviewResponse) IsSetProject() bool {
  return p.Project != nil
}

func (p *ProjectOverviewResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProjectOverviewResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Project = &Project{
  ID: -1,
}
  if err := p.Project.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Project), err)
  }
  return nil
}

func (p *ProjectOverviewResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumExperiments = v
}
  return nil
}

func (p *ProjectOverviewResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumExperimentRuns = v
}
  return nil
}

func (p *ProjectOverviewResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProjectOverviewResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProjectOverviewResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("project", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:project: ", p), err) }
  if err := p.Project.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Project), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:project: ", p), err) }
  return err
}

func (p *ProjectOverviewResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numExperiments", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:numExperiments: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumExperiments)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numExperiments (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:numExperiments: ", p), err) }
  return err
}

func (p *ProjectOverviewResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numExperimentRuns", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numExperimentRuns: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumExperimentRuns)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numExperimentRuns (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numExperimentRuns: ", p), err) }
  return err
}

func (p *ProjectOverviewResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProjectOverviewResponse(%+v)", *p)
}

// Attributes:
//  - ID
//  - ExperimentRunId
//  - ExperimentId
//  - ProjectId
//  - TrainingDataFrame
//  - Specification
//  - ProblemType
//  - FeatureColumns
//  - LabelColumns
//  - PredictionColumns
//  - Metrics
//  - Annotations
//  - Sha
//  - Filepath
//  - Timestamp
//  - LinearModelData
//  - Metadata
type ModelResponse struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  ExperimentRunId int32 `thrift:"experimentRunId,2" db:"experimentRunId" json:"experimentRunId"`
  ExperimentId int32 `thrift:"experimentId,3" db:"experimentId" json:"experimentId"`
  ProjectId int32 `thrift:"projectId,4" db:"projectId" json:"projectId"`
  TrainingDataFrame *DataFrame `thrift:"trainingDataFrame,5" db:"trainingDataFrame" json:"trainingDataFrame"`
  Specification *TransformerSpec `thrift:"specification,6" db:"specification" json:"specification"`
  ProblemType ProblemType `thrift:"problemType,7" db:"problemType" json:"problemType"`
  FeatureColumns []string `thrift:"featureColumns,8" db:"featureColumns" json:"featureColumns"`
  LabelColumns []string `thrift:"labelColumns,9" db:"labelColumns" json:"labelColumns"`
  PredictionColumns []string `thrift:"predictionColumns,10" db:"predictionColumns" json:"predictionColumns"`
  Metrics map[string]map[int32]float64 `thrift:"metrics,11" db:"metrics" json:"metrics"`
  Annotations []string `thrift:"annotations,12" db:"annotations" json:"annotations"`
  Sha string `thrift:"sha,13" db:"sha" json:"sha"`
  Filepath string `thrift:"filepath,14" db:"filepath" json:"filepath"`
  Timestamp string `thrift:"timestamp,15" db:"timestamp" json:"timestamp"`
  LinearModelData *LinearModel `thrift:"linearModelData,16" db:"linearModelData" json:"linearModelData,omitempty"`
  Metadata *string `thrift:"metadata,17" db:"metadata" json:"metadata,omitempty"`
}

func NewModelResponse() *ModelResponse {
  return &ModelResponse{}
}


func (p *ModelResponse) GetID() int32 {
  return p.ID
}

func (p *ModelResponse) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}

func (p *ModelResponse) GetExperimentId() int32 {
  return p.ExperimentId
}

func (p *ModelResponse) GetProjectId() int32 {
  return p.ProjectId
}
var ModelResponse_TrainingDataFrame_DEFAULT *DataFrame
func (p *ModelResponse) GetTrainingDataFrame() *DataFrame {
  if !p.IsSetTrainingDataFrame() {
    return ModelResponse_TrainingDataFrame_DEFAULT
  }
return p.TrainingDataFrame
}
var ModelResponse_Specification_DEFAULT *TransformerSpec
func (p *ModelResponse) GetSpecification() *TransformerSpec {
  if !p.IsSetSpecification() {
    return ModelResponse_Specification_DEFAULT
  }
return p.Specification
}

func (p *ModelResponse) GetProblemType() ProblemType {
  return p.ProblemType
}

func (p *ModelResponse) GetFeatureColumns() []string {
  return p.FeatureColumns
}

func (p *ModelResponse) GetLabelColumns() []string {
  return p.LabelColumns
}

func (p *ModelResponse) GetPredictionColumns() []string {
  return p.PredictionColumns
}

func (p *ModelResponse) GetMetrics() map[string]map[int32]float64 {
  return p.Metrics
}

func (p *ModelResponse) GetAnnotations() []string {
  return p.Annotations
}

func (p *ModelResponse) GetSha() string {
  return p.Sha
}

func (p *ModelResponse) GetFilepath() string {
  return p.Filepath
}

func (p *ModelResponse) GetTimestamp() string {
  return p.Timestamp
}
var ModelResponse_LinearModelData_DEFAULT *LinearModel
func (p *ModelResponse) GetLinearModelData() *LinearModel {
  if !p.IsSetLinearModelData() {
    return ModelResponse_LinearModelData_DEFAULT
  }
return p.LinearModelData
}
var ModelResponse_Metadata_DEFAULT string
func (p *ModelResponse) GetMetadata() string {
  if !p.IsSetMetadata() {
    return ModelResponse_Metadata_DEFAULT
  }
return *p.Metadata
}
func (p *ModelResponse) IsSetTrainingDataFrame() bool {
  return p.TrainingDataFrame != nil
}

func (p *ModelResponse) IsSetSpecification() bool {
  return p.Specification != nil
}

func (p *ModelResponse) IsSetLinearModelData() bool {
  return p.LinearModelData != nil
}

func (p *ModelResponse) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *ModelResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ModelResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *ModelResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *ModelResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ProjectId = v
}
  return nil
}

func (p *ModelResponse)  ReadField5(iprot thrift.TProtocol) error {
  p.TrainingDataFrame = &DataFrame{
  ID: -1,
}
  if err := p.TrainingDataFrame.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TrainingDataFrame), err)
  }
  return nil
}

func (p *ModelResponse)  ReadField6(iprot thrift.TProtocol) error {
  p.Specification = &TransformerSpec{
  ID: -1,
}
  if err := p.Specification.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Specification), err)
  }
  return nil
}

func (p *ModelResponse)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := ProblemType(v)
  p.ProblemType = temp
}
  return nil
}

func (p *ModelResponse)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.FeatureColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem31 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem31 = v
}
    p.FeatureColumns = append(p.FeatureColumns, _elem31)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelResponse)  ReadField9(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.LabelColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem32 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem32 = v
}
    p.LabelColumns = append(p.LabelColumns, _elem32)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelResponse)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PredictionColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem33 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem33 = v
}
    p.PredictionColumns = append(p.PredictionColumns, _elem33)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelResponse)  ReadField11(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]map[int32]float64, size)
  p.Metrics =  tMap
  for i := 0; i < size; i ++ {
var _key34 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key34 = v
}
    _, _, size, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.PrependError("error reading map begin: ", err)
    }
    tMap := make(map[int32]float64, size)
    _val35 :=  tMap
    for i := 0; i < size; i ++ {
var _key36 int32
      if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _key36 = v
}
var _val37 float64
      if v, err := iprot.ReadDouble(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _val37 = v
}
      _val35[_key36] = _val37
    }
    if err := iprot.ReadMapEnd(); err != nil {
      return thrift.PrependError("error reading map end: ", err)
    }
    p.Metrics[_key34] = _val35
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ModelResponse)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Annotations =  tSlice
  for i := 0; i < size; i ++ {
var _elem38 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem38 = v
}
    p.Annotations = append(p.Annotations, _elem38)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelResponse)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Sha = v
}
  return nil
}

func (p *ModelResponse)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Filepath = v
}
  return nil
}

func (p *ModelResponse)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *ModelResponse)  ReadField16(iprot thrift.TProtocol) error {
  p.LinearModelData = &LinearModel{}
  if err := p.LinearModelData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LinearModelData), err)
  }
  return nil
}

func (p *ModelResponse)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Metadata = &v
}
  return nil
}

func (p *ModelResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ModelResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ModelResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:experimentRunId: ", p), err) }
  return err
}

func (p *ModelResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:experimentId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:experimentId: ", p), err) }
  return err
}

func (p *ModelResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:projectId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:projectId: ", p), err) }
  return err
}

func (p *ModelResponse) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainingDataFrame", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trainingDataFrame: ", p), err) }
  if err := p.TrainingDataFrame.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TrainingDataFrame), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trainingDataFrame: ", p), err) }
  return err
}

func (p *ModelResponse) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("specification", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:specification: ", p), err) }
  if err := p.Specification.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Specification), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:specification: ", p), err) }
  return err
}

func (p *ModelResponse) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("problemType", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:problemType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProblemType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.problemType (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:problemType: ", p), err) }
  return err
}

func (p *ModelResponse) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureColumns", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:featureColumns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.FeatureColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FeatureColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:featureColumns: ", p), err) }
  return err
}

func (p *ModelResponse) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("labelColumns", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:labelColumns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.LabelColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LabelColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:labelColumns: ", p), err) }
  return err
}

func (p *ModelResponse) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("predictionColumns", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:predictionColumns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PredictionColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PredictionColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:predictionColumns: ", p), err) }
  return err
}

func (p *ModelResponse) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metrics", thrift.MAP, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:metrics: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.Metrics)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Metrics {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.DOUBLE, len(v)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range v {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteDouble(float64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:metrics: ", p), err) }
  return err
}

func (p *ModelResponse) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("annotations", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:annotations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Annotations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Annotations {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:annotations: ", p), err) }
  return err
}

func (p *ModelResponse) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sha", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:sha: ", p), err) }
  if err := oprot.WriteString(string(p.Sha)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sha (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:sha: ", p), err) }
  return err
}

func (p *ModelResponse) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("filepath", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:filepath: ", p), err) }
  if err := oprot.WriteString(string(p.Filepath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filepath (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:filepath: ", p), err) }
  return err
}

func (p *ModelResponse) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:timestamp: ", p), err) }
  if err := oprot.WriteString(string(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:timestamp: ", p), err) }
  return err
}

func (p *ModelResponse) writeField16(oprot thrift.TProtocol) (err error) {
  if p.IsSetLinearModelData() {
    if err := oprot.WriteFieldBegin("linearModelData", thrift.STRUCT, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:linearModelData: ", p), err) }
    if err := p.LinearModelData.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LinearModelData), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:linearModelData: ", p), err) }
  }
  return err
}

func (p *ModelResponse) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetMetadata() {
    if err := oprot.WriteFieldBegin("metadata", thrift.STRING, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:metadata: ", p), err) }
    if err := oprot.WriteString(string(*p.Metadata)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.metadata (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:metadata: ", p), err) }
  }
  return err
}

func (p *ModelResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelResponse(%+v)", *p)
}

// Attributes:
//  - Project
//  - Experiment
//  - ExperimentRun
//  - ModelResponses
type ExperimentRunDetailsResponse struct {
  Project *Project `thrift:"project,1" db:"project" json:"project"`
  Experiment *Experiment `thrift:"experiment,2" db:"experiment" json:"experiment"`
  ExperimentRun *ExperimentRun `thrift:"experimentRun,3" db:"experimentRun" json:"experimentRun"`
  ModelResponses []*ModelResponse `thrift:"modelResponses,4" db:"modelResponses" json:"modelResponses"`
}

func NewExperimentRunDetailsResponse() *ExperimentRunDetailsResponse {
  return &ExperimentRunDetailsResponse{}
}

var ExperimentRunDetailsResponse_Project_DEFAULT *Project
func (p *ExperimentRunDetailsResponse) GetProject() *Project {
  if !p.IsSetProject() {
    return ExperimentRunDetailsResponse_Project_DEFAULT
  }
return p.Project
}
var ExperimentRunDetailsResponse_Experiment_DEFAULT *Experiment
func (p *ExperimentRunDetailsResponse) GetExperiment() *Experiment {
  if !p.IsSetExperiment() {
    return ExperimentRunDetailsResponse_Experiment_DEFAULT
  }
return p.Experiment
}
var ExperimentRunDetailsResponse_ExperimentRun_DEFAULT *ExperimentRun
func (p *ExperimentRunDetailsResponse) GetExperimentRun() *ExperimentRun {
  if !p.IsSetExperimentRun() {
    return ExperimentRunDetailsResponse_ExperimentRun_DEFAULT
  }
return p.ExperimentRun
}

func (p *ExperimentRunDetailsResponse) GetModelResponses() []*ModelResponse {
  return p.ModelResponses
}
func (p *ExperimentRunDetailsResponse) IsSetProject() bool {
  return p.Project != nil
}

func (p *ExperimentRunDetailsResponse) IsSetExperiment() bool {
  return p.Experiment != nil
}

func (p *ExperimentRunDetailsResponse) IsSetExperimentRun() bool {
  return p.ExperimentRun != nil
}

func (p *ExperimentRunDetailsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExperimentRunDetailsResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Project = &Project{
  ID: -1,
}
  if err := p.Project.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Project), err)
  }
  return nil
}

func (p *ExperimentRunDetailsResponse)  ReadField2(iprot thrift.TProtocol) error {
  p.Experiment = &Experiment{
  ID: -1,
}
  if err := p.Experiment.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Experiment), err)
  }
  return nil
}

func (p *ExperimentRunDetailsResponse)  ReadField3(iprot thrift.TProtocol) error {
  p.ExperimentRun = &ExperimentRun{
  ID: -1,
}
  if err := p.ExperimentRun.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExperimentRun), err)
  }
  return nil
}

func (p *ExperimentRunDetailsResponse)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ModelResponse, 0, size)
  p.ModelResponses =  tSlice
  for i := 0; i < size; i ++ {
    _elem39 := &ModelResponse{}
    if err := _elem39.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem39), err)
    }
    p.ModelResponses = append(p.ModelResponses, _elem39)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExperimentRunDetailsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExperimentRunDetailsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentRunDetailsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("project", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:project: ", p), err) }
  if err := p.Project.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Project), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:project: ", p), err) }
  return err
}

func (p *ExperimentRunDetailsResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experiment", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:experiment: ", p), err) }
  if err := p.Experiment.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Experiment), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:experiment: ", p), err) }
  return err
}

func (p *ExperimentRunDetailsResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRun", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:experimentRun: ", p), err) }
  if err := p.ExperimentRun.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExperimentRun), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:experimentRun: ", p), err) }
  return err
}

func (p *ExperimentRunDetailsResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelResponses", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:modelResponses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ModelResponses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ModelResponses {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:modelResponses: ", p), err) }
  return err
}

func (p *ExperimentRunDetailsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExperimentRunDetailsResponse(%+v)", *p)
}

// Attributes:
//  - Model
//  - ValidationDf
//  - TrainingDf
//  - Score
type CrossValidationFold struct {
  Model *Transformer `thrift:"model,1" db:"model" json:"model"`
  ValidationDf *DataFrame `thrift:"validationDf,2" db:"validationDf" json:"validationDf"`
  TrainingDf *DataFrame `thrift:"trainingDf,3" db:"trainingDf" json:"trainingDf"`
  Score float64 `thrift:"score,4" db:"score" json:"score"`
}

func NewCrossValidationFold() *CrossValidationFold {
  return &CrossValidationFold{}
}

var CrossValidationFold_Model_DEFAULT *Transformer
func (p *CrossValidationFold) GetModel() *Transformer {
  if !p.IsSetModel() {
    return CrossValidationFold_Model_DEFAULT
  }
return p.Model
}
var CrossValidationFold_ValidationDf_DEFAULT *DataFrame
func (p *CrossValidationFold) GetValidationDf() *DataFrame {
  if !p.IsSetValidationDf() {
    return CrossValidationFold_ValidationDf_DEFAULT
  }
return p.ValidationDf
}
var CrossValidationFold_TrainingDf_DEFAULT *DataFrame
func (p *CrossValidationFold) GetTrainingDf() *DataFrame {
  if !p.IsSetTrainingDf() {
    return CrossValidationFold_TrainingDf_DEFAULT
  }
return p.TrainingDf
}

func (p *CrossValidationFold) GetScore() float64 {
  return p.Score
}
func (p *CrossValidationFold) IsSetModel() bool {
  return p.Model != nil
}

func (p *CrossValidationFold) IsSetValidationDf() bool {
  return p.ValidationDf != nil
}

func (p *CrossValidationFold) IsSetTrainingDf() bool {
  return p.TrainingDf != nil
}

func (p *CrossValidationFold) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CrossValidationFold)  ReadField1(iprot thrift.TProtocol) error {
  p.Model = &Transformer{
  ID: -1,
}
  if err := p.Model.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Model), err)
  }
  return nil
}

func (p *CrossValidationFold)  ReadField2(iprot thrift.TProtocol) error {
  p.ValidationDf = &DataFrame{
  ID: -1,
}
  if err := p.ValidationDf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ValidationDf), err)
  }
  return nil
}

func (p *CrossValidationFold)  ReadField3(iprot thrift.TProtocol) error {
  p.TrainingDf = &DataFrame{
  ID: -1,
}
  if err := p.TrainingDf.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TrainingDf), err)
  }
  return nil
}

func (p *CrossValidationFold)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Score = v
}
  return nil
}

func (p *CrossValidationFold) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CrossValidationFold"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CrossValidationFold) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:model: ", p), err) }
  if err := p.Model.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Model), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:model: ", p), err) }
  return err
}

func (p *CrossValidationFold) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validationDf", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:validationDf: ", p), err) }
  if err := p.ValidationDf.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ValidationDf), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:validationDf: ", p), err) }
  return err
}

func (p *CrossValidationFold) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainingDf", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:trainingDf: ", p), err) }
  if err := p.TrainingDf.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TrainingDf), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:trainingDf: ", p), err) }
  return err
}

func (p *CrossValidationFold) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("score", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:score: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Score)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.score (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:score: ", p), err) }
  return err
}

func (p *CrossValidationFold) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CrossValidationFold(%+v)", *p)
}

// Attributes:
//  - ModelId
//  - ValidationId
//  - TrainingId
type CrossValidationFoldResponse struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
  ValidationId int32 `thrift:"validationId,2" db:"validationId" json:"validationId"`
  TrainingId int32 `thrift:"trainingId,3" db:"trainingId" json:"trainingId"`
}

func NewCrossValidationFoldResponse() *CrossValidationFoldResponse {
  return &CrossValidationFoldResponse{}
}


func (p *CrossValidationFoldResponse) GetModelId() int32 {
  return p.ModelId
}

func (p *CrossValidationFoldResponse) GetValidationId() int32 {
  return p.ValidationId
}

func (p *CrossValidationFoldResponse) GetTrainingId() int32 {
  return p.TrainingId
}
func (p *CrossValidationFoldResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CrossValidationFoldResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *CrossValidationFoldResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ValidationId = v
}
  return nil
}

func (p *CrossValidationFoldResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TrainingId = v
}
  return nil
}

func (p *CrossValidationFoldResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CrossValidationFoldResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CrossValidationFoldResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *CrossValidationFoldResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("validationId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:validationId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ValidationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.validationId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:validationId: ", p), err) }
  return err
}

func (p *CrossValidationFoldResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trainingId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:trainingId: ", p), err) }
  if err := oprot.WriteI32(int32(p.TrainingId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trainingId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:trainingId: ", p), err) }
  return err
}

func (p *CrossValidationFoldResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CrossValidationFoldResponse(%+v)", *p)
}

// Attributes:
//  - Df
//  - Spec
//  - Seed
//  - Evaluator
//  - LabelColumns
//  - PredictionColumns
//  - FeatureColumns
//  - Folds
//  - ExperimentRunId
//  - ProblemType
type CrossValidationEvent struct {
  Df *DataFrame `thrift:"df,1" db:"df" json:"df"`
  Spec *TransformerSpec `thrift:"spec,2" db:"spec" json:"spec"`
  Seed int64 `thrift:"seed,3" db:"seed" json:"seed"`
  Evaluator string `thrift:"evaluator,4" db:"evaluator" json:"evaluator"`
  LabelColumns []string `thrift:"labelColumns,5" db:"labelColumns" json:"labelColumns"`
  PredictionColumns []string `thrift:"predictionColumns,6" db:"predictionColumns" json:"predictionColumns"`
  FeatureColumns []string `thrift:"featureColumns,7" db:"featureColumns" json:"featureColumns"`
  Folds []*CrossValidationFold `thrift:"folds,8" db:"folds" json:"folds"`
  ExperimentRunId int32 `thrift:"experimentRunId,9" db:"experimentRunId" json:"experimentRunId"`
  ProblemType ProblemType `thrift:"problemType,10" db:"problemType" json:"problemType,omitempty"`
}

func NewCrossValidationEvent() *CrossValidationEvent {
  return &CrossValidationEvent{
ProblemType: 0,
}
}

var CrossValidationEvent_Df_DEFAULT *DataFrame
func (p *CrossValidationEvent) GetDf() *DataFrame {
  if !p.IsSetDf() {
    return CrossValidationEvent_Df_DEFAULT
  }
return p.Df
}
var CrossValidationEvent_Spec_DEFAULT *TransformerSpec
func (p *CrossValidationEvent) GetSpec() *TransformerSpec {
  if !p.IsSetSpec() {
    return CrossValidationEvent_Spec_DEFAULT
  }
return p.Spec
}

func (p *CrossValidationEvent) GetSeed() int64 {
  return p.Seed
}

func (p *CrossValidationEvent) GetEvaluator() string {
  return p.Evaluator
}

func (p *CrossValidationEvent) GetLabelColumns() []string {
  return p.LabelColumns
}

func (p *CrossValidationEvent) GetPredictionColumns() []string {
  return p.PredictionColumns
}

func (p *CrossValidationEvent) GetFeatureColumns() []string {
  return p.FeatureColumns
}

func (p *CrossValidationEvent) GetFolds() []*CrossValidationFold {
  return p.Folds
}

func (p *CrossValidationEvent) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}
var CrossValidationEvent_ProblemType_DEFAULT ProblemType = 0

func (p *CrossValidationEvent) GetProblemType() ProblemType {
  return p.ProblemType
}
func (p *CrossValidationEvent) IsSetDf() bool {
  return p.Df != nil
}

func (p *CrossValidationEvent) IsSetSpec() bool {
  return p.Spec != nil
}

func (p *CrossValidationEvent) IsSetProblemType() bool {
  return p.ProblemType != CrossValidationEvent_ProblemType_DEFAULT
}

func (p *CrossValidationEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CrossValidationEvent)  ReadField1(iprot thrift.TProtocol) error {
  p.Df = &DataFrame{
  ID: -1,
}
  if err := p.Df.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Df), err)
  }
  return nil
}

func (p *CrossValidationEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.Spec = &TransformerSpec{
  ID: -1,
}
  if err := p.Spec.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Spec), err)
  }
  return nil
}

func (p *CrossValidationEvent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Seed = v
}
  return nil
}

func (p *CrossValidationEvent)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Evaluator = v
}
  return nil
}

func (p *CrossValidationEvent)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.LabelColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem40 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem40 = v
}
    p.LabelColumns = append(p.LabelColumns, _elem40)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CrossValidationEvent)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PredictionColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem41 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem41 = v
}
    p.PredictionColumns = append(p.PredictionColumns, _elem41)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CrossValidationEvent)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.FeatureColumns =  tSlice
  for i := 0; i < size; i ++ {
var _elem42 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem42 = v
}
    p.FeatureColumns = append(p.FeatureColumns, _elem42)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CrossValidationEvent)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CrossValidationFold, 0, size)
  p.Folds =  tSlice
  for i := 0; i < size; i ++ {
    _elem43 := &CrossValidationFold{}
    if err := _elem43.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem43), err)
    }
    p.Folds = append(p.Folds, _elem43)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CrossValidationEvent)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *CrossValidationEvent)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := ProblemType(v)
  p.ProblemType = temp
}
  return nil
}

func (p *CrossValidationEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CrossValidationEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CrossValidationEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("df", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:df: ", p), err) }
  if err := p.Df.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Df), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:df: ", p), err) }
  return err
}

func (p *CrossValidationEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spec", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:spec: ", p), err) }
  if err := p.Spec.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Spec), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:spec: ", p), err) }
  return err
}

func (p *CrossValidationEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seed", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:seed: ", p), err) }
  if err := oprot.WriteI64(int64(p.Seed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seed (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:seed: ", p), err) }
  return err
}

func (p *CrossValidationEvent) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("evaluator", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:evaluator: ", p), err) }
  if err := oprot.WriteString(string(p.Evaluator)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.evaluator (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:evaluator: ", p), err) }
  return err
}

func (p *CrossValidationEvent) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("labelColumns", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:labelColumns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.LabelColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LabelColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:labelColumns: ", p), err) }
  return err
}

func (p *CrossValidationEvent) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("predictionColumns", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:predictionColumns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PredictionColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PredictionColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:predictionColumns: ", p), err) }
  return err
}

func (p *CrossValidationEvent) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureColumns", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:featureColumns: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.FeatureColumns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FeatureColumns {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:featureColumns: ", p), err) }
  return err
}

func (p *CrossValidationEvent) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("folds", thrift.LIST, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:folds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Folds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Folds {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:folds: ", p), err) }
  return err
}

func (p *CrossValidationEvent) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:experimentRunId: ", p), err) }
  return err
}

func (p *CrossValidationEvent) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetProblemType() {
    if err := oprot.WriteFieldBegin("problemType", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:problemType: ", p), err) }
    if err := oprot.WriteI32(int32(p.ProblemType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.problemType (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:problemType: ", p), err) }
  }
  return err
}

func (p *CrossValidationEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CrossValidationEvent(%+v)", *p)
}

// Attributes:
//  - DfId
//  - SpecId
//  - EventId
//  - FoldResponses
//  - CrossValidationEventId
type CrossValidationEventResponse struct {
  DfId int32 `thrift:"dfId,1" db:"dfId" json:"dfId"`
  SpecId int32 `thrift:"specId,2" db:"specId" json:"specId"`
  EventId int32 `thrift:"eventId,3" db:"eventId" json:"eventId"`
  FoldResponses []*CrossValidationFoldResponse `thrift:"foldResponses,4" db:"foldResponses" json:"foldResponses"`
  CrossValidationEventId int32 `thrift:"crossValidationEventId,5" db:"crossValidationEventId" json:"crossValidationEventId"`
}

func NewCrossValidationEventResponse() *CrossValidationEventResponse {
  return &CrossValidationEventResponse{}
}


func (p *CrossValidationEventResponse) GetDfId() int32 {
  return p.DfId
}

func (p *CrossValidationEventResponse) GetSpecId() int32 {
  return p.SpecId
}

func (p *CrossValidationEventResponse) GetEventId() int32 {
  return p.EventId
}

func (p *CrossValidationEventResponse) GetFoldResponses() []*CrossValidationFoldResponse {
  return p.FoldResponses
}

func (p *CrossValidationEventResponse) GetCrossValidationEventId() int32 {
  return p.CrossValidationEventId
}
func (p *CrossValidationEventResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CrossValidationEventResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DfId = v
}
  return nil
}

func (p *CrossValidationEventResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SpecId = v
}
  return nil
}

func (p *CrossValidationEventResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EventId = v
}
  return nil
}

func (p *CrossValidationEventResponse)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CrossValidationFoldResponse, 0, size)
  p.FoldResponses =  tSlice
  for i := 0; i < size; i ++ {
    _elem44 := &CrossValidationFoldResponse{}
    if err := _elem44.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem44), err)
    }
    p.FoldResponses = append(p.FoldResponses, _elem44)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *CrossValidationEventResponse)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CrossValidationEventId = v
}
  return nil
}

func (p *CrossValidationEventResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CrossValidationEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CrossValidationEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dfId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dfId: ", p), err) }
  if err := oprot.WriteI32(int32(p.DfId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dfId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dfId: ", p), err) }
  return err
}

func (p *CrossValidationEventResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("specId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:specId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpecId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.specId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:specId: ", p), err) }
  return err
}

func (p *CrossValidationEventResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eventId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:eventId: ", p), err) }
  if err := oprot.WriteI32(int32(p.EventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:eventId: ", p), err) }
  return err
}

func (p *CrossValidationEventResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("foldResponses", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:foldResponses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FoldResponses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FoldResponses {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:foldResponses: ", p), err) }
  return err
}

func (p *CrossValidationEventResponse) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("crossValidationEventId", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:crossValidationEventId: ", p), err) }
  if err := oprot.WriteI32(int32(p.CrossValidationEventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.crossValidationEventId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:crossValidationEventId: ", p), err) }
  return err
}

func (p *CrossValidationEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CrossValidationEventResponse(%+v)", *p)
}

// Attributes:
//  - NumFolds
//  - BestFit
//  - CrossValidations
//  - ExperimentRunId
//  - ProblemType
type GridSearchCrossValidationEvent struct {
  NumFolds int32 `thrift:"numFolds,1" db:"numFolds" json:"numFolds"`
  BestFit *FitEvent `thrift:"bestFit,2" db:"bestFit" json:"bestFit"`
  CrossValidations []*CrossValidationEvent `thrift:"crossValidations,3" db:"crossValidations" json:"crossValidations"`
  ExperimentRunId int32 `thrift:"experimentRunId,4" db:"experimentRunId" json:"experimentRunId"`
  ProblemType ProblemType `thrift:"problemType,5" db:"problemType" json:"problemType,omitempty"`
}

func NewGridSearchCrossValidationEvent() *GridSearchCrossValidationEvent {
  return &GridSearchCrossValidationEvent{
ProblemType: 0,
}
}


func (p *GridSearchCrossValidationEvent) GetNumFolds() int32 {
  return p.NumFolds
}
var GridSearchCrossValidationEvent_BestFit_DEFAULT *FitEvent
func (p *GridSearchCrossValidationEvent) GetBestFit() *FitEvent {
  if !p.IsSetBestFit() {
    return GridSearchCrossValidationEvent_BestFit_DEFAULT
  }
return p.BestFit
}

func (p *GridSearchCrossValidationEvent) GetCrossValidations() []*CrossValidationEvent {
  return p.CrossValidations
}

func (p *GridSearchCrossValidationEvent) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}
var GridSearchCrossValidationEvent_ProblemType_DEFAULT ProblemType = 0

func (p *GridSearchCrossValidationEvent) GetProblemType() ProblemType {
  return p.ProblemType
}
func (p *GridSearchCrossValidationEvent) IsSetBestFit() bool {
  return p.BestFit != nil
}

func (p *GridSearchCrossValidationEvent) IsSetProblemType() bool {
  return p.ProblemType != GridSearchCrossValidationEvent_ProblemType_DEFAULT
}

func (p *GridSearchCrossValidationEvent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GridSearchCrossValidationEvent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumFolds = v
}
  return nil
}

func (p *GridSearchCrossValidationEvent)  ReadField2(iprot thrift.TProtocol) error {
  p.BestFit = &FitEvent{
  ProblemType:   0,
}
  if err := p.BestFit.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BestFit), err)
  }
  return nil
}

func (p *GridSearchCrossValidationEvent)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CrossValidationEvent, 0, size)
  p.CrossValidations =  tSlice
  for i := 0; i < size; i ++ {
    _elem45 := &CrossValidationEvent{
    ProblemType:     0,
}
    if err := _elem45.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem45), err)
    }
    p.CrossValidations = append(p.CrossValidations, _elem45)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GridSearchCrossValidationEvent)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *GridSearchCrossValidationEvent)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := ProblemType(v)
  p.ProblemType = temp
}
  return nil
}

func (p *GridSearchCrossValidationEvent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GridSearchCrossValidationEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GridSearchCrossValidationEvent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numFolds", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:numFolds: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumFolds)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numFolds (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:numFolds: ", p), err) }
  return err
}

func (p *GridSearchCrossValidationEvent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bestFit", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:bestFit: ", p), err) }
  if err := p.BestFit.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BestFit), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:bestFit: ", p), err) }
  return err
}

func (p *GridSearchCrossValidationEvent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("crossValidations", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:crossValidations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CrossValidations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CrossValidations {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:crossValidations: ", p), err) }
  return err
}

func (p *GridSearchCrossValidationEvent) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:experimentRunId: ", p), err) }
  return err
}

func (p *GridSearchCrossValidationEvent) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetProblemType() {
    if err := oprot.WriteFieldBegin("problemType", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:problemType: ", p), err) }
    if err := oprot.WriteI32(int32(p.ProblemType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.problemType (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:problemType: ", p), err) }
  }
  return err
}

func (p *GridSearchCrossValidationEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GridSearchCrossValidationEvent(%+v)", *p)
}

// Attributes:
//  - GscveId
//  - EventId
//  - FitEventResponse
//  - CrossValidationEventResponses
type GridSearchCrossValidationEventResponse struct {
  GscveId int32 `thrift:"gscveId,1" db:"gscveId" json:"gscveId"`
  EventId int32 `thrift:"eventId,2" db:"eventId" json:"eventId"`
  FitEventResponse *FitEventResponse `thrift:"fitEventResponse,3" db:"fitEventResponse" json:"fitEventResponse"`
  CrossValidationEventResponses []*CrossValidationEventResponse `thrift:"crossValidationEventResponses,4" db:"crossValidationEventResponses" json:"crossValidationEventResponses"`
}

func NewGridSearchCrossValidationEventResponse() *GridSearchCrossValidationEventResponse {
  return &GridSearchCrossValidationEventResponse{}
}


func (p *GridSearchCrossValidationEventResponse) GetGscveId() int32 {
  return p.GscveId
}

func (p *GridSearchCrossValidationEventResponse) GetEventId() int32 {
  return p.EventId
}
var GridSearchCrossValidationEventResponse_FitEventResponse_DEFAULT *FitEventResponse
func (p *GridSearchCrossValidationEventResponse) GetFitEventResponse() *FitEventResponse {
  if !p.IsSetFitEventResponse() {
    return GridSearchCrossValidationEventResponse_FitEventResponse_DEFAULT
  }
return p.FitEventResponse
}

func (p *GridSearchCrossValidationEventResponse) GetCrossValidationEventResponses() []*CrossValidationEventResponse {
  return p.CrossValidationEventResponses
}
func (p *GridSearchCrossValidationEventResponse) IsSetFitEventResponse() bool {
  return p.FitEventResponse != nil
}

func (p *GridSearchCrossValidationEventResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GridSearchCrossValidationEventResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GscveId = v
}
  return nil
}

func (p *GridSearchCrossValidationEventResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EventId = v
}
  return nil
}

func (p *GridSearchCrossValidationEventResponse)  ReadField3(iprot thrift.TProtocol) error {
  p.FitEventResponse = &FitEventResponse{}
  if err := p.FitEventResponse.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FitEventResponse), err)
  }
  return nil
}

func (p *GridSearchCrossValidationEventResponse)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*CrossValidationEventResponse, 0, size)
  p.CrossValidationEventResponses =  tSlice
  for i := 0; i < size; i ++ {
    _elem46 := &CrossValidationEventResponse{}
    if err := _elem46.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem46), err)
    }
    p.CrossValidationEventResponses = append(p.CrossValidationEventResponses, _elem46)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GridSearchCrossValidationEventResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GridSearchCrossValidationEventResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GridSearchCrossValidationEventResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gscveId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gscveId: ", p), err) }
  if err := oprot.WriteI32(int32(p.GscveId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gscveId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gscveId: ", p), err) }
  return err
}

func (p *GridSearchCrossValidationEventResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eventId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eventId: ", p), err) }
  if err := oprot.WriteI32(int32(p.EventId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eventId: ", p), err) }
  return err
}

func (p *GridSearchCrossValidationEventResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fitEventResponse", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fitEventResponse: ", p), err) }
  if err := p.FitEventResponse.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FitEventResponse), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fitEventResponse: ", p), err) }
  return err
}

func (p *GridSearchCrossValidationEventResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("crossValidationEventResponses", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:crossValidationEventResponses: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CrossValidationEventResponses)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CrossValidationEventResponses {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:crossValidationEventResponses: ", p), err) }
  return err
}

func (p *GridSearchCrossValidationEventResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GridSearchCrossValidationEventResponse(%+v)", *p)
}

// Attributes:
//  - Prediction
//  - Impurity
//  - Gain
//  - SplitIndex
type TreeNode struct {
  Prediction float64 `thrift:"prediction,1" db:"prediction" json:"prediction"`
  Impurity float64 `thrift:"impurity,2" db:"impurity" json:"impurity"`
  Gain *float64 `thrift:"gain,3" db:"gain" json:"gain,omitempty"`
  SplitIndex *int32 `thrift:"splitIndex,4" db:"splitIndex" json:"splitIndex,omitempty"`
}

func NewTreeNode() *TreeNode {
  return &TreeNode{}
}


func (p *TreeNode) GetPrediction() float64 {
  return p.Prediction
}

func (p *TreeNode) GetImpurity() float64 {
  return p.Impurity
}
var TreeNode_Gain_DEFAULT float64
func (p *TreeNode) GetGain() float64 {
  if !p.IsSetGain() {
    return TreeNode_Gain_DEFAULT
  }
return *p.Gain
}
var TreeNode_SplitIndex_DEFAULT int32
func (p *TreeNode) GetSplitIndex() int32 {
  if !p.IsSetSplitIndex() {
    return TreeNode_SplitIndex_DEFAULT
  }
return *p.SplitIndex
}
func (p *TreeNode) IsSetGain() bool {
  return p.Gain != nil
}

func (p *TreeNode) IsSetSplitIndex() bool {
  return p.SplitIndex != nil
}

func (p *TreeNode) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TreeNode)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Prediction = v
}
  return nil
}

func (p *TreeNode)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Impurity = v
}
  return nil
}

func (p *TreeNode)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Gain = &v
}
  return nil
}

func (p *TreeNode)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SplitIndex = &v
}
  return nil
}

func (p *TreeNode) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TreeNode"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TreeNode) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prediction", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prediction: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Prediction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prediction (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prediction: ", p), err) }
  return err
}

func (p *TreeNode) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("impurity", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:impurity: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Impurity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.impurity (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:impurity: ", p), err) }
  return err
}

func (p *TreeNode) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetGain() {
    if err := oprot.WriteFieldBegin("gain", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gain: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.Gain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gain (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gain: ", p), err) }
  }
  return err
}

func (p *TreeNode) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetSplitIndex() {
    if err := oprot.WriteFieldBegin("splitIndex", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:splitIndex: ", p), err) }
    if err := oprot.WriteI32(int32(*p.SplitIndex)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.splitIndex (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:splitIndex: ", p), err) }
  }
  return err
}

func (p *TreeNode) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TreeNode(%+v)", *p)
}

// Attributes:
//  - ParentIndex
//  - ChildIndex
//  - IsLeft
type TreeLink struct {
  ParentIndex int32 `thrift:"parentIndex,1" db:"parentIndex" json:"parentIndex"`
  ChildIndex int32 `thrift:"childIndex,2" db:"childIndex" json:"childIndex"`
  IsLeft bool `thrift:"isLeft,3" db:"isLeft" json:"isLeft"`
}

func NewTreeLink() *TreeLink {
  return &TreeLink{}
}


func (p *TreeLink) GetParentIndex() int32 {
  return p.ParentIndex
}

func (p *TreeLink) GetChildIndex() int32 {
  return p.ChildIndex
}

func (p *TreeLink) GetIsLeft() bool {
  return p.IsLeft
}
func (p *TreeLink) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TreeLink)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ParentIndex = v
}
  return nil
}

func (p *TreeLink)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChildIndex = v
}
  return nil
}

func (p *TreeLink)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IsLeft = v
}
  return nil
}

func (p *TreeLink) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TreeLink"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TreeLink) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parentIndex", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:parentIndex: ", p), err) }
  if err := oprot.WriteI32(int32(p.ParentIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parentIndex (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:parentIndex: ", p), err) }
  return err
}

func (p *TreeLink) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("childIndex", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:childIndex: ", p), err) }
  if err := oprot.WriteI32(int32(p.ChildIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.childIndex (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:childIndex: ", p), err) }
  return err
}

func (p *TreeLink) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isLeft", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isLeft: ", p), err) }
  if err := oprot.WriteBool(bool(p.IsLeft)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isLeft (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isLeft: ", p), err) }
  return err
}

func (p *TreeLink) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TreeLink(%+v)", *p)
}

// Attributes:
//  - Weight
//  - Nodes
//  - Links
type TreeComponent struct {
  Weight float64 `thrift:"weight,1" db:"weight" json:"weight"`
  Nodes []*TreeNode `thrift:"nodes,2" db:"nodes" json:"nodes"`
  Links []*TreeLink `thrift:"links,3" db:"links" json:"links"`
}

func NewTreeComponent() *TreeComponent {
  return &TreeComponent{}
}


func (p *TreeComponent) GetWeight() float64 {
  return p.Weight
}

func (p *TreeComponent) GetNodes() []*TreeNode {
  return p.Nodes
}

func (p *TreeComponent) GetLinks() []*TreeLink {
  return p.Links
}
func (p *TreeComponent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TreeComponent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Weight = v
}
  return nil
}

func (p *TreeComponent)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TreeNode, 0, size)
  p.Nodes =  tSlice
  for i := 0; i < size; i ++ {
    _elem47 := &TreeNode{}
    if err := _elem47.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem47), err)
    }
    p.Nodes = append(p.Nodes, _elem47)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TreeComponent)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TreeLink, 0, size)
  p.Links =  tSlice
  for i := 0; i < size; i ++ {
    _elem48 := &TreeLink{}
    if err := _elem48.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem48), err)
    }
    p.Links = append(p.Links, _elem48)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TreeComponent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TreeComponent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TreeComponent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("weight", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:weight: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Weight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.weight (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:weight: ", p), err) }
  return err
}

func (p *TreeComponent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nodes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nodes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Nodes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nodes: ", p), err) }
  return err
}

func (p *TreeComponent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("links", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:links: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Links)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Links {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:links: ", p), err) }
  return err
}

func (p *TreeComponent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TreeComponent(%+v)", *p)
}

// Attributes:
//  - ModelType
//  - Components
//  - FeatureImportances
type TreeModel struct {
  ModelType string `thrift:"modelType,1" db:"modelType" json:"modelType"`
  Components []*TreeComponent `thrift:"components,2" db:"components" json:"components"`
  FeatureImportances []float64 `thrift:"featureImportances,3" db:"featureImportances" json:"featureImportances"`
}

func NewTreeModel() *TreeModel {
  return &TreeModel{}
}


func (p *TreeModel) GetModelType() string {
  return p.ModelType
}

func (p *TreeModel) GetComponents() []*TreeComponent {
  return p.Components
}

func (p *TreeModel) GetFeatureImportances() []float64 {
  return p.FeatureImportances
}
func (p *TreeModel) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TreeModel)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelType = v
}
  return nil
}

func (p *TreeModel)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TreeComponent, 0, size)
  p.Components =  tSlice
  for i := 0; i < size; i ++ {
    _elem49 := &TreeComponent{}
    if err := _elem49.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem49), err)
    }
    p.Components = append(p.Components, _elem49)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TreeModel)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.FeatureImportances =  tSlice
  for i := 0; i < size; i ++ {
var _elem50 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem50 = v
}
    p.FeatureImportances = append(p.FeatureImportances, _elem50)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TreeModel) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TreeModel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TreeModel) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelType", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelType: ", p), err) }
  if err := oprot.WriteString(string(p.ModelType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelType: ", p), err) }
  return err
}

func (p *TreeModel) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("components", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:components: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Components)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Components {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:components: ", p), err) }
  return err
}

func (p *TreeModel) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureImportances", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:featureImportances: ", p), err) }
  if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.FeatureImportances)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FeatureImportances {
    if err := oprot.WriteDouble(float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:featureImportances: ", p), err) }
  return err
}

func (p *TreeModel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TreeModel(%+v)", *p)
}

// Attributes:
//  - ModelId
//  - FitEvent
//  - TransformEvents
type ModelAncestryResponse struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
  FitEvent *FitEvent `thrift:"fitEvent,2" db:"fitEvent" json:"fitEvent"`
  TransformEvents []*TransformEvent `thrift:"transformEvents,3" db:"transformEvents" json:"transformEvents"`
}

func NewModelAncestryResponse() *ModelAncestryResponse {
  return &ModelAncestryResponse{}
}


func (p *ModelAncestryResponse) GetModelId() int32 {
  return p.ModelId
}
var ModelAncestryResponse_FitEvent_DEFAULT *FitEvent
func (p *ModelAncestryResponse) GetFitEvent() *FitEvent {
  if !p.IsSetFitEvent() {
    return ModelAncestryResponse_FitEvent_DEFAULT
  }
return p.FitEvent
}

func (p *ModelAncestryResponse) GetTransformEvents() []*TransformEvent {
  return p.TransformEvents
}
func (p *ModelAncestryResponse) IsSetFitEvent() bool {
  return p.FitEvent != nil
}

func (p *ModelAncestryResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelAncestryResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelAncestryResponse)  ReadField2(iprot thrift.TProtocol) error {
  p.FitEvent = &FitEvent{
  ProblemType:   0,
}
  if err := p.FitEvent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FitEvent), err)
  }
  return nil
}

func (p *ModelAncestryResponse)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TransformEvent, 0, size)
  p.TransformEvents =  tSlice
  for i := 0; i < size; i ++ {
    _elem51 := &TransformEvent{}
    if err := _elem51.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem51), err)
    }
    p.TransformEvents = append(p.TransformEvents, _elem51)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelAncestryResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ModelAncestryResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelAncestryResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelAncestryResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fitEvent", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fitEvent: ", p), err) }
  if err := p.FitEvent.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FitEvent), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fitEvent: ", p), err) }
  return err
}

func (p *ModelAncestryResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transformEvents", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:transformEvents: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TransformEvents)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TransformEvents {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:transformEvents: ", p), err) }
  return err
}

func (p *ModelAncestryResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelAncestryResponse(%+v)", *p)
}

// Attributes:
//  - Transformers
//  - Specs
type ExtractedPipelineResponse struct {
  Transformers []*Transformer `thrift:"transformers,1" db:"transformers" json:"transformers"`
  Specs []*TransformerSpec `thrift:"specs,2" db:"specs" json:"specs"`
}

func NewExtractedPipelineResponse() *ExtractedPipelineResponse {
  return &ExtractedPipelineResponse{}
}


func (p *ExtractedPipelineResponse) GetTransformers() []*Transformer {
  return p.Transformers
}

func (p *ExtractedPipelineResponse) GetSpecs() []*TransformerSpec {
  return p.Specs
}
func (p *ExtractedPipelineResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtractedPipelineResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Transformer, 0, size)
  p.Transformers =  tSlice
  for i := 0; i < size; i ++ {
    _elem52 := &Transformer{
    ID: -1,
}
    if err := _elem52.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem52), err)
    }
    p.Transformers = append(p.Transformers, _elem52)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExtractedPipelineResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TransformerSpec, 0, size)
  p.Specs =  tSlice
  for i := 0; i < size; i ++ {
    _elem53 := &TransformerSpec{
    ID: -1,
}
    if err := _elem53.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem53), err)
    }
    p.Specs = append(p.Specs, _elem53)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExtractedPipelineResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExtractedPipelineResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtractedPipelineResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transformers", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transformers: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Transformers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Transformers {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transformers: ", p), err) }
  return err
}

func (p *ExtractedPipelineResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("specs", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:specs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Specs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Specs {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:specs: ", p), err) }
  return err
}

func (p *ExtractedPipelineResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtractedPipelineResponse(%+v)", *p)
}

// Attributes:
//  - Message
type ResourceNotFoundException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewResourceNotFoundException() *ResourceNotFoundException {
  return &ResourceNotFoundException{}
}


func (p *ResourceNotFoundException) GetMessage() string {
  return p.Message
}
func (p *ResourceNotFoundException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResourceNotFoundException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ResourceNotFoundException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ResourceNotFoundException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResourceNotFoundException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *ResourceNotFoundException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResourceNotFoundException(%+v)", *p)
}

func (p *ResourceNotFoundException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type InvalidFieldException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewInvalidFieldException() *InvalidFieldException {
  return &InvalidFieldException{}
}


func (p *InvalidFieldException) GetMessage() string {
  return p.Message
}
func (p *InvalidFieldException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidFieldException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidFieldException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidFieldException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidFieldException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidFieldException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidFieldException(%+v)", *p)
}

func (p *InvalidFieldException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type BadRequestException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewBadRequestException() *BadRequestException {
  return &BadRequestException{}
}


func (p *BadRequestException) GetMessage() string {
  return p.Message
}
func (p *BadRequestException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BadRequestException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *BadRequestException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BadRequestException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BadRequestException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *BadRequestException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BadRequestException(%+v)", *p)
}

func (p *BadRequestException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type IllegalOperationException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewIllegalOperationException() *IllegalOperationException {
  return &IllegalOperationException{}
}


func (p *IllegalOperationException) GetMessage() string {
  return p.Message
}
func (p *IllegalOperationException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IllegalOperationException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *IllegalOperationException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IllegalOperationException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IllegalOperationException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *IllegalOperationException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IllegalOperationException(%+v)", *p)
}

func (p *IllegalOperationException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type ServerLogicException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewServerLogicException() *ServerLogicException {
  return &ServerLogicException{}
}


func (p *ServerLogicException) GetMessage() string {
  return p.Message
}
func (p *ServerLogicException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServerLogicException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ServerLogicException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ServerLogicException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServerLogicException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *ServerLogicException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServerLogicException(%+v)", *p)
}

func (p *ServerLogicException) Error() string {
  return p.String()
}

// Attributes:
//  - Message
type InvalidExperimentRunException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewInvalidExperimentRunException() *InvalidExperimentRunException {
  return &InvalidExperimentRunException{}
}


func (p *InvalidExperimentRunException) GetMessage() string {
  return p.Message
}
func (p *InvalidExperimentRunException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InvalidExperimentRunException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InvalidExperimentRunException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InvalidExperimentRunException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InvalidExperimentRunException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *InvalidExperimentRunException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InvalidExperimentRunException(%+v)", *p)
}

func (p *InvalidExperimentRunException) Error() string {
  return p.String()
}

type ModelDBService interface {
  TestConnection(ctx context.Context) (r int32, err error)
  // Parameters:
  //  - Df
  //  - ExperimentRunId
  StoreDataFrame(ctx context.Context, df *DataFrame, experimentRunId int32) (r int32, err error)
  // Parameters:
  //  - TransformerId
  PathForTransformer(ctx context.Context, transformerId int32) (r string, err error)
  // Parameters:
  //  - Fe
  StoreFitEvent(ctx context.Context, fe *FitEvent) (r *FitEventResponse, err error)
  // Parameters:
  //  - Me
  StoreMetricEvent(ctx context.Context, me *MetricEvent) (r *MetricEventResponse, err error)
  // Parameters:
  //  - T
  //  - ExperimentRunId
  //  - Filename
  GetFilePath(ctx context.Context, t *Transformer, experimentRunId int32, filename string) (r string, err error)
  // Parameters:
  //  - Te
  StoreTransformEvent(ctx context.Context, te *TransformEvent) (r *TransformEventResponse, err error)
  // Parameters:
  //  - Rse
  StoreRandomSplitEvent(ctx context.Context, rse *RandomSplitEvent) (r *RandomSplitEventResponse, err error)
  // Parameters:
  //  - PipelineEvent
  StorePipelineEvent(ctx context.Context, pipelineEvent *PipelineEvent) (r *PipelineEventResponse, err error)
  // Parameters:
  //  - Cve
  StoreCrossValidationEvent(ctx context.Context, cve *CrossValidationEvent) (r *CrossValidationEventResponse, err error)
  // Parameters:
  //  - Gscve
  StoreGridSearchCrossValidationEvent(ctx context.Context, gscve *GridSearchCrossValidationEvent) (r *GridSearchCrossValidationEventResponse, err error)
  // Parameters:
  //  - Ae
  StoreAnnotationEvent(ctx context.Context, ae *AnnotationEvent) (r *AnnotationEventResponse, err error)
  // Parameters:
  //  - Pr
  StoreProjectEvent(ctx context.Context, pr *ProjectEvent) (r *ProjectEventResponse, err error)
  // Parameters:
  //  - Er
  StoreExperimentEvent(ctx context.Context, er *ExperimentEvent) (r *ExperimentEventResponse, err error)
  // Parameters:
  //  - Er
  StoreExperimentRunEvent(ctx context.Context, er *ExperimentRunEvent) (r *ExperimentRunEventResponse, err error)
  // Parameters:
  //  - ModelId
  //  - Model
  StoreLinearModel(ctx context.Context, modelId int32, model *LinearModel) (r bool, err error)
  // Parameters:
  //  - DataFrameId
  GetDataFrameAncestry(ctx context.Context, dataFrameId int32) (r *DataFrameAncestry, err error)
  // Parameters:
  //  - DfId1
  //  - DfId2
  GetCommonAncestor(ctx context.Context, dfId1 int32, dfId2 int32) (r *CommonAncestor, err error)
  // Parameters:
  //  - ModelId1
  //  - ModelId2
  GetCommonAncestorForModels(ctx context.Context, modelId1 int32, modelId2 int32) (r *CommonAncestor, err error)
  // Parameters:
  //  - ModelId
  GetTrainingRowsCount(ctx context.Context, modelId int32) (r int32, err error)
  // Parameters:
  //  - ModelIds
  GetTrainingRowsCounts(ctx context.Context, modelIds []int32) (r []int32, err error)
  // Parameters:
  //  - ModelId1
  //  - ModelId2
  CompareHyperparameters(ctx context.Context, modelId1 int32, modelId2 int32) (r *CompareHyperParametersResponse, err error)
  // Parameters:
  //  - ModelId1
  //  - ModelId2
  CompareFeatures(ctx context.Context, modelId1 int32, modelId2 int32) (r *CompareFeaturesResponse, err error)
  // Parameters:
  //  - ModelIds
  GroupByProblemType(ctx context.Context, modelIds []int32) (r map[ProblemType][]int32, err error)
  // Parameters:
  //  - ModelId
  //  - CompMetrics
  //  - NumModels
  SimilarModels(ctx context.Context, modelId int32, compMetrics []ModelCompMetric, numModels int32) (r []int32, err error)
  // Parameters:
  //  - ModelId
  LinearModelFeatureImportances(ctx context.Context, modelId int32) (r []string, err error)
  // Parameters:
  //  - Model1Id
  //  - Model2Id
  CompareLinearModelFeatureImportances(ctx context.Context, model1Id int32, model2Id int32) (r []*FeatureImportanceComparison, err error)
  // Parameters:
  //  - ModelIds
  //  - Tolerance
  IterationsUntilConvergence(ctx context.Context, modelIds []int32, tolerance float64) (r []int32, err error)
  // Parameters:
  //  - ModelIds
  //  - Metric
  RankModels(ctx context.Context, modelIds []int32, metric ModelRankMetric) (r []int32, err error)
  // Parameters:
  //  - ModelId
  //  - SigLevel
  ConfidenceIntervals(ctx context.Context, modelId int32, sigLevel float64) (r []*ConfidenceInterval, err error)
  // Parameters:
  //  - FeatureNames
  ModelsWithFeatures(ctx context.Context, featureNames []string) (r []int32, err error)
  // Parameters:
  //  - DfId
  ModelsDerivedFromDataFrame(ctx context.Context, dfId int32) (r []int32, err error)
  // Parameters:
  //  - KeyValuePairs
  GetProjectIds(ctx context.Context, keyValuePairs map[string]string) (r []int32, err error)
  // Parameters:
  //  - KeyValuePairs
  GetModelIds(ctx context.Context, keyValuePairs map[string]string) (r []int32, err error)
  // Parameters:
  //  - ProjectId
  //  - Key
  //  - Value
  UpdateProject(ctx context.Context, projectId int32, key string, value string) (r bool, err error)
  // Parameters:
  //  - ModelId
  //  - Key
  //  - Value
  //  - ValueType
  CreateOrUpdateScalarField(ctx context.Context, modelId int32, key string, value string, valueType string) (r bool, err error)
  // Parameters:
  //  - ModelId
  //  - VectorName
  //  - VectorConfig
  CreateVectorField(ctx context.Context, modelId int32, vectorName string, vectorConfig map[string]string) (r bool, err error)
  // Parameters:
  //  - ModelId
  //  - Key
  //  - ValueIndex
  //  - Value
  //  - ValueType
  UpdateVectorField(ctx context.Context, modelId int32, key string, valueIndex int32, value string, valueType string) (r bool, err error)
  // Parameters:
  //  - ModelId
  //  - VectorName
  //  - Value
  //  - ValueType
  AppendToVectorField(ctx context.Context, modelId int32, vectorName string, value string, valueType string) (r bool, err error)
  // Parameters:
  //  - ModelId
  GetModel(ctx context.Context, modelId int32) (r *ModelResponse, err error)
  // Parameters:
  //  - ExperimentId
  GetRunsInExperiment(ctx context.Context, experimentId int32) (r []*ExperimentRun, err error)
  // Parameters:
  //  - ProjId
  GetRunsAndExperimentsInProject(ctx context.Context, projId int32) (r *ProjectExperimentsAndRuns, err error)
  GetProjectOverviews(ctx context.Context) (r []*ProjectOverviewResponse, err error)
  // Parameters:
  //  - ExperimentRunId
  GetExperimentRunDetails(ctx context.Context, experimentRunId int32) (r *ExperimentRunDetailsResponse, err error)
  // Parameters:
  //  - ModelId
  OriginalFeatures(ctx context.Context, modelId int32) (r []string, err error)
  // Parameters:
  //  - ModelId
  //  - Model
  StoreTreeModel(ctx context.Context, modelId int32, model *TreeModel) (r bool, err error)
  // Parameters:
  //  - Te
  StorePipelineTransformEvent(ctx context.Context, te []*TransformEvent) (r []*TransformEventResponse, err error)
  // Parameters:
  //  - ModelId
  ComputeModelAncestry(ctx context.Context, modelId int32) (r *ModelAncestryResponse, err error)
  // Parameters:
  //  - ModelId
  ExtractPipeline(ctx context.Context, modelId int32) (r *ExtractedPipelineResponse, err error)
}

type ModelDBServiceClient struct {
  c thrift.TClient
}

func NewModelDBServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ModelDBServiceClient {
  return &ModelDBServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewModelDBServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ModelDBServiceClient {
  return &ModelDBServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewModelDBServiceClient(c thrift.TClient) *ModelDBServiceClient {
  return &ModelDBServiceClient{
    c: c,
  }
}

func (p *ModelDBServiceClient) Client_() thrift.TClient {
  return p.c
}
func (p *ModelDBServiceClient) TestConnection(ctx context.Context) (r int32, err error) {
  var _args54 ModelDBServiceTestConnectionArgs
  var _result55 ModelDBServiceTestConnectionResult
  if err = p.Client_().Call(ctx, "testConnection", &_args54, &_result55); err != nil {
    return
  }
  return _result55.GetSuccess(), nil
}

// Parameters:
//  - Df
//  - ExperimentRunId
func (p *ModelDBServiceClient) StoreDataFrame(ctx context.Context, df *DataFrame, experimentRunId int32) (r int32, err error) {
  var _args56 ModelDBServiceStoreDataFrameArgs
  _args56.Df = df
  _args56.ExperimentRunId = experimentRunId
  var _result57 ModelDBServiceStoreDataFrameResult
  if err = p.Client_().Call(ctx, "storeDataFrame", &_args56, &_result57); err != nil {
    return
  }
  switch {
  case _result57.IerEx!= nil:
    return r, _result57.IerEx
  case _result57.SvEx!= nil:
    return r, _result57.SvEx
  }

  return _result57.GetSuccess(), nil
}

// Parameters:
//  - TransformerId
func (p *ModelDBServiceClient) PathForTransformer(ctx context.Context, transformerId int32) (r string, err error) {
  var _args58 ModelDBServicePathForTransformerArgs
  _args58.TransformerId = transformerId
  var _result59 ModelDBServicePathForTransformerResult
  if err = p.Client_().Call(ctx, "pathForTransformer", &_args58, &_result59); err != nil {
    return
  }
  switch {
  case _result59.RnfEx!= nil:
    return r, _result59.RnfEx
  case _result59.EfEx!= nil:
    return r, _result59.EfEx
  case _result59.SvEx!= nil:
    return r, _result59.SvEx
  }

  return _result59.GetSuccess(), nil
}

// Parameters:
//  - Fe
func (p *ModelDBServiceClient) StoreFitEvent(ctx context.Context, fe *FitEvent) (r *FitEventResponse, err error) {
  var _args60 ModelDBServiceStoreFitEventArgs
  _args60.Fe = fe
  var _result61 ModelDBServiceStoreFitEventResult
  if err = p.Client_().Call(ctx, "storeFitEvent", &_args60, &_result61); err != nil {
    return
  }
  switch {
  case _result61.IerEx!= nil:
    return r, _result61.IerEx
  case _result61.SvEx!= nil:
    return r, _result61.SvEx
  }

  return _result61.GetSuccess(), nil
}

// Parameters:
//  - Me
func (p *ModelDBServiceClient) StoreMetricEvent(ctx context.Context, me *MetricEvent) (r *MetricEventResponse, err error) {
  var _args62 ModelDBServiceStoreMetricEventArgs
  _args62.Me = me
  var _result63 ModelDBServiceStoreMetricEventResult
  if err = p.Client_().Call(ctx, "storeMetricEvent", &_args62, &_result63); err != nil {
    return
  }
  switch {
  case _result63.IerEx!= nil:
    return r, _result63.IerEx
  case _result63.SvEx!= nil:
    return r, _result63.SvEx
  }

  return _result63.GetSuccess(), nil
}

// Parameters:
//  - T
//  - ExperimentRunId
//  - Filename
func (p *ModelDBServiceClient) GetFilePath(ctx context.Context, t *Transformer, experimentRunId int32, filename string) (r string, err error) {
  var _args64 ModelDBServiceGetFilePathArgs
  _args64.T = t
  _args64.ExperimentRunId = experimentRunId
  _args64.Filename = filename
  var _result65 ModelDBServiceGetFilePathResult
  if err = p.Client_().Call(ctx, "getFilePath", &_args64, &_result65); err != nil {
    return
  }
  switch {
  case _result65.RnfEx!= nil:
    return r, _result65.RnfEx
  case _result65.SvEx!= nil:
    return r, _result65.SvEx
  }

  return _result65.GetSuccess(), nil
}

// Parameters:
//  - Te
func (p *ModelDBServiceClient) StoreTransformEvent(ctx context.Context, te *TransformEvent) (r *TransformEventResponse, err error) {
  var _args66 ModelDBServiceStoreTransformEventArgs
  _args66.Te = te
  var _result67 ModelDBServiceStoreTransformEventResult
  if err = p.Client_().Call(ctx, "storeTransformEvent", &_args66, &_result67); err != nil {
    return
  }
  switch {
  case _result67.IerEx!= nil:
    return r, _result67.IerEx
  case _result67.SvEx!= nil:
    return r, _result67.SvEx
  }

  return _result67.GetSuccess(), nil
}

// Parameters:
//  - Rse
func (p *ModelDBServiceClient) StoreRandomSplitEvent(ctx context.Context, rse *RandomSplitEvent) (r *RandomSplitEventResponse, err error) {
  var _args68 ModelDBServiceStoreRandomSplitEventArgs
  _args68.Rse = rse
  var _result69 ModelDBServiceStoreRandomSplitEventResult
  if err = p.Client_().Call(ctx, "storeRandomSplitEvent", &_args68, &_result69); err != nil {
    return
  }
  switch {
  case _result69.SvEx!= nil:
    return r, _result69.SvEx
  }

  return _result69.GetSuccess(), nil
}

// Parameters:
//  - PipelineEvent
func (p *ModelDBServiceClient) StorePipelineEvent(ctx context.Context, pipelineEvent *PipelineEvent) (r *PipelineEventResponse, err error) {
  var _args70 ModelDBServiceStorePipelineEventArgs
  _args70.PipelineEvent = pipelineEvent
  var _result71 ModelDBServiceStorePipelineEventResult
  if err = p.Client_().Call(ctx, "storePipelineEvent", &_args70, &_result71); err != nil {
    return
  }
  switch {
  case _result71.SvEx!= nil:
    return r, _result71.SvEx
  }

  return _result71.GetSuccess(), nil
}

// Parameters:
//  - Cve
func (p *ModelDBServiceClient) StoreCrossValidationEvent(ctx context.Context, cve *CrossValidationEvent) (r *CrossValidationEventResponse, err error) {
  var _args72 ModelDBServiceStoreCrossValidationEventArgs
  _args72.Cve = cve
  var _result73 ModelDBServiceStoreCrossValidationEventResult
  if err = p.Client_().Call(ctx, "storeCrossValidationEvent", &_args72, &_result73); err != nil {
    return
  }
  switch {
  case _result73.SvEx!= nil:
    return r, _result73.SvEx
  }

  return _result73.GetSuccess(), nil
}

// Parameters:
//  - Gscve
func (p *ModelDBServiceClient) StoreGridSearchCrossValidationEvent(ctx context.Context, gscve *GridSearchCrossValidationEvent) (r *GridSearchCrossValidationEventResponse, err error) {
  var _args74 ModelDBServiceStoreGridSearchCrossValidationEventArgs
  _args74.Gscve = gscve
  var _result75 ModelDBServiceStoreGridSearchCrossValidationEventResult
  if err = p.Client_().Call(ctx, "storeGridSearchCrossValidationEvent", &_args74, &_result75); err != nil {
    return
  }
  switch {
  case _result75.SvEx!= nil:
    return r, _result75.SvEx
  }

  return _result75.GetSuccess(), nil
}

// Parameters:
//  - Ae
func (p *ModelDBServiceClient) StoreAnnotationEvent(ctx context.Context, ae *AnnotationEvent) (r *AnnotationEventResponse, err error) {
  var _args76 ModelDBServiceStoreAnnotationEventArgs
  _args76.Ae = ae
  var _result77 ModelDBServiceStoreAnnotationEventResult
  if err = p.Client_().Call(ctx, "storeAnnotationEvent", &_args76, &_result77); err != nil {
    return
  }
  switch {
  case _result77.SvEx!= nil:
    return r, _result77.SvEx
  }

  return _result77.GetSuccess(), nil
}

// Parameters:
//  - Pr
func (p *ModelDBServiceClient) StoreProjectEvent(ctx context.Context, pr *ProjectEvent) (r *ProjectEventResponse, err error) {
  var _args78 ModelDBServiceStoreProjectEventArgs
  _args78.Pr = pr
  var _result79 ModelDBServiceStoreProjectEventResult
  if err = p.Client_().Call(ctx, "storeProjectEvent", &_args78, &_result79); err != nil {
    return
  }
  switch {
  case _result79.SvEx!= nil:
    return r, _result79.SvEx
  }

  return _result79.GetSuccess(), nil
}

// Parameters:
//  - Er
func (p *ModelDBServiceClient) StoreExperimentEvent(ctx context.Context, er *ExperimentEvent) (r *ExperimentEventResponse, err error) {
  var _args80 ModelDBServiceStoreExperimentEventArgs
  _args80.Er = er
  var _result81 ModelDBServiceStoreExperimentEventResult
  if err = p.Client_().Call(ctx, "storeExperimentEvent", &_args80, &_result81); err != nil {
    return
  }
  switch {
  case _result81.SvEx!= nil:
    return r, _result81.SvEx
  }

  return _result81.GetSuccess(), nil
}

// Parameters:
//  - Er
func (p *ModelDBServiceClient) StoreExperimentRunEvent(ctx context.Context, er *ExperimentRunEvent) (r *ExperimentRunEventResponse, err error) {
  var _args82 ModelDBServiceStoreExperimentRunEventArgs
  _args82.Er = er
  var _result83 ModelDBServiceStoreExperimentRunEventResult
  if err = p.Client_().Call(ctx, "storeExperimentRunEvent", &_args82, &_result83); err != nil {
    return
  }
  switch {
  case _result83.SvEx!= nil:
    return r, _result83.SvEx
  }

  return _result83.GetSuccess(), nil
}

// Parameters:
//  - ModelId
//  - Model
func (p *ModelDBServiceClient) StoreLinearModel(ctx context.Context, modelId int32, model *LinearModel) (r bool, err error) {
  var _args84 ModelDBServiceStoreLinearModelArgs
  _args84.ModelId = modelId
  _args84.Model = model
  var _result85 ModelDBServiceStoreLinearModelResult
  if err = p.Client_().Call(ctx, "storeLinearModel", &_args84, &_result85); err != nil {
    return
  }
  switch {
  case _result85.RnfEx!= nil:
    return r, _result85.RnfEx
  case _result85.SvEx!= nil:
    return r, _result85.SvEx
  }

  return _result85.GetSuccess(), nil
}

// Parameters:
//  - DataFrameId
func (p *ModelDBServiceClient) GetDataFrameAncestry(ctx context.Context, dataFrameId int32) (r *DataFrameAncestry, err error) {
  var _args86 ModelDBServiceGetDataFrameAncestryArgs
  _args86.DataFrameId = dataFrameId
  var _result87 ModelDBServiceGetDataFrameAncestryResult
  if err = p.Client_().Call(ctx, "getDataFrameAncestry", &_args86, &_result87); err != nil {
    return
  }
  switch {
  case _result87.RnfEx!= nil:
    return r, _result87.RnfEx
  case _result87.SvEx!= nil:
    return r, _result87.SvEx
  }

  return _result87.GetSuccess(), nil
}

// Parameters:
//  - DfId1
//  - DfId2
func (p *ModelDBServiceClient) GetCommonAncestor(ctx context.Context, dfId1 int32, dfId2 int32) (r *CommonAncestor, err error) {
  var _args88 ModelDBServiceGetCommonAncestorArgs
  _args88.DfId1 = dfId1
  _args88.DfId2 = dfId2
  var _result89 ModelDBServiceGetCommonAncestorResult
  if err = p.Client_().Call(ctx, "getCommonAncestor", &_args88, &_result89); err != nil {
    return
  }
  switch {
  case _result89.RnfEx!= nil:
    return r, _result89.RnfEx
  case _result89.SvEx!= nil:
    return r, _result89.SvEx
  }

  return _result89.GetSuccess(), nil
}

// Parameters:
//  - ModelId1
//  - ModelId2
func (p *ModelDBServiceClient) GetCommonAncestorForModels(ctx context.Context, modelId1 int32, modelId2 int32) (r *CommonAncestor, err error) {
  var _args90 ModelDBServiceGetCommonAncestorForModelsArgs
  _args90.ModelId1 = modelId1
  _args90.ModelId2 = modelId2
  var _result91 ModelDBServiceGetCommonAncestorForModelsResult
  if err = p.Client_().Call(ctx, "getCommonAncestorForModels", &_args90, &_result91); err != nil {
    return
  }
  switch {
  case _result91.RnfEx!= nil:
    return r, _result91.RnfEx
  case _result91.SvEx!= nil:
    return r, _result91.SvEx
  }

  return _result91.GetSuccess(), nil
}

// Parameters:
//  - ModelId
func (p *ModelDBServiceClient) GetTrainingRowsCount(ctx context.Context, modelId int32) (r int32, err error) {
  var _args92 ModelDBServiceGetTrainingRowsCountArgs
  _args92.ModelId = modelId
  var _result93 ModelDBServiceGetTrainingRowsCountResult
  if err = p.Client_().Call(ctx, "getTrainingRowsCount", &_args92, &_result93); err != nil {
    return
  }
  switch {
  case _result93.RnfEx!= nil:
    return r, _result93.RnfEx
  case _result93.SvEx!= nil:
    return r, _result93.SvEx
  }

  return _result93.GetSuccess(), nil
}

// Parameters:
//  - ModelIds
func (p *ModelDBServiceClient) GetTrainingRowsCounts(ctx context.Context, modelIds []int32) (r []int32, err error) {
  var _args94 ModelDBServiceGetTrainingRowsCountsArgs
  _args94.ModelIds = modelIds
  var _result95 ModelDBServiceGetTrainingRowsCountsResult
  if err = p.Client_().Call(ctx, "getTrainingRowsCounts", &_args94, &_result95); err != nil {
    return
  }
  switch {
  case _result95.SvEx!= nil:
    return r, _result95.SvEx
  }

  return _result95.GetSuccess(), nil
}

// Parameters:
//  - ModelId1
//  - ModelId2
func (p *ModelDBServiceClient) CompareHyperparameters(ctx context.Context, modelId1 int32, modelId2 int32) (r *CompareHyperParametersResponse, err error) {
  var _args96 ModelDBServiceCompareHyperparametersArgs
  _args96.ModelId1 = modelId1
  _args96.ModelId2 = modelId2
  var _result97 ModelDBServiceCompareHyperparametersResult
  if err = p.Client_().Call(ctx, "compareHyperparameters", &_args96, &_result97); err != nil {
    return
  }
  switch {
  case _result97.RnfEx!= nil:
    return r, _result97.RnfEx
  case _result97.SvEx!= nil:
    return r, _result97.SvEx
  }

  return _result97.GetSuccess(), nil
}

// Parameters:
//  - ModelId1
//  - ModelId2
func (p *ModelDBServiceClient) CompareFeatures(ctx context.Context, modelId1 int32, modelId2 int32) (r *CompareFeaturesResponse, err error) {
  var _args98 ModelDBServiceCompareFeaturesArgs
  _args98.ModelId1 = modelId1
  _args98.ModelId2 = modelId2
  var _result99 ModelDBServiceCompareFeaturesResult
  if err = p.Client_().Call(ctx, "compareFeatures", &_args98, &_result99); err != nil {
    return
  }
  switch {
  case _result99.RnfEx!= nil:
    return r, _result99.RnfEx
  case _result99.SvEx!= nil:
    return r, _result99.SvEx
  }

  return _result99.GetSuccess(), nil
}

// Parameters:
//  - ModelIds
func (p *ModelDBServiceClient) GroupByProblemType(ctx context.Context, modelIds []int32) (r map[ProblemType][]int32, err error) {
  var _args100 ModelDBServiceGroupByProblemTypeArgs
  _args100.ModelIds = modelIds
  var _result101 ModelDBServiceGroupByProblemTypeResult
  if err = p.Client_().Call(ctx, "groupByProblemType", &_args100, &_result101); err != nil {
    return
  }
  switch {
  case _result101.SvEx!= nil:
    return r, _result101.SvEx
  }

  return _result101.GetSuccess(), nil
}

// Parameters:
//  - ModelId
//  - CompMetrics
//  - NumModels
func (p *ModelDBServiceClient) SimilarModels(ctx context.Context, modelId int32, compMetrics []ModelCompMetric, numModels int32) (r []int32, err error) {
  var _args102 ModelDBServiceSimilarModelsArgs
  _args102.ModelId = modelId
  _args102.CompMetrics = compMetrics
  _args102.NumModels = numModels
  var _result103 ModelDBServiceSimilarModelsResult
  if err = p.Client_().Call(ctx, "similarModels", &_args102, &_result103); err != nil {
    return
  }
  switch {
  case _result103.RnfEx!= nil:
    return r, _result103.RnfEx
  case _result103.BrEx!= nil:
    return r, _result103.BrEx
  case _result103.SvEx!= nil:
    return r, _result103.SvEx
  }

  return _result103.GetSuccess(), nil
}

// Parameters:
//  - ModelId
func (p *ModelDBServiceClient) LinearModelFeatureImportances(ctx context.Context, modelId int32) (r []string, err error) {
  var _args104 ModelDBServiceLinearModelFeatureImportancesArgs
  _args104.ModelId = modelId
  var _result105 ModelDBServiceLinearModelFeatureImportancesResult
  if err = p.Client_().Call(ctx, "linearModelFeatureImportances", &_args104, &_result105); err != nil {
    return
  }
  switch {
  case _result105.RnfEx!= nil:
    return r, _result105.RnfEx
  case _result105.IoEx!= nil:
    return r, _result105.IoEx
  case _result105.SvEx!= nil:
    return r, _result105.SvEx
  }

  return _result105.GetSuccess(), nil
}

// Parameters:
//  - Model1Id
//  - Model2Id
func (p *ModelDBServiceClient) CompareLinearModelFeatureImportances(ctx context.Context, model1Id int32, model2Id int32) (r []*FeatureImportanceComparison, err error) {
  var _args106 ModelDBServiceCompareLinearModelFeatureImportancesArgs
  _args106.Model1Id = model1Id
  _args106.Model2Id = model2Id
  var _result107 ModelDBServiceCompareLinearModelFeatureImportancesResult
  if err = p.Client_().Call(ctx, "compareLinearModelFeatureImportances", &_args106, &_result107); err != nil {
    return
  }
  switch {
  case _result107.RnfEx!= nil:
    return r, _result107.RnfEx
  case _result107.IoEx!= nil:
    return r, _result107.IoEx
  case _result107.SvEx!= nil:
    return r, _result107.SvEx
  }

  return _result107.GetSuccess(), nil
}

// Parameters:
//  - ModelIds
//  - Tolerance
func (p *ModelDBServiceClient) IterationsUntilConvergence(ctx context.Context, modelIds []int32, tolerance float64) (r []int32, err error) {
  var _args108 ModelDBServiceIterationsUntilConvergenceArgs
  _args108.ModelIds = modelIds
  _args108.Tolerance = tolerance
  var _result109 ModelDBServiceIterationsUntilConvergenceResult
  if err = p.Client_().Call(ctx, "iterationsUntilConvergence", &_args108, &_result109); err != nil {
    return
  }
  switch {
  case _result109.SvEx!= nil:
    return r, _result109.SvEx
  }

  return _result109.GetSuccess(), nil
}

// Parameters:
//  - ModelIds
//  - Metric
func (p *ModelDBServiceClient) RankModels(ctx context.Context, modelIds []int32, metric ModelRankMetric) (r []int32, err error) {
  var _args110 ModelDBServiceRankModelsArgs
  _args110.ModelIds = modelIds
  _args110.Metric = metric
  var _result111 ModelDBServiceRankModelsResult
  if err = p.Client_().Call(ctx, "rankModels", &_args110, &_result111); err != nil {
    return
  }
  switch {
  case _result111.SvEx!= nil:
    return r, _result111.SvEx
  }

  return _result111.GetSuccess(), nil
}

// Parameters:
//  - ModelId
//  - SigLevel
func (p *ModelDBServiceClient) ConfidenceIntervals(ctx context.Context, modelId int32, sigLevel float64) (r []*ConfidenceInterval, err error) {
  var _args112 ModelDBServiceConfidenceIntervalsArgs
  _args112.ModelId = modelId
  _args112.SigLevel = sigLevel
  var _result113 ModelDBServiceConfidenceIntervalsResult
  if err = p.Client_().Call(ctx, "confidenceIntervals", &_args112, &_result113); err != nil {
    return
  }
  switch {
  case _result113.RnfEx!= nil:
    return r, _result113.RnfEx
  case _result113.IoEx!= nil:
    return r, _result113.IoEx
  case _result113.BrEx!= nil:
    return r, _result113.BrEx
  case _result113.SvEx!= nil:
    return r, _result113.SvEx
  }

  return _result113.GetSuccess(), nil
}

// Parameters:
//  - FeatureNames
func (p *ModelDBServiceClient) ModelsWithFeatures(ctx context.Context, featureNames []string) (r []int32, err error) {
  var _args114 ModelDBServiceModelsWithFeaturesArgs
  _args114.FeatureNames = featureNames
  var _result115 ModelDBServiceModelsWithFeaturesResult
  if err = p.Client_().Call(ctx, "modelsWithFeatures", &_args114, &_result115); err != nil {
    return
  }
  switch {
  case _result115.SvEx!= nil:
    return r, _result115.SvEx
  }

  return _result115.GetSuccess(), nil
}

// Parameters:
//  - DfId
func (p *ModelDBServiceClient) ModelsDerivedFromDataFrame(ctx context.Context, dfId int32) (r []int32, err error) {
  var _args116 ModelDBServiceModelsDerivedFromDataFrameArgs
  _args116.DfId = dfId
  var _result117 ModelDBServiceModelsDerivedFromDataFrameResult
  if err = p.Client_().Call(ctx, "modelsDerivedFromDataFrame", &_args116, &_result117); err != nil {
    return
  }
  switch {
  case _result117.RnfEx!= nil:
    return r, _result117.RnfEx
  case _result117.SvEx!= nil:
    return r, _result117.SvEx
  }

  return _result117.GetSuccess(), nil
}

// Parameters:
//  - KeyValuePairs
func (p *ModelDBServiceClient) GetProjectIds(ctx context.Context, keyValuePairs map[string]string) (r []int32, err error) {
  var _args118 ModelDBServiceGetProjectIdsArgs
  _args118.KeyValuePairs = keyValuePairs
  var _result119 ModelDBServiceGetProjectIdsResult
  if err = p.Client_().Call(ctx, "getProjectIds", &_args118, &_result119); err != nil {
    return
  }
  switch {
  case _result119.SvEx!= nil:
    return r, _result119.SvEx
  }

  return _result119.GetSuccess(), nil
}

// Parameters:
//  - KeyValuePairs
func (p *ModelDBServiceClient) GetModelIds(ctx context.Context, keyValuePairs map[string]string) (r []int32, err error) {
  var _args120 ModelDBServiceGetModelIdsArgs
  _args120.KeyValuePairs = keyValuePairs
  var _result121 ModelDBServiceGetModelIdsResult
  if err = p.Client_().Call(ctx, "getModelIds", &_args120, &_result121); err != nil {
    return
  }
  switch {
  case _result121.SvEx!= nil:
    return r, _result121.SvEx
  }

  return _result121.GetSuccess(), nil
}

// Parameters:
//  - ProjectId
//  - Key
//  - Value
func (p *ModelDBServiceClient) UpdateProject(ctx context.Context, projectId int32, key string, value string) (r bool, err error) {
  var _args122 ModelDBServiceUpdateProjectArgs
  _args122.ProjectId = projectId
  _args122.Key = key
  _args122.Value = value
  var _result123 ModelDBServiceUpdateProjectResult
  if err = p.Client_().Call(ctx, "updateProject", &_args122, &_result123); err != nil {
    return
  }
  switch {
  case _result123.SvEx!= nil:
    return r, _result123.SvEx
  }

  return _result123.GetSuccess(), nil
}

// Parameters:
//  - ModelId
//  - Key
//  - Value
//  - ValueType
func (p *ModelDBServiceClient) CreateOrUpdateScalarField(ctx context.Context, modelId int32, key string, value string, valueType string) (r bool, err error) {
  var _args124 ModelDBServiceCreateOrUpdateScalarFieldArgs
  _args124.ModelId = modelId
  _args124.Key = key
  _args124.Value = value
  _args124.ValueType = valueType
  var _result125 ModelDBServiceCreateOrUpdateScalarFieldResult
  if err = p.Client_().Call(ctx, "createOrUpdateScalarField", &_args124, &_result125); err != nil {
    return
  }
  switch {
  case _result125.SvEx!= nil:
    return r, _result125.SvEx
  }

  return _result125.GetSuccess(), nil
}

// Parameters:
//  - ModelId
//  - VectorName
//  - VectorConfig
func (p *ModelDBServiceClient) CreateVectorField(ctx context.Context, modelId int32, vectorName string, vectorConfig map[string]string) (r bool, err error) {
  var _args126 ModelDBServiceCreateVectorFieldArgs
  _args126.ModelId = modelId
  _args126.VectorName = vectorName
  _args126.VectorConfig = vectorConfig
  var _result127 ModelDBServiceCreateVectorFieldResult
  if err = p.Client_().Call(ctx, "createVectorField", &_args126, &_result127); err != nil {
    return
  }
  switch {
  case _result127.SvEx!= nil:
    return r, _result127.SvEx
  }

  return _result127.GetSuccess(), nil
}

// Parameters:
//  - ModelId
//  - Key
//  - ValueIndex
//  - Value
//  - ValueType
func (p *ModelDBServiceClient) UpdateVectorField(ctx context.Context, modelId int32, key string, valueIndex int32, value string, valueType string) (r bool, err error) {
  var _args128 ModelDBServiceUpdateVectorFieldArgs
  _args128.ModelId = modelId
  _args128.Key = key
  _args128.ValueIndex = valueIndex
  _args128.Value = value
  _args128.ValueType = valueType
  var _result129 ModelDBServiceUpdateVectorFieldResult
  if err = p.Client_().Call(ctx, "updateVectorField", &_args128, &_result129); err != nil {
    return
  }
  switch {
  case _result129.SvEx!= nil:
    return r, _result129.SvEx
  }

  return _result129.GetSuccess(), nil
}

// Parameters:
//  - ModelId
//  - VectorName
//  - Value
//  - ValueType
func (p *ModelDBServiceClient) AppendToVectorField(ctx context.Context, modelId int32, vectorName string, value string, valueType string) (r bool, err error) {
  var _args130 ModelDBServiceAppendToVectorFieldArgs
  _args130.ModelId = modelId
  _args130.VectorName = vectorName
  _args130.Value = value
  _args130.ValueType = valueType
  var _result131 ModelDBServiceAppendToVectorFieldResult
  if err = p.Client_().Call(ctx, "appendToVectorField", &_args130, &_result131); err != nil {
    return
  }
  switch {
  case _result131.SvEx!= nil:
    return r, _result131.SvEx
  }

  return _result131.GetSuccess(), nil
}

// Parameters:
//  - ModelId
func (p *ModelDBServiceClient) GetModel(ctx context.Context, modelId int32) (r *ModelResponse, err error) {
  var _args132 ModelDBServiceGetModelArgs
  _args132.ModelId = modelId
  var _result133 ModelDBServiceGetModelResult
  if err = p.Client_().Call(ctx, "getModel", &_args132, &_result133); err != nil {
    return
  }
  switch {
  case _result133.RnfEx!= nil:
    return r, _result133.RnfEx
  case _result133.SvEx!= nil:
    return r, _result133.SvEx
  }

  return _result133.GetSuccess(), nil
}

// Parameters:
//  - ExperimentId
func (p *ModelDBServiceClient) GetRunsInExperiment(ctx context.Context, experimentId int32) (r []*ExperimentRun, err error) {
  var _args134 ModelDBServiceGetRunsInExperimentArgs
  _args134.ExperimentId = experimentId
  var _result135 ModelDBServiceGetRunsInExperimentResult
  if err = p.Client_().Call(ctx, "getRunsInExperiment", &_args134, &_result135); err != nil {
    return
  }
  switch {
  case _result135.SvEx!= nil:
    return r, _result135.SvEx
  }

  return _result135.GetSuccess(), nil
}

// Parameters:
//  - ProjId
func (p *ModelDBServiceClient) GetRunsAndExperimentsInProject(ctx context.Context, projId int32) (r *ProjectExperimentsAndRuns, err error) {
  var _args136 ModelDBServiceGetRunsAndExperimentsInProjectArgs
  _args136.ProjId = projId
  var _result137 ModelDBServiceGetRunsAndExperimentsInProjectResult
  if err = p.Client_().Call(ctx, "getRunsAndExperimentsInProject", &_args136, &_result137); err != nil {
    return
  }
  switch {
  case _result137.SvEx!= nil:
    return r, _result137.SvEx
  }

  return _result137.GetSuccess(), nil
}

func (p *ModelDBServiceClient) GetProjectOverviews(ctx context.Context) (r []*ProjectOverviewResponse, err error) {
  var _args138 ModelDBServiceGetProjectOverviewsArgs
  var _result139 ModelDBServiceGetProjectOverviewsResult
  if err = p.Client_().Call(ctx, "getProjectOverviews", &_args138, &_result139); err != nil {
    return
  }
  switch {
  case _result139.SvEx!= nil:
    return r, _result139.SvEx
  }

  return _result139.GetSuccess(), nil
}

// Parameters:
//  - ExperimentRunId
func (p *ModelDBServiceClient) GetExperimentRunDetails(ctx context.Context, experimentRunId int32) (r *ExperimentRunDetailsResponse, err error) {
  var _args140 ModelDBServiceGetExperimentRunDetailsArgs
  _args140.ExperimentRunId = experimentRunId
  var _result141 ModelDBServiceGetExperimentRunDetailsResult
  if err = p.Client_().Call(ctx, "getExperimentRunDetails", &_args140, &_result141); err != nil {
    return
  }
  switch {
  case _result141.SvEx!= nil:
    return r, _result141.SvEx
  case _result141.RnfEx!= nil:
    return r, _result141.RnfEx
  }

  return _result141.GetSuccess(), nil
}

// Parameters:
//  - ModelId
func (p *ModelDBServiceClient) OriginalFeatures(ctx context.Context, modelId int32) (r []string, err error) {
  var _args142 ModelDBServiceOriginalFeaturesArgs
  _args142.ModelId = modelId
  var _result143 ModelDBServiceOriginalFeaturesResult
  if err = p.Client_().Call(ctx, "originalFeatures", &_args142, &_result143); err != nil {
    return
  }
  switch {
  case _result143.RnfEx!= nil:
    return r, _result143.RnfEx
  case _result143.SvEx!= nil:
    return r, _result143.SvEx
  }

  return _result143.GetSuccess(), nil
}

// Parameters:
//  - ModelId
//  - Model
func (p *ModelDBServiceClient) StoreTreeModel(ctx context.Context, modelId int32, model *TreeModel) (r bool, err error) {
  var _args144 ModelDBServiceStoreTreeModelArgs
  _args144.ModelId = modelId
  _args144.Model = model
  var _result145 ModelDBServiceStoreTreeModelResult
  if err = p.Client_().Call(ctx, "storeTreeModel", &_args144, &_result145); err != nil {
    return
  }
  switch {
  case _result145.RnfEx!= nil:
    return r, _result145.RnfEx
  case _result145.SvEx!= nil:
    return r, _result145.SvEx
  }

  return _result145.GetSuccess(), nil
}

// Parameters:
//  - Te
func (p *ModelDBServiceClient) StorePipelineTransformEvent(ctx context.Context, te []*TransformEvent) (r []*TransformEventResponse, err error) {
  var _args146 ModelDBServiceStorePipelineTransformEventArgs
  _args146.Te = te
  var _result147 ModelDBServiceStorePipelineTransformEventResult
  if err = p.Client_().Call(ctx, "storePipelineTransformEvent", &_args146, &_result147); err != nil {
    return
  }
  switch {
  case _result147.IerEx!= nil:
    return r, _result147.IerEx
  case _result147.SvEx!= nil:
    return r, _result147.SvEx
  }

  return _result147.GetSuccess(), nil
}

// Parameters:
//  - ModelId
func (p *ModelDBServiceClient) ComputeModelAncestry(ctx context.Context, modelId int32) (r *ModelAncestryResponse, err error) {
  var _args148 ModelDBServiceComputeModelAncestryArgs
  _args148.ModelId = modelId
  var _result149 ModelDBServiceComputeModelAncestryResult
  if err = p.Client_().Call(ctx, "computeModelAncestry", &_args148, &_result149); err != nil {
    return
  }
  switch {
  case _result149.RnfEx!= nil:
    return r, _result149.RnfEx
  case _result149.SvEx!= nil:
    return r, _result149.SvEx
  }

  return _result149.GetSuccess(), nil
}

// Parameters:
//  - ModelId
func (p *ModelDBServiceClient) ExtractPipeline(ctx context.Context, modelId int32) (r *ExtractedPipelineResponse, err error) {
  var _args150 ModelDBServiceExtractPipelineArgs
  _args150.ModelId = modelId
  var _result151 ModelDBServiceExtractPipelineResult
  if err = p.Client_().Call(ctx, "extractPipeline", &_args150, &_result151); err != nil {
    return
  }
  switch {
  case _result151.RnfEx!= nil:
    return r, _result151.RnfEx
  case _result151.SvEx!= nil:
    return r, _result151.SvEx
  }

  return _result151.GetSuccess(), nil
}

type ModelDBServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ModelDBService
}

func (p *ModelDBServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ModelDBServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ModelDBServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewModelDBServiceProcessor(handler ModelDBService) *ModelDBServiceProcessor {

  self152 := &ModelDBServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self152.processorMap["testConnection"] = &modelDBServiceProcessorTestConnection{handler:handler}
  self152.processorMap["storeDataFrame"] = &modelDBServiceProcessorStoreDataFrame{handler:handler}
  self152.processorMap["pathForTransformer"] = &modelDBServiceProcessorPathForTransformer{handler:handler}
  self152.processorMap["storeFitEvent"] = &modelDBServiceProcessorStoreFitEvent{handler:handler}
  self152.processorMap["storeMetricEvent"] = &modelDBServiceProcessorStoreMetricEvent{handler:handler}
  self152.processorMap["getFilePath"] = &modelDBServiceProcessorGetFilePath{handler:handler}
  self152.processorMap["storeTransformEvent"] = &modelDBServiceProcessorStoreTransformEvent{handler:handler}
  self152.processorMap["storeRandomSplitEvent"] = &modelDBServiceProcessorStoreRandomSplitEvent{handler:handler}
  self152.processorMap["storePipelineEvent"] = &modelDBServiceProcessorStorePipelineEvent{handler:handler}
  self152.processorMap["storeCrossValidationEvent"] = &modelDBServiceProcessorStoreCrossValidationEvent{handler:handler}
  self152.processorMap["storeGridSearchCrossValidationEvent"] = &modelDBServiceProcessorStoreGridSearchCrossValidationEvent{handler:handler}
  self152.processorMap["storeAnnotationEvent"] = &modelDBServiceProcessorStoreAnnotationEvent{handler:handler}
  self152.processorMap["storeProjectEvent"] = &modelDBServiceProcessorStoreProjectEvent{handler:handler}
  self152.processorMap["storeExperimentEvent"] = &modelDBServiceProcessorStoreExperimentEvent{handler:handler}
  self152.processorMap["storeExperimentRunEvent"] = &modelDBServiceProcessorStoreExperimentRunEvent{handler:handler}
  self152.processorMap["storeLinearModel"] = &modelDBServiceProcessorStoreLinearModel{handler:handler}
  self152.processorMap["getDataFrameAncestry"] = &modelDBServiceProcessorGetDataFrameAncestry{handler:handler}
  self152.processorMap["getCommonAncestor"] = &modelDBServiceProcessorGetCommonAncestor{handler:handler}
  self152.processorMap["getCommonAncestorForModels"] = &modelDBServiceProcessorGetCommonAncestorForModels{handler:handler}
  self152.processorMap["getTrainingRowsCount"] = &modelDBServiceProcessorGetTrainingRowsCount{handler:handler}
  self152.processorMap["getTrainingRowsCounts"] = &modelDBServiceProcessorGetTrainingRowsCounts{handler:handler}
  self152.processorMap["compareHyperparameters"] = &modelDBServiceProcessorCompareHyperparameters{handler:handler}
  self152.processorMap["compareFeatures"] = &modelDBServiceProcessorCompareFeatures{handler:handler}
  self152.processorMap["groupByProblemType"] = &modelDBServiceProcessorGroupByProblemType{handler:handler}
  self152.processorMap["similarModels"] = &modelDBServiceProcessorSimilarModels{handler:handler}
  self152.processorMap["linearModelFeatureImportances"] = &modelDBServiceProcessorLinearModelFeatureImportances{handler:handler}
  self152.processorMap["compareLinearModelFeatureImportances"] = &modelDBServiceProcessorCompareLinearModelFeatureImportances{handler:handler}
  self152.processorMap["iterationsUntilConvergence"] = &modelDBServiceProcessorIterationsUntilConvergence{handler:handler}
  self152.processorMap["rankModels"] = &modelDBServiceProcessorRankModels{handler:handler}
  self152.processorMap["confidenceIntervals"] = &modelDBServiceProcessorConfidenceIntervals{handler:handler}
  self152.processorMap["modelsWithFeatures"] = &modelDBServiceProcessorModelsWithFeatures{handler:handler}
  self152.processorMap["modelsDerivedFromDataFrame"] = &modelDBServiceProcessorModelsDerivedFromDataFrame{handler:handler}
  self152.processorMap["getProjectIds"] = &modelDBServiceProcessorGetProjectIds{handler:handler}
  self152.processorMap["getModelIds"] = &modelDBServiceProcessorGetModelIds{handler:handler}
  self152.processorMap["updateProject"] = &modelDBServiceProcessorUpdateProject{handler:handler}
  self152.processorMap["createOrUpdateScalarField"] = &modelDBServiceProcessorCreateOrUpdateScalarField{handler:handler}
  self152.processorMap["createVectorField"] = &modelDBServiceProcessorCreateVectorField{handler:handler}
  self152.processorMap["updateVectorField"] = &modelDBServiceProcessorUpdateVectorField{handler:handler}
  self152.processorMap["appendToVectorField"] = &modelDBServiceProcessorAppendToVectorField{handler:handler}
  self152.processorMap["getModel"] = &modelDBServiceProcessorGetModel{handler:handler}
  self152.processorMap["getRunsInExperiment"] = &modelDBServiceProcessorGetRunsInExperiment{handler:handler}
  self152.processorMap["getRunsAndExperimentsInProject"] = &modelDBServiceProcessorGetRunsAndExperimentsInProject{handler:handler}
  self152.processorMap["getProjectOverviews"] = &modelDBServiceProcessorGetProjectOverviews{handler:handler}
  self152.processorMap["getExperimentRunDetails"] = &modelDBServiceProcessorGetExperimentRunDetails{handler:handler}
  self152.processorMap["originalFeatures"] = &modelDBServiceProcessorOriginalFeatures{handler:handler}
  self152.processorMap["storeTreeModel"] = &modelDBServiceProcessorStoreTreeModel{handler:handler}
  self152.processorMap["storePipelineTransformEvent"] = &modelDBServiceProcessorStorePipelineTransformEvent{handler:handler}
  self152.processorMap["computeModelAncestry"] = &modelDBServiceProcessorComputeModelAncestry{handler:handler}
  self152.processorMap["extractPipeline"] = &modelDBServiceProcessorExtractPipeline{handler:handler}
return self152
}

func (p *ModelDBServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x153 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x153.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x153

}

type modelDBServiceProcessorTestConnection struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorTestConnection) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceTestConnectionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("testConnection", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceTestConnectionResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.TestConnection(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testConnection: " + err2.Error())
    oprot.WriteMessageBegin("testConnection", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("testConnection", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreDataFrame struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreDataFrame) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreDataFrameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeDataFrame", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreDataFrameResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.StoreDataFrame(ctx, args.Df, args.ExperimentRunId); err2 != nil {
  switch v := err2.(type) {
    case *InvalidExperimentRunException:
  result.IerEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeDataFrame: " + err2.Error())
    oprot.WriteMessageBegin("storeDataFrame", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("storeDataFrame", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorPathForTransformer struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorPathForTransformer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServicePathForTransformerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("pathForTransformer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServicePathForTransformerResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.PathForTransformer(ctx, args.TransformerId); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *InvalidFieldException:
  result.EfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pathForTransformer: " + err2.Error())
    oprot.WriteMessageBegin("pathForTransformer", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("pathForTransformer", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreFitEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreFitEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreFitEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeFitEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreFitEventResult{}
var retval *FitEventResponse
  var err2 error
  if retval, err2 = p.handler.StoreFitEvent(ctx, args.Fe); err2 != nil {
  switch v := err2.(type) {
    case *InvalidExperimentRunException:
  result.IerEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeFitEvent: " + err2.Error())
    oprot.WriteMessageBegin("storeFitEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storeFitEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreMetricEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreMetricEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreMetricEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeMetricEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreMetricEventResult{}
var retval *MetricEventResponse
  var err2 error
  if retval, err2 = p.handler.StoreMetricEvent(ctx, args.Me); err2 != nil {
  switch v := err2.(type) {
    case *InvalidExperimentRunException:
  result.IerEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeMetricEvent: " + err2.Error())
    oprot.WriteMessageBegin("storeMetricEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storeMetricEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetFilePath struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetFilePath) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetFilePathArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getFilePath", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetFilePathResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetFilePath(ctx, args.T, args.ExperimentRunId, args.Filename); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFilePath: " + err2.Error())
    oprot.WriteMessageBegin("getFilePath", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getFilePath", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreTransformEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreTransformEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreTransformEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeTransformEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreTransformEventResult{}
var retval *TransformEventResponse
  var err2 error
  if retval, err2 = p.handler.StoreTransformEvent(ctx, args.Te); err2 != nil {
  switch v := err2.(type) {
    case *InvalidExperimentRunException:
  result.IerEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeTransformEvent: " + err2.Error())
    oprot.WriteMessageBegin("storeTransformEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storeTransformEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreRandomSplitEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreRandomSplitEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreRandomSplitEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeRandomSplitEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreRandomSplitEventResult{}
var retval *RandomSplitEventResponse
  var err2 error
  if retval, err2 = p.handler.StoreRandomSplitEvent(ctx, args.Rse); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeRandomSplitEvent: " + err2.Error())
    oprot.WriteMessageBegin("storeRandomSplitEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storeRandomSplitEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStorePipelineEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStorePipelineEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStorePipelineEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storePipelineEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStorePipelineEventResult{}
var retval *PipelineEventResponse
  var err2 error
  if retval, err2 = p.handler.StorePipelineEvent(ctx, args.PipelineEvent); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storePipelineEvent: " + err2.Error())
    oprot.WriteMessageBegin("storePipelineEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storePipelineEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreCrossValidationEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreCrossValidationEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreCrossValidationEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeCrossValidationEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreCrossValidationEventResult{}
var retval *CrossValidationEventResponse
  var err2 error
  if retval, err2 = p.handler.StoreCrossValidationEvent(ctx, args.Cve); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeCrossValidationEvent: " + err2.Error())
    oprot.WriteMessageBegin("storeCrossValidationEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storeCrossValidationEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreGridSearchCrossValidationEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreGridSearchCrossValidationEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreGridSearchCrossValidationEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeGridSearchCrossValidationEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreGridSearchCrossValidationEventResult{}
var retval *GridSearchCrossValidationEventResponse
  var err2 error
  if retval, err2 = p.handler.StoreGridSearchCrossValidationEvent(ctx, args.Gscve); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeGridSearchCrossValidationEvent: " + err2.Error())
    oprot.WriteMessageBegin("storeGridSearchCrossValidationEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storeGridSearchCrossValidationEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreAnnotationEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreAnnotationEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreAnnotationEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeAnnotationEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreAnnotationEventResult{}
var retval *AnnotationEventResponse
  var err2 error
  if retval, err2 = p.handler.StoreAnnotationEvent(ctx, args.Ae); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeAnnotationEvent: " + err2.Error())
    oprot.WriteMessageBegin("storeAnnotationEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storeAnnotationEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreProjectEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreProjectEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreProjectEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeProjectEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreProjectEventResult{}
var retval *ProjectEventResponse
  var err2 error
  if retval, err2 = p.handler.StoreProjectEvent(ctx, args.Pr); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeProjectEvent: " + err2.Error())
    oprot.WriteMessageBegin("storeProjectEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storeProjectEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreExperimentEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreExperimentEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreExperimentEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeExperimentEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreExperimentEventResult{}
var retval *ExperimentEventResponse
  var err2 error
  if retval, err2 = p.handler.StoreExperimentEvent(ctx, args.Er); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeExperimentEvent: " + err2.Error())
    oprot.WriteMessageBegin("storeExperimentEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storeExperimentEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreExperimentRunEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreExperimentRunEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreExperimentRunEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeExperimentRunEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreExperimentRunEventResult{}
var retval *ExperimentRunEventResponse
  var err2 error
  if retval, err2 = p.handler.StoreExperimentRunEvent(ctx, args.Er); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeExperimentRunEvent: " + err2.Error())
    oprot.WriteMessageBegin("storeExperimentRunEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storeExperimentRunEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreLinearModel struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreLinearModel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreLinearModelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeLinearModel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreLinearModelResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.StoreLinearModel(ctx, args.ModelId, args.Model); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeLinearModel: " + err2.Error())
    oprot.WriteMessageBegin("storeLinearModel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("storeLinearModel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetDataFrameAncestry struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetDataFrameAncestry) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetDataFrameAncestryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getDataFrameAncestry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetDataFrameAncestryResult{}
var retval *DataFrameAncestry
  var err2 error
  if retval, err2 = p.handler.GetDataFrameAncestry(ctx, args.DataFrameId); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDataFrameAncestry: " + err2.Error())
    oprot.WriteMessageBegin("getDataFrameAncestry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getDataFrameAncestry", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetCommonAncestor struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetCommonAncestor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetCommonAncestorArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCommonAncestor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetCommonAncestorResult{}
var retval *CommonAncestor
  var err2 error
  if retval, err2 = p.handler.GetCommonAncestor(ctx, args.DfId1, args.DfId2); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCommonAncestor: " + err2.Error())
    oprot.WriteMessageBegin("getCommonAncestor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCommonAncestor", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetCommonAncestorForModels struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetCommonAncestorForModels) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetCommonAncestorForModelsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCommonAncestorForModels", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetCommonAncestorForModelsResult{}
var retval *CommonAncestor
  var err2 error
  if retval, err2 = p.handler.GetCommonAncestorForModels(ctx, args.ModelId1, args.ModelId2); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCommonAncestorForModels: " + err2.Error())
    oprot.WriteMessageBegin("getCommonAncestorForModels", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getCommonAncestorForModels", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetTrainingRowsCount struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetTrainingRowsCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetTrainingRowsCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTrainingRowsCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetTrainingRowsCountResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.GetTrainingRowsCount(ctx, args.ModelId); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTrainingRowsCount: " + err2.Error())
    oprot.WriteMessageBegin("getTrainingRowsCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getTrainingRowsCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetTrainingRowsCounts struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetTrainingRowsCounts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetTrainingRowsCountsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getTrainingRowsCounts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetTrainingRowsCountsResult{}
var retval []int32
  var err2 error
  if retval, err2 = p.handler.GetTrainingRowsCounts(ctx, args.ModelIds); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTrainingRowsCounts: " + err2.Error())
    oprot.WriteMessageBegin("getTrainingRowsCounts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getTrainingRowsCounts", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorCompareHyperparameters struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorCompareHyperparameters) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceCompareHyperparametersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("compareHyperparameters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceCompareHyperparametersResult{}
var retval *CompareHyperParametersResponse
  var err2 error
  if retval, err2 = p.handler.CompareHyperparameters(ctx, args.ModelId1, args.ModelId2); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compareHyperparameters: " + err2.Error())
    oprot.WriteMessageBegin("compareHyperparameters", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("compareHyperparameters", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorCompareFeatures struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorCompareFeatures) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceCompareFeaturesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("compareFeatures", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceCompareFeaturesResult{}
var retval *CompareFeaturesResponse
  var err2 error
  if retval, err2 = p.handler.CompareFeatures(ctx, args.ModelId1, args.ModelId2); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compareFeatures: " + err2.Error())
    oprot.WriteMessageBegin("compareFeatures", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("compareFeatures", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGroupByProblemType struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGroupByProblemType) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGroupByProblemTypeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("groupByProblemType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGroupByProblemTypeResult{}
var retval map[ProblemType][]int32
  var err2 error
  if retval, err2 = p.handler.GroupByProblemType(ctx, args.ModelIds); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing groupByProblemType: " + err2.Error())
    oprot.WriteMessageBegin("groupByProblemType", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("groupByProblemType", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorSimilarModels struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorSimilarModels) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceSimilarModelsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("similarModels", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceSimilarModelsResult{}
var retval []int32
  var err2 error
  if retval, err2 = p.handler.SimilarModels(ctx, args.ModelId, args.CompMetrics, args.NumModels); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *BadRequestException:
  result.BrEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing similarModels: " + err2.Error())
    oprot.WriteMessageBegin("similarModels", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("similarModels", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorLinearModelFeatureImportances struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorLinearModelFeatureImportances) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceLinearModelFeatureImportancesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("linearModelFeatureImportances", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceLinearModelFeatureImportancesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.LinearModelFeatureImportances(ctx, args.ModelId); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *IllegalOperationException:
  result.IoEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing linearModelFeatureImportances: " + err2.Error())
    oprot.WriteMessageBegin("linearModelFeatureImportances", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("linearModelFeatureImportances", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorCompareLinearModelFeatureImportances struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorCompareLinearModelFeatureImportances) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceCompareLinearModelFeatureImportancesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("compareLinearModelFeatureImportances", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceCompareLinearModelFeatureImportancesResult{}
var retval []*FeatureImportanceComparison
  var err2 error
  if retval, err2 = p.handler.CompareLinearModelFeatureImportances(ctx, args.Model1Id, args.Model2Id); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *IllegalOperationException:
  result.IoEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compareLinearModelFeatureImportances: " + err2.Error())
    oprot.WriteMessageBegin("compareLinearModelFeatureImportances", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("compareLinearModelFeatureImportances", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorIterationsUntilConvergence struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorIterationsUntilConvergence) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceIterationsUntilConvergenceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("iterationsUntilConvergence", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceIterationsUntilConvergenceResult{}
var retval []int32
  var err2 error
  if retval, err2 = p.handler.IterationsUntilConvergence(ctx, args.ModelIds, args.Tolerance); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing iterationsUntilConvergence: " + err2.Error())
    oprot.WriteMessageBegin("iterationsUntilConvergence", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("iterationsUntilConvergence", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorRankModels struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorRankModels) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceRankModelsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("rankModels", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceRankModelsResult{}
var retval []int32
  var err2 error
  if retval, err2 = p.handler.RankModels(ctx, args.ModelIds, args.Metric); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rankModels: " + err2.Error())
    oprot.WriteMessageBegin("rankModels", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("rankModels", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorConfidenceIntervals struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorConfidenceIntervals) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceConfidenceIntervalsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("confidenceIntervals", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceConfidenceIntervalsResult{}
var retval []*ConfidenceInterval
  var err2 error
  if retval, err2 = p.handler.ConfidenceIntervals(ctx, args.ModelId, args.SigLevel); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *IllegalOperationException:
  result.IoEx = v
    case *BadRequestException:
  result.BrEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing confidenceIntervals: " + err2.Error())
    oprot.WriteMessageBegin("confidenceIntervals", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("confidenceIntervals", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorModelsWithFeatures struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorModelsWithFeatures) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceModelsWithFeaturesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("modelsWithFeatures", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceModelsWithFeaturesResult{}
var retval []int32
  var err2 error
  if retval, err2 = p.handler.ModelsWithFeatures(ctx, args.FeatureNames); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing modelsWithFeatures: " + err2.Error())
    oprot.WriteMessageBegin("modelsWithFeatures", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("modelsWithFeatures", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorModelsDerivedFromDataFrame struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorModelsDerivedFromDataFrame) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceModelsDerivedFromDataFrameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("modelsDerivedFromDataFrame", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceModelsDerivedFromDataFrameResult{}
var retval []int32
  var err2 error
  if retval, err2 = p.handler.ModelsDerivedFromDataFrame(ctx, args.DfId); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing modelsDerivedFromDataFrame: " + err2.Error())
    oprot.WriteMessageBegin("modelsDerivedFromDataFrame", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("modelsDerivedFromDataFrame", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetProjectIds struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetProjectIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetProjectIdsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProjectIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetProjectIdsResult{}
var retval []int32
  var err2 error
  if retval, err2 = p.handler.GetProjectIds(ctx, args.KeyValuePairs); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProjectIds: " + err2.Error())
    oprot.WriteMessageBegin("getProjectIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getProjectIds", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetModelIds struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetModelIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetModelIdsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getModelIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetModelIdsResult{}
var retval []int32
  var err2 error
  if retval, err2 = p.handler.GetModelIds(ctx, args.KeyValuePairs); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getModelIds: " + err2.Error())
    oprot.WriteMessageBegin("getModelIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getModelIds", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorUpdateProject struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorUpdateProject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceUpdateProjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceUpdateProjectResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateProject(ctx, args.ProjectId, args.Key, args.Value); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProject: " + err2.Error())
    oprot.WriteMessageBegin("updateProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateProject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorCreateOrUpdateScalarField struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorCreateOrUpdateScalarField) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceCreateOrUpdateScalarFieldArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createOrUpdateScalarField", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceCreateOrUpdateScalarFieldResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CreateOrUpdateScalarField(ctx, args.ModelId, args.Key, args.Value, args.ValueType); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createOrUpdateScalarField: " + err2.Error())
    oprot.WriteMessageBegin("createOrUpdateScalarField", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("createOrUpdateScalarField", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorCreateVectorField struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorCreateVectorField) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceCreateVectorFieldArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createVectorField", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceCreateVectorFieldResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.CreateVectorField(ctx, args.ModelId, args.VectorName, args.VectorConfig); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createVectorField: " + err2.Error())
    oprot.WriteMessageBegin("createVectorField", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("createVectorField", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorUpdateVectorField struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorUpdateVectorField) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceUpdateVectorFieldArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateVectorField", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceUpdateVectorFieldResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.UpdateVectorField(ctx, args.ModelId, args.Key, args.ValueIndex, args.Value, args.ValueType); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateVectorField: " + err2.Error())
    oprot.WriteMessageBegin("updateVectorField", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("updateVectorField", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorAppendToVectorField struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorAppendToVectorField) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceAppendToVectorFieldArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("appendToVectorField", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceAppendToVectorFieldResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.AppendToVectorField(ctx, args.ModelId, args.VectorName, args.Value, args.ValueType); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing appendToVectorField: " + err2.Error())
    oprot.WriteMessageBegin("appendToVectorField", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("appendToVectorField", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetModel struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetModel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetModelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getModel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetModelResult{}
var retval *ModelResponse
  var err2 error
  if retval, err2 = p.handler.GetModel(ctx, args.ModelId); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getModel: " + err2.Error())
    oprot.WriteMessageBegin("getModel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getModel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetRunsInExperiment struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetRunsInExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetRunsInExperimentArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRunsInExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetRunsInExperimentResult{}
var retval []*ExperimentRun
  var err2 error
  if retval, err2 = p.handler.GetRunsInExperiment(ctx, args.ExperimentId); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRunsInExperiment: " + err2.Error())
    oprot.WriteMessageBegin("getRunsInExperiment", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRunsInExperiment", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetRunsAndExperimentsInProject struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetRunsAndExperimentsInProject) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetRunsAndExperimentsInProjectArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRunsAndExperimentsInProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetRunsAndExperimentsInProjectResult{}
var retval *ProjectExperimentsAndRuns
  var err2 error
  if retval, err2 = p.handler.GetRunsAndExperimentsInProject(ctx, args.ProjId); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRunsAndExperimentsInProject: " + err2.Error())
    oprot.WriteMessageBegin("getRunsAndExperimentsInProject", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRunsAndExperimentsInProject", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetProjectOverviews struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetProjectOverviews) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetProjectOverviewsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProjectOverviews", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetProjectOverviewsResult{}
var retval []*ProjectOverviewResponse
  var err2 error
  if retval, err2 = p.handler.GetProjectOverviews(ctx); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProjectOverviews: " + err2.Error())
    oprot.WriteMessageBegin("getProjectOverviews", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getProjectOverviews", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorGetExperimentRunDetails struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorGetExperimentRunDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceGetExperimentRunDetailsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getExperimentRunDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceGetExperimentRunDetailsResult{}
var retval *ExperimentRunDetailsResponse
  var err2 error
  if retval, err2 = p.handler.GetExperimentRunDetails(ctx, args.ExperimentRunId); err2 != nil {
  switch v := err2.(type) {
    case *ServerLogicException:
  result.SvEx = v
    case *ResourceNotFoundException:
  result.RnfEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExperimentRunDetails: " + err2.Error())
    oprot.WriteMessageBegin("getExperimentRunDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getExperimentRunDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorOriginalFeatures struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorOriginalFeatures) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceOriginalFeaturesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("originalFeatures", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceOriginalFeaturesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.OriginalFeatures(ctx, args.ModelId); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing originalFeatures: " + err2.Error())
    oprot.WriteMessageBegin("originalFeatures", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("originalFeatures", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStoreTreeModel struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStoreTreeModel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStoreTreeModelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storeTreeModel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStoreTreeModelResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.StoreTreeModel(ctx, args.ModelId, args.Model); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storeTreeModel: " + err2.Error())
    oprot.WriteMessageBegin("storeTreeModel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("storeTreeModel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorStorePipelineTransformEvent struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorStorePipelineTransformEvent) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceStorePipelineTransformEventArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("storePipelineTransformEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceStorePipelineTransformEventResult{}
var retval []*TransformEventResponse
  var err2 error
  if retval, err2 = p.handler.StorePipelineTransformEvent(ctx, args.Te); err2 != nil {
  switch v := err2.(type) {
    case *InvalidExperimentRunException:
  result.IerEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing storePipelineTransformEvent: " + err2.Error())
    oprot.WriteMessageBegin("storePipelineTransformEvent", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("storePipelineTransformEvent", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorComputeModelAncestry struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorComputeModelAncestry) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceComputeModelAncestryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("computeModelAncestry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceComputeModelAncestryResult{}
var retval *ModelAncestryResponse
  var err2 error
  if retval, err2 = p.handler.ComputeModelAncestry(ctx, args.ModelId); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing computeModelAncestry: " + err2.Error())
    oprot.WriteMessageBegin("computeModelAncestry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("computeModelAncestry", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type modelDBServiceProcessorExtractPipeline struct {
  handler ModelDBService
}

func (p *modelDBServiceProcessorExtractPipeline) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ModelDBServiceExtractPipelineArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("extractPipeline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ModelDBServiceExtractPipelineResult{}
var retval *ExtractedPipelineResponse
  var err2 error
  if retval, err2 = p.handler.ExtractPipeline(ctx, args.ModelId); err2 != nil {
  switch v := err2.(type) {
    case *ResourceNotFoundException:
  result.RnfEx = v
    case *ServerLogicException:
  result.SvEx = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing extractPipeline: " + err2.Error())
    oprot.WriteMessageBegin("extractPipeline", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("extractPipeline", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type ModelDBServiceTestConnectionArgs struct {
}

func NewModelDBServiceTestConnectionArgs() *ModelDBServiceTestConnectionArgs {
  return &ModelDBServiceTestConnectionArgs{}
}

func (p *ModelDBServiceTestConnectionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceTestConnectionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("testConnection_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceTestConnectionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceTestConnectionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ModelDBServiceTestConnectionResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewModelDBServiceTestConnectionResult() *ModelDBServiceTestConnectionResult {
  return &ModelDBServiceTestConnectionResult{}
}

var ModelDBServiceTestConnectionResult_Success_DEFAULT int32
func (p *ModelDBServiceTestConnectionResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ModelDBServiceTestConnectionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *ModelDBServiceTestConnectionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceTestConnectionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceTestConnectionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServiceTestConnectionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("testConnection_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceTestConnectionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceTestConnectionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceTestConnectionResult(%+v)", *p)
}

// Attributes:
//  - Df
//  - ExperimentRunId
type ModelDBServiceStoreDataFrameArgs struct {
  Df *DataFrame `thrift:"df,1" db:"df" json:"df"`
  ExperimentRunId int32 `thrift:"experimentRunId,2" db:"experimentRunId" json:"experimentRunId"`
}

func NewModelDBServiceStoreDataFrameArgs() *ModelDBServiceStoreDataFrameArgs {
  return &ModelDBServiceStoreDataFrameArgs{}
}

var ModelDBServiceStoreDataFrameArgs_Df_DEFAULT *DataFrame
func (p *ModelDBServiceStoreDataFrameArgs) GetDf() *DataFrame {
  if !p.IsSetDf() {
    return ModelDBServiceStoreDataFrameArgs_Df_DEFAULT
  }
return p.Df
}

func (p *ModelDBServiceStoreDataFrameArgs) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}
func (p *ModelDBServiceStoreDataFrameArgs) IsSetDf() bool {
  return p.Df != nil
}

func (p *ModelDBServiceStoreDataFrameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreDataFrameArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Df = &DataFrame{
  ID: -1,
}
  if err := p.Df.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Df), err)
  }
  return nil
}

func (p *ModelDBServiceStoreDataFrameArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *ModelDBServiceStoreDataFrameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeDataFrame_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreDataFrameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("df", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:df: ", p), err) }
  if err := p.Df.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Df), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:df: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreDataFrameArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:experimentRunId: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreDataFrameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreDataFrameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - IerEx
//  - SvEx
type ModelDBServiceStoreDataFrameResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  IerEx *InvalidExperimentRunException `thrift:"ierEx,1" db:"ierEx" json:"ierEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreDataFrameResult() *ModelDBServiceStoreDataFrameResult {
  return &ModelDBServiceStoreDataFrameResult{}
}

var ModelDBServiceStoreDataFrameResult_Success_DEFAULT int32
func (p *ModelDBServiceStoreDataFrameResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreDataFrameResult_Success_DEFAULT
  }
return *p.Success
}
var ModelDBServiceStoreDataFrameResult_IerEx_DEFAULT *InvalidExperimentRunException
func (p *ModelDBServiceStoreDataFrameResult) GetIerEx() *InvalidExperimentRunException {
  if !p.IsSetIerEx() {
    return ModelDBServiceStoreDataFrameResult_IerEx_DEFAULT
  }
return p.IerEx
}
var ModelDBServiceStoreDataFrameResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreDataFrameResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreDataFrameResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreDataFrameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreDataFrameResult) IsSetIerEx() bool {
  return p.IerEx != nil
}

func (p *ModelDBServiceStoreDataFrameResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreDataFrameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreDataFrameResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServiceStoreDataFrameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.IerEx = &InvalidExperimentRunException{}
  if err := p.IerEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IerEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreDataFrameResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreDataFrameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeDataFrame_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreDataFrameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreDataFrameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIerEx() {
    if err := oprot.WriteFieldBegin("ierEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ierEx: ", p), err) }
    if err := p.IerEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IerEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ierEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreDataFrameResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreDataFrameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreDataFrameResult(%+v)", *p)
}

// Attributes:
//  - TransformerId
type ModelDBServicePathForTransformerArgs struct {
  TransformerId int32 `thrift:"transformerId,1" db:"transformerId" json:"transformerId"`
}

func NewModelDBServicePathForTransformerArgs() *ModelDBServicePathForTransformerArgs {
  return &ModelDBServicePathForTransformerArgs{}
}


func (p *ModelDBServicePathForTransformerArgs) GetTransformerId() int32 {
  return p.TransformerId
}
func (p *ModelDBServicePathForTransformerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServicePathForTransformerArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TransformerId = v
}
  return nil
}

func (p *ModelDBServicePathForTransformerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("pathForTransformer_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServicePathForTransformerArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transformerId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transformerId: ", p), err) }
  if err := oprot.WriteI32(int32(p.TransformerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transformerId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transformerId: ", p), err) }
  return err
}

func (p *ModelDBServicePathForTransformerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServicePathForTransformerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - EfEx
//  - SvEx
type ModelDBServicePathForTransformerResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  EfEx *InvalidFieldException `thrift:"efEx,2" db:"efEx" json:"efEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,3" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServicePathForTransformerResult() *ModelDBServicePathForTransformerResult {
  return &ModelDBServicePathForTransformerResult{}
}

var ModelDBServicePathForTransformerResult_Success_DEFAULT string
func (p *ModelDBServicePathForTransformerResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ModelDBServicePathForTransformerResult_Success_DEFAULT
  }
return *p.Success
}
var ModelDBServicePathForTransformerResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServicePathForTransformerResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServicePathForTransformerResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServicePathForTransformerResult_EfEx_DEFAULT *InvalidFieldException
func (p *ModelDBServicePathForTransformerResult) GetEfEx() *InvalidFieldException {
  if !p.IsSetEfEx() {
    return ModelDBServicePathForTransformerResult_EfEx_DEFAULT
  }
return p.EfEx
}
var ModelDBServicePathForTransformerResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServicePathForTransformerResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServicePathForTransformerResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServicePathForTransformerResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServicePathForTransformerResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServicePathForTransformerResult) IsSetEfEx() bool {
  return p.EfEx != nil
}

func (p *ModelDBServicePathForTransformerResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServicePathForTransformerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServicePathForTransformerResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServicePathForTransformerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServicePathForTransformerResult)  ReadField2(iprot thrift.TProtocol) error {
  p.EfEx = &InvalidFieldException{}
  if err := p.EfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EfEx), err)
  }
  return nil
}

func (p *ModelDBServicePathForTransformerResult)  ReadField3(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServicePathForTransformerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("pathForTransformer_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServicePathForTransformerResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServicePathForTransformerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServicePathForTransformerResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetEfEx() {
    if err := oprot.WriteFieldBegin("efEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:efEx: ", p), err) }
    if err := p.EfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:efEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServicePathForTransformerResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServicePathForTransformerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServicePathForTransformerResult(%+v)", *p)
}

// Attributes:
//  - Fe
type ModelDBServiceStoreFitEventArgs struct {
  Fe *FitEvent `thrift:"fe,1" db:"fe" json:"fe"`
}

func NewModelDBServiceStoreFitEventArgs() *ModelDBServiceStoreFitEventArgs {
  return &ModelDBServiceStoreFitEventArgs{}
}

var ModelDBServiceStoreFitEventArgs_Fe_DEFAULT *FitEvent
func (p *ModelDBServiceStoreFitEventArgs) GetFe() *FitEvent {
  if !p.IsSetFe() {
    return ModelDBServiceStoreFitEventArgs_Fe_DEFAULT
  }
return p.Fe
}
func (p *ModelDBServiceStoreFitEventArgs) IsSetFe() bool {
  return p.Fe != nil
}

func (p *ModelDBServiceStoreFitEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreFitEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Fe = &FitEvent{
  ProblemType:   0,
}
  if err := p.Fe.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Fe), err)
  }
  return nil
}

func (p *ModelDBServiceStoreFitEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeFitEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreFitEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fe", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fe: ", p), err) }
  if err := p.Fe.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Fe), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fe: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreFitEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreFitEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - IerEx
//  - SvEx
type ModelDBServiceStoreFitEventResult struct {
  Success *FitEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  IerEx *InvalidExperimentRunException `thrift:"ierEx,1" db:"ierEx" json:"ierEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreFitEventResult() *ModelDBServiceStoreFitEventResult {
  return &ModelDBServiceStoreFitEventResult{}
}

var ModelDBServiceStoreFitEventResult_Success_DEFAULT *FitEventResponse
func (p *ModelDBServiceStoreFitEventResult) GetSuccess() *FitEventResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreFitEventResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceStoreFitEventResult_IerEx_DEFAULT *InvalidExperimentRunException
func (p *ModelDBServiceStoreFitEventResult) GetIerEx() *InvalidExperimentRunException {
  if !p.IsSetIerEx() {
    return ModelDBServiceStoreFitEventResult_IerEx_DEFAULT
  }
return p.IerEx
}
var ModelDBServiceStoreFitEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreFitEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreFitEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreFitEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreFitEventResult) IsSetIerEx() bool {
  return p.IerEx != nil
}

func (p *ModelDBServiceStoreFitEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreFitEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreFitEventResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FitEventResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceStoreFitEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.IerEx = &InvalidExperimentRunException{}
  if err := p.IerEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IerEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreFitEventResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreFitEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeFitEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreFitEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreFitEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIerEx() {
    if err := oprot.WriteFieldBegin("ierEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ierEx: ", p), err) }
    if err := p.IerEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IerEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ierEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreFitEventResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreFitEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreFitEventResult(%+v)", *p)
}

// Attributes:
//  - Me
type ModelDBServiceStoreMetricEventArgs struct {
  Me *MetricEvent `thrift:"me,1" db:"me" json:"me"`
}

func NewModelDBServiceStoreMetricEventArgs() *ModelDBServiceStoreMetricEventArgs {
  return &ModelDBServiceStoreMetricEventArgs{}
}

var ModelDBServiceStoreMetricEventArgs_Me_DEFAULT *MetricEvent
func (p *ModelDBServiceStoreMetricEventArgs) GetMe() *MetricEvent {
  if !p.IsSetMe() {
    return ModelDBServiceStoreMetricEventArgs_Me_DEFAULT
  }
return p.Me
}
func (p *ModelDBServiceStoreMetricEventArgs) IsSetMe() bool {
  return p.Me != nil
}

func (p *ModelDBServiceStoreMetricEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreMetricEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Me = &MetricEvent{}
  if err := p.Me.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Me), err)
  }
  return nil
}

func (p *ModelDBServiceStoreMetricEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeMetricEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreMetricEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("me", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:me: ", p), err) }
  if err := p.Me.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Me), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:me: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreMetricEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreMetricEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - IerEx
//  - SvEx
type ModelDBServiceStoreMetricEventResult struct {
  Success *MetricEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  IerEx *InvalidExperimentRunException `thrift:"ierEx,1" db:"ierEx" json:"ierEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreMetricEventResult() *ModelDBServiceStoreMetricEventResult {
  return &ModelDBServiceStoreMetricEventResult{}
}

var ModelDBServiceStoreMetricEventResult_Success_DEFAULT *MetricEventResponse
func (p *ModelDBServiceStoreMetricEventResult) GetSuccess() *MetricEventResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreMetricEventResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceStoreMetricEventResult_IerEx_DEFAULT *InvalidExperimentRunException
func (p *ModelDBServiceStoreMetricEventResult) GetIerEx() *InvalidExperimentRunException {
  if !p.IsSetIerEx() {
    return ModelDBServiceStoreMetricEventResult_IerEx_DEFAULT
  }
return p.IerEx
}
var ModelDBServiceStoreMetricEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreMetricEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreMetricEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreMetricEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreMetricEventResult) IsSetIerEx() bool {
  return p.IerEx != nil
}

func (p *ModelDBServiceStoreMetricEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreMetricEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreMetricEventResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &MetricEventResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceStoreMetricEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.IerEx = &InvalidExperimentRunException{}
  if err := p.IerEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IerEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreMetricEventResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreMetricEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeMetricEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreMetricEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreMetricEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIerEx() {
    if err := oprot.WriteFieldBegin("ierEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ierEx: ", p), err) }
    if err := p.IerEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IerEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ierEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreMetricEventResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreMetricEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreMetricEventResult(%+v)", *p)
}

// Attributes:
//  - T
//  - ExperimentRunId
//  - Filename
type ModelDBServiceGetFilePathArgs struct {
  T *Transformer `thrift:"t,1" db:"t" json:"t"`
  ExperimentRunId int32 `thrift:"experimentRunId,2" db:"experimentRunId" json:"experimentRunId"`
  Filename string `thrift:"filename,3" db:"filename" json:"filename"`
}

func NewModelDBServiceGetFilePathArgs() *ModelDBServiceGetFilePathArgs {
  return &ModelDBServiceGetFilePathArgs{}
}

var ModelDBServiceGetFilePathArgs_T_DEFAULT *Transformer
func (p *ModelDBServiceGetFilePathArgs) GetT() *Transformer {
  if !p.IsSetT() {
    return ModelDBServiceGetFilePathArgs_T_DEFAULT
  }
return p.T
}

func (p *ModelDBServiceGetFilePathArgs) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}

func (p *ModelDBServiceGetFilePathArgs) GetFilename() string {
  return p.Filename
}
func (p *ModelDBServiceGetFilePathArgs) IsSetT() bool {
  return p.T != nil
}

func (p *ModelDBServiceGetFilePathArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetFilePathArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.T = &Transformer{
  ID: -1,
}
  if err := p.T.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.T), err)
  }
  return nil
}

func (p *ModelDBServiceGetFilePathArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *ModelDBServiceGetFilePathArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Filename = v
}
  return nil
}

func (p *ModelDBServiceGetFilePathArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getFilePath_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetFilePathArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("t", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:t: ", p), err) }
  if err := p.T.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.T), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:t: ", p), err) }
  return err
}

func (p *ModelDBServiceGetFilePathArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:experimentRunId: ", p), err) }
  return err
}

func (p *ModelDBServiceGetFilePathArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("filename", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:filename: ", p), err) }
  if err := oprot.WriteString(string(p.Filename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filename (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:filename: ", p), err) }
  return err
}

func (p *ModelDBServiceGetFilePathArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetFilePathArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceGetFilePathResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetFilePathResult() *ModelDBServiceGetFilePathResult {
  return &ModelDBServiceGetFilePathResult{}
}

var ModelDBServiceGetFilePathResult_Success_DEFAULT string
func (p *ModelDBServiceGetFilePathResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return ModelDBServiceGetFilePathResult_Success_DEFAULT
  }
return *p.Success
}
var ModelDBServiceGetFilePathResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceGetFilePathResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceGetFilePathResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceGetFilePathResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetFilePathResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetFilePathResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetFilePathResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetFilePathResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceGetFilePathResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetFilePathResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetFilePathResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServiceGetFilePathResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetFilePathResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetFilePathResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getFilePath_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetFilePathResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetFilePathResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetFilePathResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetFilePathResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetFilePathResult(%+v)", *p)
}

// Attributes:
//  - Te
type ModelDBServiceStoreTransformEventArgs struct {
  Te *TransformEvent `thrift:"te,1" db:"te" json:"te"`
}

func NewModelDBServiceStoreTransformEventArgs() *ModelDBServiceStoreTransformEventArgs {
  return &ModelDBServiceStoreTransformEventArgs{}
}

var ModelDBServiceStoreTransformEventArgs_Te_DEFAULT *TransformEvent
func (p *ModelDBServiceStoreTransformEventArgs) GetTe() *TransformEvent {
  if !p.IsSetTe() {
    return ModelDBServiceStoreTransformEventArgs_Te_DEFAULT
  }
return p.Te
}
func (p *ModelDBServiceStoreTransformEventArgs) IsSetTe() bool {
  return p.Te != nil
}

func (p *ModelDBServiceStoreTransformEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreTransformEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Te = &TransformEvent{}
  if err := p.Te.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Te), err)
  }
  return nil
}

func (p *ModelDBServiceStoreTransformEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeTransformEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreTransformEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("te", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:te: ", p), err) }
  if err := p.Te.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Te), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:te: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreTransformEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreTransformEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - IerEx
//  - SvEx
type ModelDBServiceStoreTransformEventResult struct {
  Success *TransformEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  IerEx *InvalidExperimentRunException `thrift:"ierEx,1" db:"ierEx" json:"ierEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreTransformEventResult() *ModelDBServiceStoreTransformEventResult {
  return &ModelDBServiceStoreTransformEventResult{}
}

var ModelDBServiceStoreTransformEventResult_Success_DEFAULT *TransformEventResponse
func (p *ModelDBServiceStoreTransformEventResult) GetSuccess() *TransformEventResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreTransformEventResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceStoreTransformEventResult_IerEx_DEFAULT *InvalidExperimentRunException
func (p *ModelDBServiceStoreTransformEventResult) GetIerEx() *InvalidExperimentRunException {
  if !p.IsSetIerEx() {
    return ModelDBServiceStoreTransformEventResult_IerEx_DEFAULT
  }
return p.IerEx
}
var ModelDBServiceStoreTransformEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreTransformEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreTransformEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreTransformEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreTransformEventResult) IsSetIerEx() bool {
  return p.IerEx != nil
}

func (p *ModelDBServiceStoreTransformEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreTransformEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreTransformEventResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TransformEventResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceStoreTransformEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.IerEx = &InvalidExperimentRunException{}
  if err := p.IerEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IerEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreTransformEventResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreTransformEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeTransformEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreTransformEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreTransformEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIerEx() {
    if err := oprot.WriteFieldBegin("ierEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ierEx: ", p), err) }
    if err := p.IerEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IerEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ierEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreTransformEventResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreTransformEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreTransformEventResult(%+v)", *p)
}

// Attributes:
//  - Rse
type ModelDBServiceStoreRandomSplitEventArgs struct {
  Rse *RandomSplitEvent `thrift:"rse,1" db:"rse" json:"rse"`
}

func NewModelDBServiceStoreRandomSplitEventArgs() *ModelDBServiceStoreRandomSplitEventArgs {
  return &ModelDBServiceStoreRandomSplitEventArgs{}
}

var ModelDBServiceStoreRandomSplitEventArgs_Rse_DEFAULT *RandomSplitEvent
func (p *ModelDBServiceStoreRandomSplitEventArgs) GetRse() *RandomSplitEvent {
  if !p.IsSetRse() {
    return ModelDBServiceStoreRandomSplitEventArgs_Rse_DEFAULT
  }
return p.Rse
}
func (p *ModelDBServiceStoreRandomSplitEventArgs) IsSetRse() bool {
  return p.Rse != nil
}

func (p *ModelDBServiceStoreRandomSplitEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreRandomSplitEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Rse = &RandomSplitEvent{}
  if err := p.Rse.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Rse), err)
  }
  return nil
}

func (p *ModelDBServiceStoreRandomSplitEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeRandomSplitEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreRandomSplitEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("rse", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rse: ", p), err) }
  if err := p.Rse.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Rse), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rse: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreRandomSplitEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreRandomSplitEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceStoreRandomSplitEventResult struct {
  Success *RandomSplitEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreRandomSplitEventResult() *ModelDBServiceStoreRandomSplitEventResult {
  return &ModelDBServiceStoreRandomSplitEventResult{}
}

var ModelDBServiceStoreRandomSplitEventResult_Success_DEFAULT *RandomSplitEventResponse
func (p *ModelDBServiceStoreRandomSplitEventResult) GetSuccess() *RandomSplitEventResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreRandomSplitEventResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceStoreRandomSplitEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreRandomSplitEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreRandomSplitEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreRandomSplitEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreRandomSplitEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreRandomSplitEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreRandomSplitEventResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RandomSplitEventResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceStoreRandomSplitEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreRandomSplitEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeRandomSplitEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreRandomSplitEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreRandomSplitEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreRandomSplitEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreRandomSplitEventResult(%+v)", *p)
}

// Attributes:
//  - PipelineEvent
type ModelDBServiceStorePipelineEventArgs struct {
  PipelineEvent *PipelineEvent `thrift:"pipelineEvent,1" db:"pipelineEvent" json:"pipelineEvent"`
}

func NewModelDBServiceStorePipelineEventArgs() *ModelDBServiceStorePipelineEventArgs {
  return &ModelDBServiceStorePipelineEventArgs{}
}

var ModelDBServiceStorePipelineEventArgs_PipelineEvent_DEFAULT *PipelineEvent
func (p *ModelDBServiceStorePipelineEventArgs) GetPipelineEvent() *PipelineEvent {
  if !p.IsSetPipelineEvent() {
    return ModelDBServiceStorePipelineEventArgs_PipelineEvent_DEFAULT
  }
return p.PipelineEvent
}
func (p *ModelDBServiceStorePipelineEventArgs) IsSetPipelineEvent() bool {
  return p.PipelineEvent != nil
}

func (p *ModelDBServiceStorePipelineEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStorePipelineEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.PipelineEvent = &PipelineEvent{}
  if err := p.PipelineEvent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PipelineEvent), err)
  }
  return nil
}

func (p *ModelDBServiceStorePipelineEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storePipelineEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStorePipelineEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pipelineEvent", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pipelineEvent: ", p), err) }
  if err := p.PipelineEvent.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PipelineEvent), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pipelineEvent: ", p), err) }
  return err
}

func (p *ModelDBServiceStorePipelineEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStorePipelineEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceStorePipelineEventResult struct {
  Success *PipelineEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStorePipelineEventResult() *ModelDBServiceStorePipelineEventResult {
  return &ModelDBServiceStorePipelineEventResult{}
}

var ModelDBServiceStorePipelineEventResult_Success_DEFAULT *PipelineEventResponse
func (p *ModelDBServiceStorePipelineEventResult) GetSuccess() *PipelineEventResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceStorePipelineEventResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceStorePipelineEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStorePipelineEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStorePipelineEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStorePipelineEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStorePipelineEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStorePipelineEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStorePipelineEventResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PipelineEventResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceStorePipelineEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStorePipelineEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storePipelineEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStorePipelineEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStorePipelineEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStorePipelineEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStorePipelineEventResult(%+v)", *p)
}

// Attributes:
//  - Cve
type ModelDBServiceStoreCrossValidationEventArgs struct {
  Cve *CrossValidationEvent `thrift:"cve,1" db:"cve" json:"cve"`
}

func NewModelDBServiceStoreCrossValidationEventArgs() *ModelDBServiceStoreCrossValidationEventArgs {
  return &ModelDBServiceStoreCrossValidationEventArgs{}
}

var ModelDBServiceStoreCrossValidationEventArgs_Cve_DEFAULT *CrossValidationEvent
func (p *ModelDBServiceStoreCrossValidationEventArgs) GetCve() *CrossValidationEvent {
  if !p.IsSetCve() {
    return ModelDBServiceStoreCrossValidationEventArgs_Cve_DEFAULT
  }
return p.Cve
}
func (p *ModelDBServiceStoreCrossValidationEventArgs) IsSetCve() bool {
  return p.Cve != nil
}

func (p *ModelDBServiceStoreCrossValidationEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreCrossValidationEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Cve = &CrossValidationEvent{
  ProblemType:   0,
}
  if err := p.Cve.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cve), err)
  }
  return nil
}

func (p *ModelDBServiceStoreCrossValidationEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeCrossValidationEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreCrossValidationEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cve", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cve: ", p), err) }
  if err := p.Cve.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cve), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cve: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreCrossValidationEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreCrossValidationEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceStoreCrossValidationEventResult struct {
  Success *CrossValidationEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreCrossValidationEventResult() *ModelDBServiceStoreCrossValidationEventResult {
  return &ModelDBServiceStoreCrossValidationEventResult{}
}

var ModelDBServiceStoreCrossValidationEventResult_Success_DEFAULT *CrossValidationEventResponse
func (p *ModelDBServiceStoreCrossValidationEventResult) GetSuccess() *CrossValidationEventResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreCrossValidationEventResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceStoreCrossValidationEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreCrossValidationEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreCrossValidationEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreCrossValidationEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreCrossValidationEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreCrossValidationEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreCrossValidationEventResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CrossValidationEventResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceStoreCrossValidationEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreCrossValidationEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeCrossValidationEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreCrossValidationEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreCrossValidationEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreCrossValidationEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreCrossValidationEventResult(%+v)", *p)
}

// Attributes:
//  - Gscve
type ModelDBServiceStoreGridSearchCrossValidationEventArgs struct {
  Gscve *GridSearchCrossValidationEvent `thrift:"gscve,1" db:"gscve" json:"gscve"`
}

func NewModelDBServiceStoreGridSearchCrossValidationEventArgs() *ModelDBServiceStoreGridSearchCrossValidationEventArgs {
  return &ModelDBServiceStoreGridSearchCrossValidationEventArgs{}
}

var ModelDBServiceStoreGridSearchCrossValidationEventArgs_Gscve_DEFAULT *GridSearchCrossValidationEvent
func (p *ModelDBServiceStoreGridSearchCrossValidationEventArgs) GetGscve() *GridSearchCrossValidationEvent {
  if !p.IsSetGscve() {
    return ModelDBServiceStoreGridSearchCrossValidationEventArgs_Gscve_DEFAULT
  }
return p.Gscve
}
func (p *ModelDBServiceStoreGridSearchCrossValidationEventArgs) IsSetGscve() bool {
  return p.Gscve != nil
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Gscve = &GridSearchCrossValidationEvent{
  ProblemType:   0,
}
  if err := p.Gscve.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Gscve), err)
  }
  return nil
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeGridSearchCrossValidationEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gscve", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gscve: ", p), err) }
  if err := p.Gscve.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Gscve), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gscve: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreGridSearchCrossValidationEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceStoreGridSearchCrossValidationEventResult struct {
  Success *GridSearchCrossValidationEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreGridSearchCrossValidationEventResult() *ModelDBServiceStoreGridSearchCrossValidationEventResult {
  return &ModelDBServiceStoreGridSearchCrossValidationEventResult{}
}

var ModelDBServiceStoreGridSearchCrossValidationEventResult_Success_DEFAULT *GridSearchCrossValidationEventResponse
func (p *ModelDBServiceStoreGridSearchCrossValidationEventResult) GetSuccess() *GridSearchCrossValidationEventResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreGridSearchCrossValidationEventResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceStoreGridSearchCrossValidationEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreGridSearchCrossValidationEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreGridSearchCrossValidationEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreGridSearchCrossValidationEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GridSearchCrossValidationEventResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeGridSearchCrossValidationEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreGridSearchCrossValidationEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreGridSearchCrossValidationEventResult(%+v)", *p)
}

// Attributes:
//  - Ae
type ModelDBServiceStoreAnnotationEventArgs struct {
  Ae *AnnotationEvent `thrift:"ae,1" db:"ae" json:"ae"`
}

func NewModelDBServiceStoreAnnotationEventArgs() *ModelDBServiceStoreAnnotationEventArgs {
  return &ModelDBServiceStoreAnnotationEventArgs{}
}

var ModelDBServiceStoreAnnotationEventArgs_Ae_DEFAULT *AnnotationEvent
func (p *ModelDBServiceStoreAnnotationEventArgs) GetAe() *AnnotationEvent {
  if !p.IsSetAe() {
    return ModelDBServiceStoreAnnotationEventArgs_Ae_DEFAULT
  }
return p.Ae
}
func (p *ModelDBServiceStoreAnnotationEventArgs) IsSetAe() bool {
  return p.Ae != nil
}

func (p *ModelDBServiceStoreAnnotationEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreAnnotationEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Ae = &AnnotationEvent{}
  if err := p.Ae.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ae), err)
  }
  return nil
}

func (p *ModelDBServiceStoreAnnotationEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeAnnotationEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreAnnotationEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ae", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ae: ", p), err) }
  if err := p.Ae.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ae), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ae: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreAnnotationEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreAnnotationEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceStoreAnnotationEventResult struct {
  Success *AnnotationEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreAnnotationEventResult() *ModelDBServiceStoreAnnotationEventResult {
  return &ModelDBServiceStoreAnnotationEventResult{}
}

var ModelDBServiceStoreAnnotationEventResult_Success_DEFAULT *AnnotationEventResponse
func (p *ModelDBServiceStoreAnnotationEventResult) GetSuccess() *AnnotationEventResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreAnnotationEventResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceStoreAnnotationEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreAnnotationEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreAnnotationEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreAnnotationEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreAnnotationEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreAnnotationEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreAnnotationEventResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AnnotationEventResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceStoreAnnotationEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreAnnotationEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeAnnotationEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreAnnotationEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreAnnotationEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreAnnotationEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreAnnotationEventResult(%+v)", *p)
}

// Attributes:
//  - Pr
type ModelDBServiceStoreProjectEventArgs struct {
  Pr *ProjectEvent `thrift:"pr,1" db:"pr" json:"pr"`
}

func NewModelDBServiceStoreProjectEventArgs() *ModelDBServiceStoreProjectEventArgs {
  return &ModelDBServiceStoreProjectEventArgs{}
}

var ModelDBServiceStoreProjectEventArgs_Pr_DEFAULT *ProjectEvent
func (p *ModelDBServiceStoreProjectEventArgs) GetPr() *ProjectEvent {
  if !p.IsSetPr() {
    return ModelDBServiceStoreProjectEventArgs_Pr_DEFAULT
  }
return p.Pr
}
func (p *ModelDBServiceStoreProjectEventArgs) IsSetPr() bool {
  return p.Pr != nil
}

func (p *ModelDBServiceStoreProjectEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreProjectEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Pr = &ProjectEvent{}
  if err := p.Pr.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pr), err)
  }
  return nil
}

func (p *ModelDBServiceStoreProjectEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeProjectEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreProjectEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pr", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pr: ", p), err) }
  if err := p.Pr.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pr), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pr: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreProjectEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreProjectEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceStoreProjectEventResult struct {
  Success *ProjectEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreProjectEventResult() *ModelDBServiceStoreProjectEventResult {
  return &ModelDBServiceStoreProjectEventResult{}
}

var ModelDBServiceStoreProjectEventResult_Success_DEFAULT *ProjectEventResponse
func (p *ModelDBServiceStoreProjectEventResult) GetSuccess() *ProjectEventResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreProjectEventResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceStoreProjectEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreProjectEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreProjectEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreProjectEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreProjectEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreProjectEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreProjectEventResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ProjectEventResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceStoreProjectEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreProjectEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeProjectEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreProjectEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreProjectEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreProjectEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreProjectEventResult(%+v)", *p)
}

// Attributes:
//  - Er
type ModelDBServiceStoreExperimentEventArgs struct {
  Er *ExperimentEvent `thrift:"er,1" db:"er" json:"er"`
}

func NewModelDBServiceStoreExperimentEventArgs() *ModelDBServiceStoreExperimentEventArgs {
  return &ModelDBServiceStoreExperimentEventArgs{}
}

var ModelDBServiceStoreExperimentEventArgs_Er_DEFAULT *ExperimentEvent
func (p *ModelDBServiceStoreExperimentEventArgs) GetEr() *ExperimentEvent {
  if !p.IsSetEr() {
    return ModelDBServiceStoreExperimentEventArgs_Er_DEFAULT
  }
return p.Er
}
func (p *ModelDBServiceStoreExperimentEventArgs) IsSetEr() bool {
  return p.Er != nil
}

func (p *ModelDBServiceStoreExperimentEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreExperimentEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Er = &ExperimentEvent{}
  if err := p.Er.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Er), err)
  }
  return nil
}

func (p *ModelDBServiceStoreExperimentEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeExperimentEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreExperimentEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("er", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:er: ", p), err) }
  if err := p.Er.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Er), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:er: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreExperimentEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreExperimentEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceStoreExperimentEventResult struct {
  Success *ExperimentEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreExperimentEventResult() *ModelDBServiceStoreExperimentEventResult {
  return &ModelDBServiceStoreExperimentEventResult{}
}

var ModelDBServiceStoreExperimentEventResult_Success_DEFAULT *ExperimentEventResponse
func (p *ModelDBServiceStoreExperimentEventResult) GetSuccess() *ExperimentEventResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreExperimentEventResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceStoreExperimentEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreExperimentEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreExperimentEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreExperimentEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreExperimentEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreExperimentEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreExperimentEventResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ExperimentEventResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceStoreExperimentEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreExperimentEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeExperimentEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreExperimentEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreExperimentEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreExperimentEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreExperimentEventResult(%+v)", *p)
}

// Attributes:
//  - Er
type ModelDBServiceStoreExperimentRunEventArgs struct {
  Er *ExperimentRunEvent `thrift:"er,1" db:"er" json:"er"`
}

func NewModelDBServiceStoreExperimentRunEventArgs() *ModelDBServiceStoreExperimentRunEventArgs {
  return &ModelDBServiceStoreExperimentRunEventArgs{}
}

var ModelDBServiceStoreExperimentRunEventArgs_Er_DEFAULT *ExperimentRunEvent
func (p *ModelDBServiceStoreExperimentRunEventArgs) GetEr() *ExperimentRunEvent {
  if !p.IsSetEr() {
    return ModelDBServiceStoreExperimentRunEventArgs_Er_DEFAULT
  }
return p.Er
}
func (p *ModelDBServiceStoreExperimentRunEventArgs) IsSetEr() bool {
  return p.Er != nil
}

func (p *ModelDBServiceStoreExperimentRunEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreExperimentRunEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Er = &ExperimentRunEvent{}
  if err := p.Er.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Er), err)
  }
  return nil
}

func (p *ModelDBServiceStoreExperimentRunEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeExperimentRunEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreExperimentRunEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("er", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:er: ", p), err) }
  if err := p.Er.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Er), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:er: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreExperimentRunEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreExperimentRunEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceStoreExperimentRunEventResult struct {
  Success *ExperimentRunEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreExperimentRunEventResult() *ModelDBServiceStoreExperimentRunEventResult {
  return &ModelDBServiceStoreExperimentRunEventResult{}
}

var ModelDBServiceStoreExperimentRunEventResult_Success_DEFAULT *ExperimentRunEventResponse
func (p *ModelDBServiceStoreExperimentRunEventResult) GetSuccess() *ExperimentRunEventResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreExperimentRunEventResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceStoreExperimentRunEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreExperimentRunEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreExperimentRunEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreExperimentRunEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreExperimentRunEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreExperimentRunEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreExperimentRunEventResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ExperimentRunEventResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceStoreExperimentRunEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreExperimentRunEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeExperimentRunEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreExperimentRunEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreExperimentRunEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreExperimentRunEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreExperimentRunEventResult(%+v)", *p)
}

// Attributes:
//  - ModelId
//  - Model
type ModelDBServiceStoreLinearModelArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
  Model *LinearModel `thrift:"model,2" db:"model" json:"model"`
}

func NewModelDBServiceStoreLinearModelArgs() *ModelDBServiceStoreLinearModelArgs {
  return &ModelDBServiceStoreLinearModelArgs{}
}


func (p *ModelDBServiceStoreLinearModelArgs) GetModelId() int32 {
  return p.ModelId
}
var ModelDBServiceStoreLinearModelArgs_Model_DEFAULT *LinearModel
func (p *ModelDBServiceStoreLinearModelArgs) GetModel() *LinearModel {
  if !p.IsSetModel() {
    return ModelDBServiceStoreLinearModelArgs_Model_DEFAULT
  }
return p.Model
}
func (p *ModelDBServiceStoreLinearModelArgs) IsSetModel() bool {
  return p.Model != nil
}

func (p *ModelDBServiceStoreLinearModelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreLinearModelArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceStoreLinearModelArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Model = &LinearModel{}
  if err := p.Model.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Model), err)
  }
  return nil
}

func (p *ModelDBServiceStoreLinearModelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeLinearModel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreLinearModelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreLinearModelArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model: ", p), err) }
  if err := p.Model.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Model), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreLinearModelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreLinearModelArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceStoreLinearModelResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreLinearModelResult() *ModelDBServiceStoreLinearModelResult {
  return &ModelDBServiceStoreLinearModelResult{}
}

var ModelDBServiceStoreLinearModelResult_Success_DEFAULT bool
func (p *ModelDBServiceStoreLinearModelResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreLinearModelResult_Success_DEFAULT
  }
return *p.Success
}
var ModelDBServiceStoreLinearModelResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceStoreLinearModelResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceStoreLinearModelResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceStoreLinearModelResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreLinearModelResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreLinearModelResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreLinearModelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreLinearModelResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceStoreLinearModelResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreLinearModelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreLinearModelResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServiceStoreLinearModelResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreLinearModelResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreLinearModelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeLinearModel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreLinearModelResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreLinearModelResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreLinearModelResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreLinearModelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreLinearModelResult(%+v)", *p)
}

// Attributes:
//  - DataFrameId
type ModelDBServiceGetDataFrameAncestryArgs struct {
  DataFrameId int32 `thrift:"dataFrameId,1" db:"dataFrameId" json:"dataFrameId"`
}

func NewModelDBServiceGetDataFrameAncestryArgs() *ModelDBServiceGetDataFrameAncestryArgs {
  return &ModelDBServiceGetDataFrameAncestryArgs{}
}


func (p *ModelDBServiceGetDataFrameAncestryArgs) GetDataFrameId() int32 {
  return p.DataFrameId
}
func (p *ModelDBServiceGetDataFrameAncestryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetDataFrameAncestryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DataFrameId = v
}
  return nil
}

func (p *ModelDBServiceGetDataFrameAncestryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDataFrameAncestry_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetDataFrameAncestryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataFrameId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataFrameId: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataFrameId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataFrameId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataFrameId: ", p), err) }
  return err
}

func (p *ModelDBServiceGetDataFrameAncestryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetDataFrameAncestryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceGetDataFrameAncestryResult struct {
  Success *DataFrameAncestry `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetDataFrameAncestryResult() *ModelDBServiceGetDataFrameAncestryResult {
  return &ModelDBServiceGetDataFrameAncestryResult{}
}

var ModelDBServiceGetDataFrameAncestryResult_Success_DEFAULT *DataFrameAncestry
func (p *ModelDBServiceGetDataFrameAncestryResult) GetSuccess() *DataFrameAncestry {
  if !p.IsSetSuccess() {
    return ModelDBServiceGetDataFrameAncestryResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceGetDataFrameAncestryResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceGetDataFrameAncestryResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceGetDataFrameAncestryResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceGetDataFrameAncestryResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetDataFrameAncestryResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetDataFrameAncestryResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetDataFrameAncestryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetDataFrameAncestryResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceGetDataFrameAncestryResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetDataFrameAncestryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetDataFrameAncestryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DataFrameAncestry{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceGetDataFrameAncestryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetDataFrameAncestryResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetDataFrameAncestryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getDataFrameAncestry_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetDataFrameAncestryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetDataFrameAncestryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetDataFrameAncestryResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetDataFrameAncestryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetDataFrameAncestryResult(%+v)", *p)
}

// Attributes:
//  - DfId1
//  - DfId2
type ModelDBServiceGetCommonAncestorArgs struct {
  DfId1 int32 `thrift:"dfId1,1" db:"dfId1" json:"dfId1"`
  DfId2 int32 `thrift:"dfId2,2" db:"dfId2" json:"dfId2"`
}

func NewModelDBServiceGetCommonAncestorArgs() *ModelDBServiceGetCommonAncestorArgs {
  return &ModelDBServiceGetCommonAncestorArgs{}
}


func (p *ModelDBServiceGetCommonAncestorArgs) GetDfId1() int32 {
  return p.DfId1
}

func (p *ModelDBServiceGetCommonAncestorArgs) GetDfId2() int32 {
  return p.DfId2
}
func (p *ModelDBServiceGetCommonAncestorArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DfId1 = v
}
  return nil
}

func (p *ModelDBServiceGetCommonAncestorArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DfId2 = v
}
  return nil
}

func (p *ModelDBServiceGetCommonAncestorArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCommonAncestor_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dfId1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dfId1: ", p), err) }
  if err := oprot.WriteI32(int32(p.DfId1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dfId1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dfId1: ", p), err) }
  return err
}

func (p *ModelDBServiceGetCommonAncestorArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dfId2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dfId2: ", p), err) }
  if err := oprot.WriteI32(int32(p.DfId2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dfId2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dfId2: ", p), err) }
  return err
}

func (p *ModelDBServiceGetCommonAncestorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetCommonAncestorArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceGetCommonAncestorResult struct {
  Success *CommonAncestor `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetCommonAncestorResult() *ModelDBServiceGetCommonAncestorResult {
  return &ModelDBServiceGetCommonAncestorResult{}
}

var ModelDBServiceGetCommonAncestorResult_Success_DEFAULT *CommonAncestor
func (p *ModelDBServiceGetCommonAncestorResult) GetSuccess() *CommonAncestor {
  if !p.IsSetSuccess() {
    return ModelDBServiceGetCommonAncestorResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceGetCommonAncestorResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceGetCommonAncestorResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceGetCommonAncestorResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceGetCommonAncestorResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetCommonAncestorResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetCommonAncestorResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetCommonAncestorResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetCommonAncestorResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceGetCommonAncestorResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetCommonAncestorResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CommonAncestor{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCommonAncestor_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetCommonAncestorResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetCommonAncestorResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetCommonAncestorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetCommonAncestorResult(%+v)", *p)
}

// Attributes:
//  - ModelId1
//  - ModelId2
type ModelDBServiceGetCommonAncestorForModelsArgs struct {
  ModelId1 int32 `thrift:"modelId1,1" db:"modelId1" json:"modelId1"`
  ModelId2 int32 `thrift:"modelId2,2" db:"modelId2" json:"modelId2"`
}

func NewModelDBServiceGetCommonAncestorForModelsArgs() *ModelDBServiceGetCommonAncestorForModelsArgs {
  return &ModelDBServiceGetCommonAncestorForModelsArgs{}
}


func (p *ModelDBServiceGetCommonAncestorForModelsArgs) GetModelId1() int32 {
  return p.ModelId1
}

func (p *ModelDBServiceGetCommonAncestorForModelsArgs) GetModelId2() int32 {
  return p.ModelId2
}
func (p *ModelDBServiceGetCommonAncestorForModelsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId1 = v
}
  return nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ModelId2 = v
}
  return nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCommonAncestorForModels_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId1: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId1: ", p), err) }
  return err
}

func (p *ModelDBServiceGetCommonAncestorForModelsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:modelId2: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:modelId2: ", p), err) }
  return err
}

func (p *ModelDBServiceGetCommonAncestorForModelsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetCommonAncestorForModelsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceGetCommonAncestorForModelsResult struct {
  Success *CommonAncestor `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetCommonAncestorForModelsResult() *ModelDBServiceGetCommonAncestorForModelsResult {
  return &ModelDBServiceGetCommonAncestorForModelsResult{}
}

var ModelDBServiceGetCommonAncestorForModelsResult_Success_DEFAULT *CommonAncestor
func (p *ModelDBServiceGetCommonAncestorForModelsResult) GetSuccess() *CommonAncestor {
  if !p.IsSetSuccess() {
    return ModelDBServiceGetCommonAncestorForModelsResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceGetCommonAncestorForModelsResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceGetCommonAncestorForModelsResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceGetCommonAncestorForModelsResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceGetCommonAncestorForModelsResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetCommonAncestorForModelsResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetCommonAncestorForModelsResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetCommonAncestorForModelsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CommonAncestor{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCommonAncestorForModels_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetCommonAncestorForModelsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetCommonAncestorForModelsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetCommonAncestorForModelsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetCommonAncestorForModelsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetCommonAncestorForModelsResult(%+v)", *p)
}

// Attributes:
//  - ModelId
type ModelDBServiceGetTrainingRowsCountArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
}

func NewModelDBServiceGetTrainingRowsCountArgs() *ModelDBServiceGetTrainingRowsCountArgs {
  return &ModelDBServiceGetTrainingRowsCountArgs{}
}


func (p *ModelDBServiceGetTrainingRowsCountArgs) GetModelId() int32 {
  return p.ModelId
}
func (p *ModelDBServiceGetTrainingRowsCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTrainingRowsCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceGetTrainingRowsCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetTrainingRowsCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceGetTrainingRowsCountResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetTrainingRowsCountResult() *ModelDBServiceGetTrainingRowsCountResult {
  return &ModelDBServiceGetTrainingRowsCountResult{}
}

var ModelDBServiceGetTrainingRowsCountResult_Success_DEFAULT int32
func (p *ModelDBServiceGetTrainingRowsCountResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return ModelDBServiceGetTrainingRowsCountResult_Success_DEFAULT
  }
return *p.Success
}
var ModelDBServiceGetTrainingRowsCountResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceGetTrainingRowsCountResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceGetTrainingRowsCountResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceGetTrainingRowsCountResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetTrainingRowsCountResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetTrainingRowsCountResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetTrainingRowsCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetTrainingRowsCountResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceGetTrainingRowsCountResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetTrainingRowsCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTrainingRowsCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetTrainingRowsCountResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetTrainingRowsCountResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetTrainingRowsCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetTrainingRowsCountResult(%+v)", *p)
}

// Attributes:
//  - ModelIds
type ModelDBServiceGetTrainingRowsCountsArgs struct {
  ModelIds []int32 `thrift:"modelIds,1" db:"modelIds" json:"modelIds"`
}

func NewModelDBServiceGetTrainingRowsCountsArgs() *ModelDBServiceGetTrainingRowsCountsArgs {
  return &ModelDBServiceGetTrainingRowsCountsArgs{}
}


func (p *ModelDBServiceGetTrainingRowsCountsArgs) GetModelIds() []int32 {
  return p.ModelIds
}
func (p *ModelDBServiceGetTrainingRowsCountsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountsArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.ModelIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem154 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem154 = v
}
    p.ModelIds = append(p.ModelIds, _elem154)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTrainingRowsCounts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.ModelIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ModelIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelIds: ", p), err) }
  return err
}

func (p *ModelDBServiceGetTrainingRowsCountsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetTrainingRowsCountsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceGetTrainingRowsCountsResult struct {
  Success []int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetTrainingRowsCountsResult() *ModelDBServiceGetTrainingRowsCountsResult {
  return &ModelDBServiceGetTrainingRowsCountsResult{}
}

var ModelDBServiceGetTrainingRowsCountsResult_Success_DEFAULT []int32

func (p *ModelDBServiceGetTrainingRowsCountsResult) GetSuccess() []int32 {
  return p.Success
}
var ModelDBServiceGetTrainingRowsCountsResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetTrainingRowsCountsResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetTrainingRowsCountsResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetTrainingRowsCountsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetTrainingRowsCountsResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetTrainingRowsCountsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem155 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem155 = v
}
    p.Success = append(p.Success, _elem155)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getTrainingRowsCounts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetTrainingRowsCountsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetTrainingRowsCountsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetTrainingRowsCountsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetTrainingRowsCountsResult(%+v)", *p)
}

// Attributes:
//  - ModelId1
//  - ModelId2
type ModelDBServiceCompareHyperparametersArgs struct {
  ModelId1 int32 `thrift:"modelId1,1" db:"modelId1" json:"modelId1"`
  ModelId2 int32 `thrift:"modelId2,2" db:"modelId2" json:"modelId2"`
}

func NewModelDBServiceCompareHyperparametersArgs() *ModelDBServiceCompareHyperparametersArgs {
  return &ModelDBServiceCompareHyperparametersArgs{}
}


func (p *ModelDBServiceCompareHyperparametersArgs) GetModelId1() int32 {
  return p.ModelId1
}

func (p *ModelDBServiceCompareHyperparametersArgs) GetModelId2() int32 {
  return p.ModelId2
}
func (p *ModelDBServiceCompareHyperparametersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceCompareHyperparametersArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId1 = v
}
  return nil
}

func (p *ModelDBServiceCompareHyperparametersArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ModelId2 = v
}
  return nil
}

func (p *ModelDBServiceCompareHyperparametersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("compareHyperparameters_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceCompareHyperparametersArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId1: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId1: ", p), err) }
  return err
}

func (p *ModelDBServiceCompareHyperparametersArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:modelId2: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:modelId2: ", p), err) }
  return err
}

func (p *ModelDBServiceCompareHyperparametersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceCompareHyperparametersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceCompareHyperparametersResult struct {
  Success *CompareHyperParametersResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceCompareHyperparametersResult() *ModelDBServiceCompareHyperparametersResult {
  return &ModelDBServiceCompareHyperparametersResult{}
}

var ModelDBServiceCompareHyperparametersResult_Success_DEFAULT *CompareHyperParametersResponse
func (p *ModelDBServiceCompareHyperparametersResult) GetSuccess() *CompareHyperParametersResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceCompareHyperparametersResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceCompareHyperparametersResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceCompareHyperparametersResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceCompareHyperparametersResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceCompareHyperparametersResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceCompareHyperparametersResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceCompareHyperparametersResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceCompareHyperparametersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceCompareHyperparametersResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceCompareHyperparametersResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceCompareHyperparametersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceCompareHyperparametersResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CompareHyperParametersResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceCompareHyperparametersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceCompareHyperparametersResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceCompareHyperparametersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("compareHyperparameters_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceCompareHyperparametersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCompareHyperparametersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCompareHyperparametersResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCompareHyperparametersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceCompareHyperparametersResult(%+v)", *p)
}

// Attributes:
//  - ModelId1
//  - ModelId2
type ModelDBServiceCompareFeaturesArgs struct {
  ModelId1 int32 `thrift:"modelId1,1" db:"modelId1" json:"modelId1"`
  ModelId2 int32 `thrift:"modelId2,2" db:"modelId2" json:"modelId2"`
}

func NewModelDBServiceCompareFeaturesArgs() *ModelDBServiceCompareFeaturesArgs {
  return &ModelDBServiceCompareFeaturesArgs{}
}


func (p *ModelDBServiceCompareFeaturesArgs) GetModelId1() int32 {
  return p.ModelId1
}

func (p *ModelDBServiceCompareFeaturesArgs) GetModelId2() int32 {
  return p.ModelId2
}
func (p *ModelDBServiceCompareFeaturesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceCompareFeaturesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId1 = v
}
  return nil
}

func (p *ModelDBServiceCompareFeaturesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ModelId2 = v
}
  return nil
}

func (p *ModelDBServiceCompareFeaturesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("compareFeatures_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceCompareFeaturesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId1", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId1: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId1: ", p), err) }
  return err
}

func (p *ModelDBServiceCompareFeaturesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:modelId2: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:modelId2: ", p), err) }
  return err
}

func (p *ModelDBServiceCompareFeaturesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceCompareFeaturesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceCompareFeaturesResult struct {
  Success *CompareFeaturesResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceCompareFeaturesResult() *ModelDBServiceCompareFeaturesResult {
  return &ModelDBServiceCompareFeaturesResult{}
}

var ModelDBServiceCompareFeaturesResult_Success_DEFAULT *CompareFeaturesResponse
func (p *ModelDBServiceCompareFeaturesResult) GetSuccess() *CompareFeaturesResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceCompareFeaturesResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceCompareFeaturesResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceCompareFeaturesResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceCompareFeaturesResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceCompareFeaturesResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceCompareFeaturesResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceCompareFeaturesResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceCompareFeaturesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceCompareFeaturesResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceCompareFeaturesResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceCompareFeaturesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceCompareFeaturesResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CompareFeaturesResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceCompareFeaturesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceCompareFeaturesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceCompareFeaturesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("compareFeatures_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceCompareFeaturesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCompareFeaturesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCompareFeaturesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCompareFeaturesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceCompareFeaturesResult(%+v)", *p)
}

// Attributes:
//  - ModelIds
type ModelDBServiceGroupByProblemTypeArgs struct {
  ModelIds []int32 `thrift:"modelIds,1" db:"modelIds" json:"modelIds"`
}

func NewModelDBServiceGroupByProblemTypeArgs() *ModelDBServiceGroupByProblemTypeArgs {
  return &ModelDBServiceGroupByProblemTypeArgs{}
}


func (p *ModelDBServiceGroupByProblemTypeArgs) GetModelIds() []int32 {
  return p.ModelIds
}
func (p *ModelDBServiceGroupByProblemTypeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGroupByProblemTypeArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.ModelIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem156 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem156 = v
}
    p.ModelIds = append(p.ModelIds, _elem156)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceGroupByProblemTypeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("groupByProblemType_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGroupByProblemTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.ModelIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ModelIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelIds: ", p), err) }
  return err
}

func (p *ModelDBServiceGroupByProblemTypeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGroupByProblemTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceGroupByProblemTypeResult struct {
  Success map[ProblemType][]int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGroupByProblemTypeResult() *ModelDBServiceGroupByProblemTypeResult {
  return &ModelDBServiceGroupByProblemTypeResult{}
}

var ModelDBServiceGroupByProblemTypeResult_Success_DEFAULT map[ProblemType][]int32

func (p *ModelDBServiceGroupByProblemTypeResult) GetSuccess() map[ProblemType][]int32 {
  return p.Success
}
var ModelDBServiceGroupByProblemTypeResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGroupByProblemTypeResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGroupByProblemTypeResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGroupByProblemTypeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGroupByProblemTypeResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGroupByProblemTypeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGroupByProblemTypeResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[ProblemType][]int32, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key157 ProblemType
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ProblemType(v)
    _key157 = temp
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]int32, 0, size)
    _val158 :=  tSlice
    for i := 0; i < size; i ++ {
var _elem159 int32
      if v, err := iprot.ReadI32(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
} else {
      _elem159 = v
}
      _val158 = append(_val158, _elem159)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Success[_key157] = _val158
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ModelDBServiceGroupByProblemTypeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGroupByProblemTypeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("groupByProblemType_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGroupByProblemTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(thrift.I32, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := oprot.WriteI32(int32(v)); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGroupByProblemTypeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGroupByProblemTypeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGroupByProblemTypeResult(%+v)", *p)
}

// Attributes:
//  - ModelId
//  - CompMetrics
//  - NumModels
type ModelDBServiceSimilarModelsArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
  CompMetrics []ModelCompMetric `thrift:"compMetrics,2" db:"compMetrics" json:"compMetrics"`
  NumModels int32 `thrift:"numModels,3" db:"numModels" json:"numModels"`
}

func NewModelDBServiceSimilarModelsArgs() *ModelDBServiceSimilarModelsArgs {
  return &ModelDBServiceSimilarModelsArgs{}
}


func (p *ModelDBServiceSimilarModelsArgs) GetModelId() int32 {
  return p.ModelId
}

func (p *ModelDBServiceSimilarModelsArgs) GetCompMetrics() []ModelCompMetric {
  return p.CompMetrics
}

func (p *ModelDBServiceSimilarModelsArgs) GetNumModels() int32 {
  return p.NumModels
}
func (p *ModelDBServiceSimilarModelsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceSimilarModelsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceSimilarModelsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]ModelCompMetric, 0, size)
  p.CompMetrics =  tSlice
  for i := 0; i < size; i ++ {
var _elem160 ModelCompMetric
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ModelCompMetric(v)
    _elem160 = temp
}
    p.CompMetrics = append(p.CompMetrics, _elem160)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceSimilarModelsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumModels = v
}
  return nil
}

func (p *ModelDBServiceSimilarModelsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("similarModels_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceSimilarModelsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceSimilarModelsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("compMetrics", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:compMetrics: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.CompMetrics)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.CompMetrics {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:compMetrics: ", p), err) }
  return err
}

func (p *ModelDBServiceSimilarModelsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("numModels", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:numModels: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumModels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.numModels (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:numModels: ", p), err) }
  return err
}

func (p *ModelDBServiceSimilarModelsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceSimilarModelsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - BrEx
//  - SvEx
type ModelDBServiceSimilarModelsResult struct {
  Success []int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  BrEx *BadRequestException `thrift:"brEx,2" db:"brEx" json:"brEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,3" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceSimilarModelsResult() *ModelDBServiceSimilarModelsResult {
  return &ModelDBServiceSimilarModelsResult{}
}

var ModelDBServiceSimilarModelsResult_Success_DEFAULT []int32

func (p *ModelDBServiceSimilarModelsResult) GetSuccess() []int32 {
  return p.Success
}
var ModelDBServiceSimilarModelsResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceSimilarModelsResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceSimilarModelsResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceSimilarModelsResult_BrEx_DEFAULT *BadRequestException
func (p *ModelDBServiceSimilarModelsResult) GetBrEx() *BadRequestException {
  if !p.IsSetBrEx() {
    return ModelDBServiceSimilarModelsResult_BrEx_DEFAULT
  }
return p.BrEx
}
var ModelDBServiceSimilarModelsResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceSimilarModelsResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceSimilarModelsResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceSimilarModelsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceSimilarModelsResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceSimilarModelsResult) IsSetBrEx() bool {
  return p.BrEx != nil
}

func (p *ModelDBServiceSimilarModelsResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceSimilarModelsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceSimilarModelsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem161 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem161 = v
}
    p.Success = append(p.Success, _elem161)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceSimilarModelsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceSimilarModelsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.BrEx = &BadRequestException{}
  if err := p.BrEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BrEx), err)
  }
  return nil
}

func (p *ModelDBServiceSimilarModelsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceSimilarModelsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("similarModels_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceSimilarModelsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceSimilarModelsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceSimilarModelsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetBrEx() {
    if err := oprot.WriteFieldBegin("brEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:brEx: ", p), err) }
    if err := p.BrEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BrEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:brEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceSimilarModelsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceSimilarModelsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceSimilarModelsResult(%+v)", *p)
}

// Attributes:
//  - ModelId
type ModelDBServiceLinearModelFeatureImportancesArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
}

func NewModelDBServiceLinearModelFeatureImportancesArgs() *ModelDBServiceLinearModelFeatureImportancesArgs {
  return &ModelDBServiceLinearModelFeatureImportancesArgs{}
}


func (p *ModelDBServiceLinearModelFeatureImportancesArgs) GetModelId() int32 {
  return p.ModelId
}
func (p *ModelDBServiceLinearModelFeatureImportancesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("linearModelFeatureImportances_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceLinearModelFeatureImportancesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceLinearModelFeatureImportancesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - IoEx
//  - SvEx
type ModelDBServiceLinearModelFeatureImportancesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  IoEx *IllegalOperationException `thrift:"ioEx,2" db:"ioEx" json:"ioEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,3" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceLinearModelFeatureImportancesResult() *ModelDBServiceLinearModelFeatureImportancesResult {
  return &ModelDBServiceLinearModelFeatureImportancesResult{}
}

var ModelDBServiceLinearModelFeatureImportancesResult_Success_DEFAULT []string

func (p *ModelDBServiceLinearModelFeatureImportancesResult) GetSuccess() []string {
  return p.Success
}
var ModelDBServiceLinearModelFeatureImportancesResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceLinearModelFeatureImportancesResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceLinearModelFeatureImportancesResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceLinearModelFeatureImportancesResult_IoEx_DEFAULT *IllegalOperationException
func (p *ModelDBServiceLinearModelFeatureImportancesResult) GetIoEx() *IllegalOperationException {
  if !p.IsSetIoEx() {
    return ModelDBServiceLinearModelFeatureImportancesResult_IoEx_DEFAULT
  }
return p.IoEx
}
var ModelDBServiceLinearModelFeatureImportancesResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceLinearModelFeatureImportancesResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceLinearModelFeatureImportancesResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceLinearModelFeatureImportancesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult) IsSetIoEx() bool {
  return p.IoEx != nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem162 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem162 = v
}
    p.Success = append(p.Success, _elem162)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.IoEx = &IllegalOperationException{}
  if err := p.IoEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IoEx), err)
  }
  return nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("linearModelFeatureImportances_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIoEx() {
    if err := oprot.WriteFieldBegin("ioEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioEx: ", p), err) }
    if err := p.IoEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IoEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceLinearModelFeatureImportancesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceLinearModelFeatureImportancesResult(%+v)", *p)
}

// Attributes:
//  - Model1Id
//  - Model2Id
type ModelDBServiceCompareLinearModelFeatureImportancesArgs struct {
  Model1Id int32 `thrift:"model1Id,1" db:"model1Id" json:"model1Id"`
  Model2Id int32 `thrift:"model2Id,2" db:"model2Id" json:"model2Id"`
}

func NewModelDBServiceCompareLinearModelFeatureImportancesArgs() *ModelDBServiceCompareLinearModelFeatureImportancesArgs {
  return &ModelDBServiceCompareLinearModelFeatureImportancesArgs{}
}


func (p *ModelDBServiceCompareLinearModelFeatureImportancesArgs) GetModel1Id() int32 {
  return p.Model1Id
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesArgs) GetModel2Id() int32 {
  return p.Model2Id
}
func (p *ModelDBServiceCompareLinearModelFeatureImportancesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Model1Id = v
}
  return nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Model2Id = v
}
  return nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("compareLinearModelFeatureImportances_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model1Id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:model1Id: ", p), err) }
  if err := oprot.WriteI32(int32(p.Model1Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model1Id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:model1Id: ", p), err) }
  return err
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model2Id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model2Id: ", p), err) }
  if err := oprot.WriteI32(int32(p.Model2Id)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model2Id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model2Id: ", p), err) }
  return err
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceCompareLinearModelFeatureImportancesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - IoEx
//  - SvEx
type ModelDBServiceCompareLinearModelFeatureImportancesResult struct {
  Success []*FeatureImportanceComparison `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  IoEx *IllegalOperationException `thrift:"ioEx,2" db:"ioEx" json:"ioEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,3" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceCompareLinearModelFeatureImportancesResult() *ModelDBServiceCompareLinearModelFeatureImportancesResult {
  return &ModelDBServiceCompareLinearModelFeatureImportancesResult{}
}

var ModelDBServiceCompareLinearModelFeatureImportancesResult_Success_DEFAULT []*FeatureImportanceComparison

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) GetSuccess() []*FeatureImportanceComparison {
  return p.Success
}
var ModelDBServiceCompareLinearModelFeatureImportancesResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceCompareLinearModelFeatureImportancesResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceCompareLinearModelFeatureImportancesResult_IoEx_DEFAULT *IllegalOperationException
func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) GetIoEx() *IllegalOperationException {
  if !p.IsSetIoEx() {
    return ModelDBServiceCompareLinearModelFeatureImportancesResult_IoEx_DEFAULT
  }
return p.IoEx
}
var ModelDBServiceCompareLinearModelFeatureImportancesResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceCompareLinearModelFeatureImportancesResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) IsSetIoEx() bool {
  return p.IoEx != nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FeatureImportanceComparison, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem163 := &FeatureImportanceComparison{}
    if err := _elem163.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem163), err)
    }
    p.Success = append(p.Success, _elem163)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.IoEx = &IllegalOperationException{}
  if err := p.IoEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IoEx), err)
  }
  return nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult)  ReadField3(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("compareLinearModelFeatureImportances_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIoEx() {
    if err := oprot.WriteFieldBegin("ioEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioEx: ", p), err) }
    if err := p.IoEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IoEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCompareLinearModelFeatureImportancesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceCompareLinearModelFeatureImportancesResult(%+v)", *p)
}

// Attributes:
//  - ModelIds
//  - Tolerance
type ModelDBServiceIterationsUntilConvergenceArgs struct {
  ModelIds []int32 `thrift:"modelIds,1" db:"modelIds" json:"modelIds"`
  Tolerance float64 `thrift:"tolerance,2" db:"tolerance" json:"tolerance"`
}

func NewModelDBServiceIterationsUntilConvergenceArgs() *ModelDBServiceIterationsUntilConvergenceArgs {
  return &ModelDBServiceIterationsUntilConvergenceArgs{}
}


func (p *ModelDBServiceIterationsUntilConvergenceArgs) GetModelIds() []int32 {
  return p.ModelIds
}

func (p *ModelDBServiceIterationsUntilConvergenceArgs) GetTolerance() float64 {
  return p.Tolerance
}
func (p *ModelDBServiceIterationsUntilConvergenceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceIterationsUntilConvergenceArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.ModelIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem164 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem164 = v
}
    p.ModelIds = append(p.ModelIds, _elem164)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceIterationsUntilConvergenceArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tolerance = v
}
  return nil
}

func (p *ModelDBServiceIterationsUntilConvergenceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("iterationsUntilConvergence_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceIterationsUntilConvergenceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.ModelIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ModelIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelIds: ", p), err) }
  return err
}

func (p *ModelDBServiceIterationsUntilConvergenceArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tolerance", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tolerance: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Tolerance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tolerance (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tolerance: ", p), err) }
  return err
}

func (p *ModelDBServiceIterationsUntilConvergenceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceIterationsUntilConvergenceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceIterationsUntilConvergenceResult struct {
  Success []int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceIterationsUntilConvergenceResult() *ModelDBServiceIterationsUntilConvergenceResult {
  return &ModelDBServiceIterationsUntilConvergenceResult{}
}

var ModelDBServiceIterationsUntilConvergenceResult_Success_DEFAULT []int32

func (p *ModelDBServiceIterationsUntilConvergenceResult) GetSuccess() []int32 {
  return p.Success
}
var ModelDBServiceIterationsUntilConvergenceResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceIterationsUntilConvergenceResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceIterationsUntilConvergenceResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceIterationsUntilConvergenceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceIterationsUntilConvergenceResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceIterationsUntilConvergenceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceIterationsUntilConvergenceResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem165 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem165 = v
}
    p.Success = append(p.Success, _elem165)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceIterationsUntilConvergenceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceIterationsUntilConvergenceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("iterationsUntilConvergence_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceIterationsUntilConvergenceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceIterationsUntilConvergenceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceIterationsUntilConvergenceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceIterationsUntilConvergenceResult(%+v)", *p)
}

// Attributes:
//  - ModelIds
//  - Metric
type ModelDBServiceRankModelsArgs struct {
  ModelIds []int32 `thrift:"modelIds,1" db:"modelIds" json:"modelIds"`
  Metric ModelRankMetric `thrift:"metric,2" db:"metric" json:"metric"`
}

func NewModelDBServiceRankModelsArgs() *ModelDBServiceRankModelsArgs {
  return &ModelDBServiceRankModelsArgs{}
}


func (p *ModelDBServiceRankModelsArgs) GetModelIds() []int32 {
  return p.ModelIds
}

func (p *ModelDBServiceRankModelsArgs) GetMetric() ModelRankMetric {
  return p.Metric
}
func (p *ModelDBServiceRankModelsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceRankModelsArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.ModelIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem166 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem166 = v
}
    p.ModelIds = append(p.ModelIds, _elem166)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceRankModelsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ModelRankMetric(v)
  p.Metric = temp
}
  return nil
}

func (p *ModelDBServiceRankModelsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rankModels_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceRankModelsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.ModelIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ModelIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelIds: ", p), err) }
  return err
}

func (p *ModelDBServiceRankModelsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metric", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metric: ", p), err) }
  if err := oprot.WriteI32(int32(p.Metric)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metric (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metric: ", p), err) }
  return err
}

func (p *ModelDBServiceRankModelsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceRankModelsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceRankModelsResult struct {
  Success []int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceRankModelsResult() *ModelDBServiceRankModelsResult {
  return &ModelDBServiceRankModelsResult{}
}

var ModelDBServiceRankModelsResult_Success_DEFAULT []int32

func (p *ModelDBServiceRankModelsResult) GetSuccess() []int32 {
  return p.Success
}
var ModelDBServiceRankModelsResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceRankModelsResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceRankModelsResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceRankModelsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceRankModelsResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceRankModelsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceRankModelsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem167 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem167 = v
}
    p.Success = append(p.Success, _elem167)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceRankModelsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceRankModelsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rankModels_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceRankModelsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceRankModelsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceRankModelsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceRankModelsResult(%+v)", *p)
}

// Attributes:
//  - ModelId
//  - SigLevel
type ModelDBServiceConfidenceIntervalsArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
  SigLevel float64 `thrift:"sigLevel,2" db:"sigLevel" json:"sigLevel"`
}

func NewModelDBServiceConfidenceIntervalsArgs() *ModelDBServiceConfidenceIntervalsArgs {
  return &ModelDBServiceConfidenceIntervalsArgs{}
}


func (p *ModelDBServiceConfidenceIntervalsArgs) GetModelId() int32 {
  return p.ModelId
}

func (p *ModelDBServiceConfidenceIntervalsArgs) GetSigLevel() float64 {
  return p.SigLevel
}
func (p *ModelDBServiceConfidenceIntervalsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceConfidenceIntervalsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceConfidenceIntervalsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SigLevel = v
}
  return nil
}

func (p *ModelDBServiceConfidenceIntervalsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("confidenceIntervals_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceConfidenceIntervalsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceConfidenceIntervalsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sigLevel", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sigLevel: ", p), err) }
  if err := oprot.WriteDouble(float64(p.SigLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sigLevel (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sigLevel: ", p), err) }
  return err
}

func (p *ModelDBServiceConfidenceIntervalsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceConfidenceIntervalsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - IoEx
//  - BrEx
//  - SvEx
type ModelDBServiceConfidenceIntervalsResult struct {
  Success []*ConfidenceInterval `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  IoEx *IllegalOperationException `thrift:"ioEx,2" db:"ioEx" json:"ioEx,omitempty"`
  BrEx *BadRequestException `thrift:"brEx,3" db:"brEx" json:"brEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,4" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceConfidenceIntervalsResult() *ModelDBServiceConfidenceIntervalsResult {
  return &ModelDBServiceConfidenceIntervalsResult{}
}

var ModelDBServiceConfidenceIntervalsResult_Success_DEFAULT []*ConfidenceInterval

func (p *ModelDBServiceConfidenceIntervalsResult) GetSuccess() []*ConfidenceInterval {
  return p.Success
}
var ModelDBServiceConfidenceIntervalsResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceConfidenceIntervalsResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceConfidenceIntervalsResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceConfidenceIntervalsResult_IoEx_DEFAULT *IllegalOperationException
func (p *ModelDBServiceConfidenceIntervalsResult) GetIoEx() *IllegalOperationException {
  if !p.IsSetIoEx() {
    return ModelDBServiceConfidenceIntervalsResult_IoEx_DEFAULT
  }
return p.IoEx
}
var ModelDBServiceConfidenceIntervalsResult_BrEx_DEFAULT *BadRequestException
func (p *ModelDBServiceConfidenceIntervalsResult) GetBrEx() *BadRequestException {
  if !p.IsSetBrEx() {
    return ModelDBServiceConfidenceIntervalsResult_BrEx_DEFAULT
  }
return p.BrEx
}
var ModelDBServiceConfidenceIntervalsResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceConfidenceIntervalsResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceConfidenceIntervalsResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceConfidenceIntervalsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceConfidenceIntervalsResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceConfidenceIntervalsResult) IsSetIoEx() bool {
  return p.IoEx != nil
}

func (p *ModelDBServiceConfidenceIntervalsResult) IsSetBrEx() bool {
  return p.BrEx != nil
}

func (p *ModelDBServiceConfidenceIntervalsResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceConfidenceIntervalsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceConfidenceIntervalsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfidenceInterval, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem168 := &ConfidenceInterval{}
    if err := _elem168.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem168), err)
    }
    p.Success = append(p.Success, _elem168)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceConfidenceIntervalsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceConfidenceIntervalsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.IoEx = &IllegalOperationException{}
  if err := p.IoEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IoEx), err)
  }
  return nil
}

func (p *ModelDBServiceConfidenceIntervalsResult)  ReadField3(iprot thrift.TProtocol) error {
  p.BrEx = &BadRequestException{}
  if err := p.BrEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BrEx), err)
  }
  return nil
}

func (p *ModelDBServiceConfidenceIntervalsResult)  ReadField4(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceConfidenceIntervalsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("confidenceIntervals_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceConfidenceIntervalsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceConfidenceIntervalsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceConfidenceIntervalsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIoEx() {
    if err := oprot.WriteFieldBegin("ioEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ioEx: ", p), err) }
    if err := p.IoEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IoEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ioEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceConfidenceIntervalsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetBrEx() {
    if err := oprot.WriteFieldBegin("brEx", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:brEx: ", p), err) }
    if err := p.BrEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BrEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:brEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceConfidenceIntervalsResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceConfidenceIntervalsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceConfidenceIntervalsResult(%+v)", *p)
}

// Attributes:
//  - FeatureNames
type ModelDBServiceModelsWithFeaturesArgs struct {
  FeatureNames []string `thrift:"featureNames,1" db:"featureNames" json:"featureNames"`
}

func NewModelDBServiceModelsWithFeaturesArgs() *ModelDBServiceModelsWithFeaturesArgs {
  return &ModelDBServiceModelsWithFeaturesArgs{}
}


func (p *ModelDBServiceModelsWithFeaturesArgs) GetFeatureNames() []string {
  return p.FeatureNames
}
func (p *ModelDBServiceModelsWithFeaturesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceModelsWithFeaturesArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.FeatureNames =  tSlice
  for i := 0; i < size; i ++ {
var _elem169 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem169 = v
}
    p.FeatureNames = append(p.FeatureNames, _elem169)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceModelsWithFeaturesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modelsWithFeatures_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceModelsWithFeaturesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureNames", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:featureNames: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.FeatureNames)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.FeatureNames {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:featureNames: ", p), err) }
  return err
}

func (p *ModelDBServiceModelsWithFeaturesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceModelsWithFeaturesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceModelsWithFeaturesResult struct {
  Success []int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceModelsWithFeaturesResult() *ModelDBServiceModelsWithFeaturesResult {
  return &ModelDBServiceModelsWithFeaturesResult{}
}

var ModelDBServiceModelsWithFeaturesResult_Success_DEFAULT []int32

func (p *ModelDBServiceModelsWithFeaturesResult) GetSuccess() []int32 {
  return p.Success
}
var ModelDBServiceModelsWithFeaturesResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceModelsWithFeaturesResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceModelsWithFeaturesResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceModelsWithFeaturesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceModelsWithFeaturesResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceModelsWithFeaturesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceModelsWithFeaturesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem170 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem170 = v
}
    p.Success = append(p.Success, _elem170)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceModelsWithFeaturesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceModelsWithFeaturesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modelsWithFeatures_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceModelsWithFeaturesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceModelsWithFeaturesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceModelsWithFeaturesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceModelsWithFeaturesResult(%+v)", *p)
}

// Attributes:
//  - DfId
type ModelDBServiceModelsDerivedFromDataFrameArgs struct {
  DfId int32 `thrift:"dfId,1" db:"dfId" json:"dfId"`
}

func NewModelDBServiceModelsDerivedFromDataFrameArgs() *ModelDBServiceModelsDerivedFromDataFrameArgs {
  return &ModelDBServiceModelsDerivedFromDataFrameArgs{}
}


func (p *ModelDBServiceModelsDerivedFromDataFrameArgs) GetDfId() int32 {
  return p.DfId
}
func (p *ModelDBServiceModelsDerivedFromDataFrameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceModelsDerivedFromDataFrameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DfId = v
}
  return nil
}

func (p *ModelDBServiceModelsDerivedFromDataFrameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modelsDerivedFromDataFrame_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceModelsDerivedFromDataFrameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dfId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dfId: ", p), err) }
  if err := oprot.WriteI32(int32(p.DfId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dfId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dfId: ", p), err) }
  return err
}

func (p *ModelDBServiceModelsDerivedFromDataFrameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceModelsDerivedFromDataFrameArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceModelsDerivedFromDataFrameResult struct {
  Success []int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceModelsDerivedFromDataFrameResult() *ModelDBServiceModelsDerivedFromDataFrameResult {
  return &ModelDBServiceModelsDerivedFromDataFrameResult{}
}

var ModelDBServiceModelsDerivedFromDataFrameResult_Success_DEFAULT []int32

func (p *ModelDBServiceModelsDerivedFromDataFrameResult) GetSuccess() []int32 {
  return p.Success
}
var ModelDBServiceModelsDerivedFromDataFrameResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceModelsDerivedFromDataFrameResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceModelsDerivedFromDataFrameResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceModelsDerivedFromDataFrameResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceModelsDerivedFromDataFrameResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceModelsDerivedFromDataFrameResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceModelsDerivedFromDataFrameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceModelsDerivedFromDataFrameResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceModelsDerivedFromDataFrameResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceModelsDerivedFromDataFrameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceModelsDerivedFromDataFrameResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem171 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem171 = v
}
    p.Success = append(p.Success, _elem171)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceModelsDerivedFromDataFrameResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceModelsDerivedFromDataFrameResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceModelsDerivedFromDataFrameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("modelsDerivedFromDataFrame_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceModelsDerivedFromDataFrameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceModelsDerivedFromDataFrameResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceModelsDerivedFromDataFrameResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceModelsDerivedFromDataFrameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceModelsDerivedFromDataFrameResult(%+v)", *p)
}

// Attributes:
//  - KeyValuePairs
type ModelDBServiceGetProjectIdsArgs struct {
  KeyValuePairs map[string]string `thrift:"keyValuePairs,1" db:"keyValuePairs" json:"keyValuePairs"`
}

func NewModelDBServiceGetProjectIdsArgs() *ModelDBServiceGetProjectIdsArgs {
  return &ModelDBServiceGetProjectIdsArgs{}
}


func (p *ModelDBServiceGetProjectIdsArgs) GetKeyValuePairs() map[string]string {
  return p.KeyValuePairs
}
func (p *ModelDBServiceGetProjectIdsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetProjectIdsArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.KeyValuePairs =  tMap
  for i := 0; i < size; i ++ {
var _key172 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key172 = v
}
var _val173 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val173 = v
}
    p.KeyValuePairs[_key172] = _val173
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ModelDBServiceGetProjectIdsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProjectIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetProjectIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyValuePairs", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyValuePairs: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.KeyValuePairs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.KeyValuePairs {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyValuePairs: ", p), err) }
  return err
}

func (p *ModelDBServiceGetProjectIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetProjectIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceGetProjectIdsResult struct {
  Success []int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetProjectIdsResult() *ModelDBServiceGetProjectIdsResult {
  return &ModelDBServiceGetProjectIdsResult{}
}

var ModelDBServiceGetProjectIdsResult_Success_DEFAULT []int32

func (p *ModelDBServiceGetProjectIdsResult) GetSuccess() []int32 {
  return p.Success
}
var ModelDBServiceGetProjectIdsResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetProjectIdsResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetProjectIdsResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetProjectIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetProjectIdsResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetProjectIdsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetProjectIdsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem174 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem174 = v
}
    p.Success = append(p.Success, _elem174)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceGetProjectIdsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetProjectIdsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProjectIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetProjectIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetProjectIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetProjectIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetProjectIdsResult(%+v)", *p)
}

// Attributes:
//  - KeyValuePairs
type ModelDBServiceGetModelIdsArgs struct {
  KeyValuePairs map[string]string `thrift:"keyValuePairs,1" db:"keyValuePairs" json:"keyValuePairs"`
}

func NewModelDBServiceGetModelIdsArgs() *ModelDBServiceGetModelIdsArgs {
  return &ModelDBServiceGetModelIdsArgs{}
}


func (p *ModelDBServiceGetModelIdsArgs) GetKeyValuePairs() map[string]string {
  return p.KeyValuePairs
}
func (p *ModelDBServiceGetModelIdsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetModelIdsArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.KeyValuePairs =  tMap
  for i := 0; i < size; i ++ {
var _key175 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key175 = v
}
var _val176 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val176 = v
}
    p.KeyValuePairs[_key175] = _val176
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ModelDBServiceGetModelIdsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getModelIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetModelIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyValuePairs", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyValuePairs: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.KeyValuePairs)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.KeyValuePairs {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyValuePairs: ", p), err) }
  return err
}

func (p *ModelDBServiceGetModelIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetModelIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceGetModelIdsResult struct {
  Success []int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetModelIdsResult() *ModelDBServiceGetModelIdsResult {
  return &ModelDBServiceGetModelIdsResult{}
}

var ModelDBServiceGetModelIdsResult_Success_DEFAULT []int32

func (p *ModelDBServiceGetModelIdsResult) GetSuccess() []int32 {
  return p.Success
}
var ModelDBServiceGetModelIdsResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetModelIdsResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetModelIdsResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetModelIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetModelIdsResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetModelIdsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetModelIdsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem177 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem177 = v
}
    p.Success = append(p.Success, _elem177)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceGetModelIdsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetModelIdsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getModelIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetModelIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetModelIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetModelIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetModelIdsResult(%+v)", *p)
}

// Attributes:
//  - ProjectId
//  - Key
//  - Value
type ModelDBServiceUpdateProjectArgs struct {
  ProjectId int32 `thrift:"projectId,1" db:"projectId" json:"projectId"`
  Key string `thrift:"key,2" db:"key" json:"key"`
  Value string `thrift:"value,3" db:"value" json:"value"`
}

func NewModelDBServiceUpdateProjectArgs() *ModelDBServiceUpdateProjectArgs {
  return &ModelDBServiceUpdateProjectArgs{}
}


func (p *ModelDBServiceUpdateProjectArgs) GetProjectId() int32 {
  return p.ProjectId
}

func (p *ModelDBServiceUpdateProjectArgs) GetKey() string {
  return p.Key
}

func (p *ModelDBServiceUpdateProjectArgs) GetValue() string {
  return p.Value
}
func (p *ModelDBServiceUpdateProjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceUpdateProjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProjectId = v
}
  return nil
}

func (p *ModelDBServiceUpdateProjectArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ModelDBServiceUpdateProjectArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ModelDBServiceUpdateProjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateProject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceUpdateProjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projectId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:projectId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:projectId: ", p), err) }
  return err
}

func (p *ModelDBServiceUpdateProjectArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *ModelDBServiceUpdateProjectArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *ModelDBServiceUpdateProjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceUpdateProjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceUpdateProjectResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceUpdateProjectResult() *ModelDBServiceUpdateProjectResult {
  return &ModelDBServiceUpdateProjectResult{}
}

var ModelDBServiceUpdateProjectResult_Success_DEFAULT bool
func (p *ModelDBServiceUpdateProjectResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ModelDBServiceUpdateProjectResult_Success_DEFAULT
  }
return *p.Success
}
var ModelDBServiceUpdateProjectResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceUpdateProjectResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceUpdateProjectResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceUpdateProjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceUpdateProjectResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceUpdateProjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceUpdateProjectResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServiceUpdateProjectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceUpdateProjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateProject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceUpdateProjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceUpdateProjectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceUpdateProjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceUpdateProjectResult(%+v)", *p)
}

// Attributes:
//  - ModelId
//  - Key
//  - Value
//  - ValueType
type ModelDBServiceCreateOrUpdateScalarFieldArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
  Key string `thrift:"key,2" db:"key" json:"key"`
  Value string `thrift:"value,3" db:"value" json:"value"`
  ValueType string `thrift:"valueType,4" db:"valueType" json:"valueType"`
}

func NewModelDBServiceCreateOrUpdateScalarFieldArgs() *ModelDBServiceCreateOrUpdateScalarFieldArgs {
  return &ModelDBServiceCreateOrUpdateScalarFieldArgs{}
}


func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs) GetModelId() int32 {
  return p.ModelId
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs) GetKey() string {
  return p.Key
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs) GetValue() string {
  return p.Value
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs) GetValueType() string {
  return p.ValueType
}
func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ValueType = v
}
  return nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createOrUpdateScalarField_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("valueType", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:valueType: ", p), err) }
  if err := oprot.WriteString(string(p.ValueType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.valueType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:valueType: ", p), err) }
  return err
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceCreateOrUpdateScalarFieldArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceCreateOrUpdateScalarFieldResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceCreateOrUpdateScalarFieldResult() *ModelDBServiceCreateOrUpdateScalarFieldResult {
  return &ModelDBServiceCreateOrUpdateScalarFieldResult{}
}

var ModelDBServiceCreateOrUpdateScalarFieldResult_Success_DEFAULT bool
func (p *ModelDBServiceCreateOrUpdateScalarFieldResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ModelDBServiceCreateOrUpdateScalarFieldResult_Success_DEFAULT
  }
return *p.Success
}
var ModelDBServiceCreateOrUpdateScalarFieldResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceCreateOrUpdateScalarFieldResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceCreateOrUpdateScalarFieldResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceCreateOrUpdateScalarFieldResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createOrUpdateScalarField_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCreateOrUpdateScalarFieldResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceCreateOrUpdateScalarFieldResult(%+v)", *p)
}

// Attributes:
//  - ModelId
//  - VectorName
//  - VectorConfig
type ModelDBServiceCreateVectorFieldArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
  VectorName string `thrift:"vectorName,2" db:"vectorName" json:"vectorName"`
  VectorConfig map[string]string `thrift:"vectorConfig,3" db:"vectorConfig" json:"vectorConfig"`
}

func NewModelDBServiceCreateVectorFieldArgs() *ModelDBServiceCreateVectorFieldArgs {
  return &ModelDBServiceCreateVectorFieldArgs{}
}


func (p *ModelDBServiceCreateVectorFieldArgs) GetModelId() int32 {
  return p.ModelId
}

func (p *ModelDBServiceCreateVectorFieldArgs) GetVectorName() string {
  return p.VectorName
}

func (p *ModelDBServiceCreateVectorFieldArgs) GetVectorConfig() map[string]string {
  return p.VectorConfig
}
func (p *ModelDBServiceCreateVectorFieldArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceCreateVectorFieldArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceCreateVectorFieldArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VectorName = v
}
  return nil
}

func (p *ModelDBServiceCreateVectorFieldArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.VectorConfig =  tMap
  for i := 0; i < size; i ++ {
var _key178 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key178 = v
}
var _val179 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val179 = v
}
    p.VectorConfig[_key178] = _val179
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ModelDBServiceCreateVectorFieldArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createVectorField_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceCreateVectorFieldArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceCreateVectorFieldArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vectorName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vectorName: ", p), err) }
  if err := oprot.WriteString(string(p.VectorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vectorName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vectorName: ", p), err) }
  return err
}

func (p *ModelDBServiceCreateVectorFieldArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vectorConfig", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:vectorConfig: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.VectorConfig)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.VectorConfig {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:vectorConfig: ", p), err) }
  return err
}

func (p *ModelDBServiceCreateVectorFieldArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceCreateVectorFieldArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceCreateVectorFieldResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceCreateVectorFieldResult() *ModelDBServiceCreateVectorFieldResult {
  return &ModelDBServiceCreateVectorFieldResult{}
}

var ModelDBServiceCreateVectorFieldResult_Success_DEFAULT bool
func (p *ModelDBServiceCreateVectorFieldResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ModelDBServiceCreateVectorFieldResult_Success_DEFAULT
  }
return *p.Success
}
var ModelDBServiceCreateVectorFieldResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceCreateVectorFieldResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceCreateVectorFieldResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceCreateVectorFieldResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceCreateVectorFieldResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceCreateVectorFieldResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceCreateVectorFieldResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServiceCreateVectorFieldResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceCreateVectorFieldResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createVectorField_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceCreateVectorFieldResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCreateVectorFieldResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceCreateVectorFieldResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceCreateVectorFieldResult(%+v)", *p)
}

// Attributes:
//  - ModelId
//  - Key
//  - ValueIndex
//  - Value
//  - ValueType
type ModelDBServiceUpdateVectorFieldArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
  Key string `thrift:"key,2" db:"key" json:"key"`
  ValueIndex int32 `thrift:"valueIndex,3" db:"valueIndex" json:"valueIndex"`
  Value string `thrift:"value,4" db:"value" json:"value"`
  ValueType string `thrift:"valueType,5" db:"valueType" json:"valueType"`
}

func NewModelDBServiceUpdateVectorFieldArgs() *ModelDBServiceUpdateVectorFieldArgs {
  return &ModelDBServiceUpdateVectorFieldArgs{}
}


func (p *ModelDBServiceUpdateVectorFieldArgs) GetModelId() int32 {
  return p.ModelId
}

func (p *ModelDBServiceUpdateVectorFieldArgs) GetKey() string {
  return p.Key
}

func (p *ModelDBServiceUpdateVectorFieldArgs) GetValueIndex() int32 {
  return p.ValueIndex
}

func (p *ModelDBServiceUpdateVectorFieldArgs) GetValue() string {
  return p.Value
}

func (p *ModelDBServiceUpdateVectorFieldArgs) GetValueType() string {
  return p.ValueType
}
func (p *ModelDBServiceUpdateVectorFieldArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceUpdateVectorFieldArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceUpdateVectorFieldArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ModelDBServiceUpdateVectorFieldArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ValueIndex = v
}
  return nil
}

func (p *ModelDBServiceUpdateVectorFieldArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ModelDBServiceUpdateVectorFieldArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ValueType = v
}
  return nil
}

func (p *ModelDBServiceUpdateVectorFieldArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateVectorField_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceUpdateVectorFieldArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceUpdateVectorFieldArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *ModelDBServiceUpdateVectorFieldArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("valueIndex", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:valueIndex: ", p), err) }
  if err := oprot.WriteI32(int32(p.ValueIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.valueIndex (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:valueIndex: ", p), err) }
  return err
}

func (p *ModelDBServiceUpdateVectorFieldArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *ModelDBServiceUpdateVectorFieldArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("valueType", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:valueType: ", p), err) }
  if err := oprot.WriteString(string(p.ValueType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.valueType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:valueType: ", p), err) }
  return err
}

func (p *ModelDBServiceUpdateVectorFieldArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceUpdateVectorFieldArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceUpdateVectorFieldResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceUpdateVectorFieldResult() *ModelDBServiceUpdateVectorFieldResult {
  return &ModelDBServiceUpdateVectorFieldResult{}
}

var ModelDBServiceUpdateVectorFieldResult_Success_DEFAULT bool
func (p *ModelDBServiceUpdateVectorFieldResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ModelDBServiceUpdateVectorFieldResult_Success_DEFAULT
  }
return *p.Success
}
var ModelDBServiceUpdateVectorFieldResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceUpdateVectorFieldResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceUpdateVectorFieldResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceUpdateVectorFieldResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceUpdateVectorFieldResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceUpdateVectorFieldResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceUpdateVectorFieldResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServiceUpdateVectorFieldResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceUpdateVectorFieldResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateVectorField_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceUpdateVectorFieldResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceUpdateVectorFieldResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceUpdateVectorFieldResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceUpdateVectorFieldResult(%+v)", *p)
}

// Attributes:
//  - ModelId
//  - VectorName
//  - Value
//  - ValueType
type ModelDBServiceAppendToVectorFieldArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
  VectorName string `thrift:"vectorName,2" db:"vectorName" json:"vectorName"`
  Value string `thrift:"value,3" db:"value" json:"value"`
  ValueType string `thrift:"valueType,4" db:"valueType" json:"valueType"`
}

func NewModelDBServiceAppendToVectorFieldArgs() *ModelDBServiceAppendToVectorFieldArgs {
  return &ModelDBServiceAppendToVectorFieldArgs{}
}


func (p *ModelDBServiceAppendToVectorFieldArgs) GetModelId() int32 {
  return p.ModelId
}

func (p *ModelDBServiceAppendToVectorFieldArgs) GetVectorName() string {
  return p.VectorName
}

func (p *ModelDBServiceAppendToVectorFieldArgs) GetValue() string {
  return p.Value
}

func (p *ModelDBServiceAppendToVectorFieldArgs) GetValueType() string {
  return p.ValueType
}
func (p *ModelDBServiceAppendToVectorFieldArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceAppendToVectorFieldArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceAppendToVectorFieldArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VectorName = v
}
  return nil
}

func (p *ModelDBServiceAppendToVectorFieldArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ModelDBServiceAppendToVectorFieldArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ValueType = v
}
  return nil
}

func (p *ModelDBServiceAppendToVectorFieldArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("appendToVectorField_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceAppendToVectorFieldArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceAppendToVectorFieldArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vectorName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vectorName: ", p), err) }
  if err := oprot.WriteString(string(p.VectorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vectorName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vectorName: ", p), err) }
  return err
}

func (p *ModelDBServiceAppendToVectorFieldArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err) }
  return err
}

func (p *ModelDBServiceAppendToVectorFieldArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("valueType", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:valueType: ", p), err) }
  if err := oprot.WriteString(string(p.ValueType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.valueType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:valueType: ", p), err) }
  return err
}

func (p *ModelDBServiceAppendToVectorFieldArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceAppendToVectorFieldArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceAppendToVectorFieldResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceAppendToVectorFieldResult() *ModelDBServiceAppendToVectorFieldResult {
  return &ModelDBServiceAppendToVectorFieldResult{}
}

var ModelDBServiceAppendToVectorFieldResult_Success_DEFAULT bool
func (p *ModelDBServiceAppendToVectorFieldResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ModelDBServiceAppendToVectorFieldResult_Success_DEFAULT
  }
return *p.Success
}
var ModelDBServiceAppendToVectorFieldResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceAppendToVectorFieldResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceAppendToVectorFieldResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceAppendToVectorFieldResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceAppendToVectorFieldResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceAppendToVectorFieldResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceAppendToVectorFieldResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServiceAppendToVectorFieldResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceAppendToVectorFieldResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("appendToVectorField_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceAppendToVectorFieldResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceAppendToVectorFieldResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceAppendToVectorFieldResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceAppendToVectorFieldResult(%+v)", *p)
}

// Attributes:
//  - ModelId
type ModelDBServiceGetModelArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
}

func NewModelDBServiceGetModelArgs() *ModelDBServiceGetModelArgs {
  return &ModelDBServiceGetModelArgs{}
}


func (p *ModelDBServiceGetModelArgs) GetModelId() int32 {
  return p.ModelId
}
func (p *ModelDBServiceGetModelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetModelArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceGetModelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getModel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetModelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceGetModelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetModelArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceGetModelResult struct {
  Success *ModelResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetModelResult() *ModelDBServiceGetModelResult {
  return &ModelDBServiceGetModelResult{}
}

var ModelDBServiceGetModelResult_Success_DEFAULT *ModelResponse
func (p *ModelDBServiceGetModelResult) GetSuccess() *ModelResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceGetModelResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceGetModelResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceGetModelResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceGetModelResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceGetModelResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetModelResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetModelResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetModelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetModelResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceGetModelResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetModelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetModelResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ModelResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceGetModelResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetModelResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetModelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getModel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetModelResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetModelResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetModelResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetModelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetModelResult(%+v)", *p)
}

// Attributes:
//  - ExperimentId
type ModelDBServiceGetRunsInExperimentArgs struct {
  ExperimentId int32 `thrift:"experimentId,1" db:"experimentId" json:"experimentId"`
}

func NewModelDBServiceGetRunsInExperimentArgs() *ModelDBServiceGetRunsInExperimentArgs {
  return &ModelDBServiceGetRunsInExperimentArgs{}
}


func (p *ModelDBServiceGetRunsInExperimentArgs) GetExperimentId() int32 {
  return p.ExperimentId
}
func (p *ModelDBServiceGetRunsInExperimentArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetRunsInExperimentArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExperimentId = v
}
  return nil
}

func (p *ModelDBServiceGetRunsInExperimentArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRunsInExperiment_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetRunsInExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experimentId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experimentId: ", p), err) }
  return err
}

func (p *ModelDBServiceGetRunsInExperimentArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetRunsInExperimentArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceGetRunsInExperimentResult struct {
  Success []*ExperimentRun `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetRunsInExperimentResult() *ModelDBServiceGetRunsInExperimentResult {
  return &ModelDBServiceGetRunsInExperimentResult{}
}

var ModelDBServiceGetRunsInExperimentResult_Success_DEFAULT []*ExperimentRun

func (p *ModelDBServiceGetRunsInExperimentResult) GetSuccess() []*ExperimentRun {
  return p.Success
}
var ModelDBServiceGetRunsInExperimentResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetRunsInExperimentResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetRunsInExperimentResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetRunsInExperimentResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetRunsInExperimentResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetRunsInExperimentResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetRunsInExperimentResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExperimentRun, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem180 := &ExperimentRun{
    ID: -1,
}
    if err := _elem180.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem180), err)
    }
    p.Success = append(p.Success, _elem180)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceGetRunsInExperimentResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetRunsInExperimentResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRunsInExperiment_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetRunsInExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetRunsInExperimentResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetRunsInExperimentResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetRunsInExperimentResult(%+v)", *p)
}

// Attributes:
//  - ProjId
type ModelDBServiceGetRunsAndExperimentsInProjectArgs struct {
  ProjId int32 `thrift:"projId,1" db:"projId" json:"projId"`
}

func NewModelDBServiceGetRunsAndExperimentsInProjectArgs() *ModelDBServiceGetRunsAndExperimentsInProjectArgs {
  return &ModelDBServiceGetRunsAndExperimentsInProjectArgs{}
}


func (p *ModelDBServiceGetRunsAndExperimentsInProjectArgs) GetProjId() int32 {
  return p.ProjId
}
func (p *ModelDBServiceGetRunsAndExperimentsInProjectArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ProjId = v
}
  return nil
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRunsAndExperimentsInProject_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("projId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:projId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ProjId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:projId: ", p), err) }
  return err
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetRunsAndExperimentsInProjectArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceGetRunsAndExperimentsInProjectResult struct {
  Success *ProjectExperimentsAndRuns `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetRunsAndExperimentsInProjectResult() *ModelDBServiceGetRunsAndExperimentsInProjectResult {
  return &ModelDBServiceGetRunsAndExperimentsInProjectResult{}
}

var ModelDBServiceGetRunsAndExperimentsInProjectResult_Success_DEFAULT *ProjectExperimentsAndRuns
func (p *ModelDBServiceGetRunsAndExperimentsInProjectResult) GetSuccess() *ProjectExperimentsAndRuns {
  if !p.IsSetSuccess() {
    return ModelDBServiceGetRunsAndExperimentsInProjectResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceGetRunsAndExperimentsInProjectResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetRunsAndExperimentsInProjectResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetRunsAndExperimentsInProjectResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetRunsAndExperimentsInProjectResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ProjectExperimentsAndRuns{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRunsAndExperimentsInProject_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetRunsAndExperimentsInProjectResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetRunsAndExperimentsInProjectResult(%+v)", *p)
}

type ModelDBServiceGetProjectOverviewsArgs struct {
}

func NewModelDBServiceGetProjectOverviewsArgs() *ModelDBServiceGetProjectOverviewsArgs {
  return &ModelDBServiceGetProjectOverviewsArgs{}
}

func (p *ModelDBServiceGetProjectOverviewsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetProjectOverviewsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProjectOverviews_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetProjectOverviewsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetProjectOverviewsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
type ModelDBServiceGetProjectOverviewsResult struct {
  Success []*ProjectOverviewResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceGetProjectOverviewsResult() *ModelDBServiceGetProjectOverviewsResult {
  return &ModelDBServiceGetProjectOverviewsResult{}
}

var ModelDBServiceGetProjectOverviewsResult_Success_DEFAULT []*ProjectOverviewResponse

func (p *ModelDBServiceGetProjectOverviewsResult) GetSuccess() []*ProjectOverviewResponse {
  return p.Success
}
var ModelDBServiceGetProjectOverviewsResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetProjectOverviewsResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetProjectOverviewsResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceGetProjectOverviewsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetProjectOverviewsResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetProjectOverviewsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetProjectOverviewsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ProjectOverviewResponse, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem181 := &ProjectOverviewResponse{}
    if err := _elem181.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem181), err)
    }
    p.Success = append(p.Success, _elem181)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceGetProjectOverviewsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetProjectOverviewsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProjectOverviews_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetProjectOverviewsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetProjectOverviewsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetProjectOverviewsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetProjectOverviewsResult(%+v)", *p)
}

// Attributes:
//  - ExperimentRunId
type ModelDBServiceGetExperimentRunDetailsArgs struct {
  ExperimentRunId int32 `thrift:"experimentRunId,1" db:"experimentRunId" json:"experimentRunId"`
}

func NewModelDBServiceGetExperimentRunDetailsArgs() *ModelDBServiceGetExperimentRunDetailsArgs {
  return &ModelDBServiceGetExperimentRunDetailsArgs{}
}


func (p *ModelDBServiceGetExperimentRunDetailsArgs) GetExperimentRunId() int32 {
  return p.ExperimentRunId
}
func (p *ModelDBServiceGetExperimentRunDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetExperimentRunDetailsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExperimentRunId = v
}
  return nil
}

func (p *ModelDBServiceGetExperimentRunDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentRunDetails_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetExperimentRunDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("experimentRunId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:experimentRunId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ExperimentRunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.experimentRunId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:experimentRunId: ", p), err) }
  return err
}

func (p *ModelDBServiceGetExperimentRunDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetExperimentRunDetailsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - SvEx
//  - RnfEx
type ModelDBServiceGetExperimentRunDetailsResult struct {
  Success *ExperimentRunDetailsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,1" db:"svEx" json:"svEx,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,2" db:"rnfEx" json:"rnfEx,omitempty"`
}

func NewModelDBServiceGetExperimentRunDetailsResult() *ModelDBServiceGetExperimentRunDetailsResult {
  return &ModelDBServiceGetExperimentRunDetailsResult{}
}

var ModelDBServiceGetExperimentRunDetailsResult_Success_DEFAULT *ExperimentRunDetailsResponse
func (p *ModelDBServiceGetExperimentRunDetailsResult) GetSuccess() *ExperimentRunDetailsResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceGetExperimentRunDetailsResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceGetExperimentRunDetailsResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceGetExperimentRunDetailsResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceGetExperimentRunDetailsResult_SvEx_DEFAULT
  }
return p.SvEx
}
var ModelDBServiceGetExperimentRunDetailsResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceGetExperimentRunDetailsResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceGetExperimentRunDetailsResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
func (p *ModelDBServiceGetExperimentRunDetailsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceGetExperimentRunDetailsResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceGetExperimentRunDetailsResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceGetExperimentRunDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceGetExperimentRunDetailsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ExperimentRunDetailsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceGetExperimentRunDetailsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetExperimentRunDetailsResult)  ReadField2(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceGetExperimentRunDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExperimentRunDetails_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceGetExperimentRunDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetExperimentRunDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetExperimentRunDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceGetExperimentRunDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceGetExperimentRunDetailsResult(%+v)", *p)
}

// Attributes:
//  - ModelId
type ModelDBServiceOriginalFeaturesArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
}

func NewModelDBServiceOriginalFeaturesArgs() *ModelDBServiceOriginalFeaturesArgs {
  return &ModelDBServiceOriginalFeaturesArgs{}
}


func (p *ModelDBServiceOriginalFeaturesArgs) GetModelId() int32 {
  return p.ModelId
}
func (p *ModelDBServiceOriginalFeaturesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceOriginalFeaturesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceOriginalFeaturesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("originalFeatures_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceOriginalFeaturesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceOriginalFeaturesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceOriginalFeaturesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceOriginalFeaturesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceOriginalFeaturesResult() *ModelDBServiceOriginalFeaturesResult {
  return &ModelDBServiceOriginalFeaturesResult{}
}

var ModelDBServiceOriginalFeaturesResult_Success_DEFAULT []string

func (p *ModelDBServiceOriginalFeaturesResult) GetSuccess() []string {
  return p.Success
}
var ModelDBServiceOriginalFeaturesResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceOriginalFeaturesResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceOriginalFeaturesResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceOriginalFeaturesResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceOriginalFeaturesResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceOriginalFeaturesResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceOriginalFeaturesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceOriginalFeaturesResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceOriginalFeaturesResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceOriginalFeaturesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceOriginalFeaturesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem182 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem182 = v
}
    p.Success = append(p.Success, _elem182)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceOriginalFeaturesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceOriginalFeaturesResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceOriginalFeaturesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("originalFeatures_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceOriginalFeaturesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceOriginalFeaturesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceOriginalFeaturesResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceOriginalFeaturesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceOriginalFeaturesResult(%+v)", *p)
}

// Attributes:
//  - ModelId
//  - Model
type ModelDBServiceStoreTreeModelArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
  Model *TreeModel `thrift:"model,2" db:"model" json:"model"`
}

func NewModelDBServiceStoreTreeModelArgs() *ModelDBServiceStoreTreeModelArgs {
  return &ModelDBServiceStoreTreeModelArgs{}
}


func (p *ModelDBServiceStoreTreeModelArgs) GetModelId() int32 {
  return p.ModelId
}
var ModelDBServiceStoreTreeModelArgs_Model_DEFAULT *TreeModel
func (p *ModelDBServiceStoreTreeModelArgs) GetModel() *TreeModel {
  if !p.IsSetModel() {
    return ModelDBServiceStoreTreeModelArgs_Model_DEFAULT
  }
return p.Model
}
func (p *ModelDBServiceStoreTreeModelArgs) IsSetModel() bool {
  return p.Model != nil
}

func (p *ModelDBServiceStoreTreeModelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreTreeModelArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceStoreTreeModelArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Model = &TreeModel{}
  if err := p.Model.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Model), err)
  }
  return nil
}

func (p *ModelDBServiceStoreTreeModelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeTreeModel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreTreeModelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreTreeModelArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:model: ", p), err) }
  if err := p.Model.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Model), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:model: ", p), err) }
  return err
}

func (p *ModelDBServiceStoreTreeModelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreTreeModelArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceStoreTreeModelResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStoreTreeModelResult() *ModelDBServiceStoreTreeModelResult {
  return &ModelDBServiceStoreTreeModelResult{}
}

var ModelDBServiceStoreTreeModelResult_Success_DEFAULT bool
func (p *ModelDBServiceStoreTreeModelResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return ModelDBServiceStoreTreeModelResult_Success_DEFAULT
  }
return *p.Success
}
var ModelDBServiceStoreTreeModelResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceStoreTreeModelResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceStoreTreeModelResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceStoreTreeModelResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStoreTreeModelResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStoreTreeModelResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStoreTreeModelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStoreTreeModelResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceStoreTreeModelResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStoreTreeModelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStoreTreeModelResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *ModelDBServiceStoreTreeModelResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreTreeModelResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStoreTreeModelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storeTreeModel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStoreTreeModelResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreTreeModelResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreTreeModelResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStoreTreeModelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStoreTreeModelResult(%+v)", *p)
}

// Attributes:
//  - Te
type ModelDBServiceStorePipelineTransformEventArgs struct {
  Te []*TransformEvent `thrift:"te,1" db:"te" json:"te"`
}

func NewModelDBServiceStorePipelineTransformEventArgs() *ModelDBServiceStorePipelineTransformEventArgs {
  return &ModelDBServiceStorePipelineTransformEventArgs{}
}


func (p *ModelDBServiceStorePipelineTransformEventArgs) GetTe() []*TransformEvent {
  return p.Te
}
func (p *ModelDBServiceStorePipelineTransformEventArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStorePipelineTransformEventArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TransformEvent, 0, size)
  p.Te =  tSlice
  for i := 0; i < size; i ++ {
    _elem183 := &TransformEvent{}
    if err := _elem183.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem183), err)
    }
    p.Te = append(p.Te, _elem183)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceStorePipelineTransformEventArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storePipelineTransformEvent_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStorePipelineTransformEventArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("te", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:te: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Te)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Te {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:te: ", p), err) }
  return err
}

func (p *ModelDBServiceStorePipelineTransformEventArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStorePipelineTransformEventArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - IerEx
//  - SvEx
type ModelDBServiceStorePipelineTransformEventResult struct {
  Success []*TransformEventResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  IerEx *InvalidExperimentRunException `thrift:"ierEx,1" db:"ierEx" json:"ierEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceStorePipelineTransformEventResult() *ModelDBServiceStorePipelineTransformEventResult {
  return &ModelDBServiceStorePipelineTransformEventResult{}
}

var ModelDBServiceStorePipelineTransformEventResult_Success_DEFAULT []*TransformEventResponse

func (p *ModelDBServiceStorePipelineTransformEventResult) GetSuccess() []*TransformEventResponse {
  return p.Success
}
var ModelDBServiceStorePipelineTransformEventResult_IerEx_DEFAULT *InvalidExperimentRunException
func (p *ModelDBServiceStorePipelineTransformEventResult) GetIerEx() *InvalidExperimentRunException {
  if !p.IsSetIerEx() {
    return ModelDBServiceStorePipelineTransformEventResult_IerEx_DEFAULT
  }
return p.IerEx
}
var ModelDBServiceStorePipelineTransformEventResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceStorePipelineTransformEventResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceStorePipelineTransformEventResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceStorePipelineTransformEventResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceStorePipelineTransformEventResult) IsSetIerEx() bool {
  return p.IerEx != nil
}

func (p *ModelDBServiceStorePipelineTransformEventResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceStorePipelineTransformEventResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceStorePipelineTransformEventResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TransformEventResponse, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem184 := &TransformEventResponse{}
    if err := _elem184.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem184), err)
    }
    p.Success = append(p.Success, _elem184)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ModelDBServiceStorePipelineTransformEventResult)  ReadField1(iprot thrift.TProtocol) error {
  p.IerEx = &InvalidExperimentRunException{}
  if err := p.IerEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IerEx), err)
  }
  return nil
}

func (p *ModelDBServiceStorePipelineTransformEventResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceStorePipelineTransformEventResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("storePipelineTransformEvent_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceStorePipelineTransformEventResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStorePipelineTransformEventResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetIerEx() {
    if err := oprot.WriteFieldBegin("ierEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ierEx: ", p), err) }
    if err := p.IerEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IerEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ierEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStorePipelineTransformEventResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceStorePipelineTransformEventResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceStorePipelineTransformEventResult(%+v)", *p)
}

// Attributes:
//  - ModelId
type ModelDBServiceComputeModelAncestryArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
}

func NewModelDBServiceComputeModelAncestryArgs() *ModelDBServiceComputeModelAncestryArgs {
  return &ModelDBServiceComputeModelAncestryArgs{}
}


func (p *ModelDBServiceComputeModelAncestryArgs) GetModelId() int32 {
  return p.ModelId
}
func (p *ModelDBServiceComputeModelAncestryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceComputeModelAncestryArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceComputeModelAncestryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("computeModelAncestry_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceComputeModelAncestryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceComputeModelAncestryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceComputeModelAncestryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceComputeModelAncestryResult struct {
  Success *ModelAncestryResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceComputeModelAncestryResult() *ModelDBServiceComputeModelAncestryResult {
  return &ModelDBServiceComputeModelAncestryResult{}
}

var ModelDBServiceComputeModelAncestryResult_Success_DEFAULT *ModelAncestryResponse
func (p *ModelDBServiceComputeModelAncestryResult) GetSuccess() *ModelAncestryResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceComputeModelAncestryResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceComputeModelAncestryResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceComputeModelAncestryResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceComputeModelAncestryResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceComputeModelAncestryResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceComputeModelAncestryResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceComputeModelAncestryResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceComputeModelAncestryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceComputeModelAncestryResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceComputeModelAncestryResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceComputeModelAncestryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceComputeModelAncestryResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ModelAncestryResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceComputeModelAncestryResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceComputeModelAncestryResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceComputeModelAncestryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("computeModelAncestry_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceComputeModelAncestryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceComputeModelAncestryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceComputeModelAncestryResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceComputeModelAncestryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceComputeModelAncestryResult(%+v)", *p)
}

// Attributes:
//  - ModelId
type ModelDBServiceExtractPipelineArgs struct {
  ModelId int32 `thrift:"modelId,1" db:"modelId" json:"modelId"`
}

func NewModelDBServiceExtractPipelineArgs() *ModelDBServiceExtractPipelineArgs {
  return &ModelDBServiceExtractPipelineArgs{}
}


func (p *ModelDBServiceExtractPipelineArgs) GetModelId() int32 {
  return p.ModelId
}
func (p *ModelDBServiceExtractPipelineArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceExtractPipelineArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ModelId = v
}
  return nil
}

func (p *ModelDBServiceExtractPipelineArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("extractPipeline_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceExtractPipelineArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("modelId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:modelId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ModelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.modelId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:modelId: ", p), err) }
  return err
}

func (p *ModelDBServiceExtractPipelineArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceExtractPipelineArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - RnfEx
//  - SvEx
type ModelDBServiceExtractPipelineResult struct {
  Success *ExtractedPipelineResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  RnfEx *ResourceNotFoundException `thrift:"rnfEx,1" db:"rnfEx" json:"rnfEx,omitempty"`
  SvEx *ServerLogicException `thrift:"svEx,2" db:"svEx" json:"svEx,omitempty"`
}

func NewModelDBServiceExtractPipelineResult() *ModelDBServiceExtractPipelineResult {
  return &ModelDBServiceExtractPipelineResult{}
}

var ModelDBServiceExtractPipelineResult_Success_DEFAULT *ExtractedPipelineResponse
func (p *ModelDBServiceExtractPipelineResult) GetSuccess() *ExtractedPipelineResponse {
  if !p.IsSetSuccess() {
    return ModelDBServiceExtractPipelineResult_Success_DEFAULT
  }
return p.Success
}
var ModelDBServiceExtractPipelineResult_RnfEx_DEFAULT *ResourceNotFoundException
func (p *ModelDBServiceExtractPipelineResult) GetRnfEx() *ResourceNotFoundException {
  if !p.IsSetRnfEx() {
    return ModelDBServiceExtractPipelineResult_RnfEx_DEFAULT
  }
return p.RnfEx
}
var ModelDBServiceExtractPipelineResult_SvEx_DEFAULT *ServerLogicException
func (p *ModelDBServiceExtractPipelineResult) GetSvEx() *ServerLogicException {
  if !p.IsSetSvEx() {
    return ModelDBServiceExtractPipelineResult_SvEx_DEFAULT
  }
return p.SvEx
}
func (p *ModelDBServiceExtractPipelineResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ModelDBServiceExtractPipelineResult) IsSetRnfEx() bool {
  return p.RnfEx != nil
}

func (p *ModelDBServiceExtractPipelineResult) IsSetSvEx() bool {
  return p.SvEx != nil
}

func (p *ModelDBServiceExtractPipelineResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ModelDBServiceExtractPipelineResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ExtractedPipelineResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ModelDBServiceExtractPipelineResult)  ReadField1(iprot thrift.TProtocol) error {
  p.RnfEx = &ResourceNotFoundException{}
  if err := p.RnfEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RnfEx), err)
  }
  return nil
}

func (p *ModelDBServiceExtractPipelineResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SvEx = &ServerLogicException{}
  if err := p.SvEx.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SvEx), err)
  }
  return nil
}

func (p *ModelDBServiceExtractPipelineResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("extractPipeline_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ModelDBServiceExtractPipelineResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceExtractPipelineResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetRnfEx() {
    if err := oprot.WriteFieldBegin("rnfEx", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:rnfEx: ", p), err) }
    if err := p.RnfEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RnfEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:rnfEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceExtractPipelineResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSvEx() {
    if err := oprot.WriteFieldBegin("svEx", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:svEx: ", p), err) }
    if err := p.SvEx.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SvEx), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:svEx: ", p), err) }
  }
  return err
}

func (p *ModelDBServiceExtractPipelineResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ModelDBServiceExtractPipelineResult(%+v)", *p)
}


