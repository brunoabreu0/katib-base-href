// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeflow/hp-tuning/db (interfaces: VizierDBInterface)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/kubeflow/hp-tuning/api"
	db "github.com/kubeflow/hp-tuning/db"
	reflect "reflect"
	time "time"
)

// MockVizierDBInterface is a mock of VizierDBInterface interface
type MockVizierDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVizierDBInterfaceMockRecorder
}

// MockVizierDBInterfaceMockRecorder is the mock recorder for MockVizierDBInterface
type MockVizierDBInterfaceMockRecorder struct {
	mock *MockVizierDBInterface
}

// NewMockVizierDBInterface creates a new mock instance
func NewMockVizierDBInterface(ctrl *gomock.Controller) *MockVizierDBInterface {
	mock := &MockVizierDBInterface{ctrl: ctrl}
	mock.recorder = &MockVizierDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierDBInterface) EXPECT() *MockVizierDBInterfaceMockRecorder {
	return m.recorder
}

// CreateStudy mocks base method
func (m *MockVizierDBInterface) CreateStudy(arg0 *api.StudyConfig) (string, error) {
	ret := m.ctrl.Call(m, "CreateStudy", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudy indicates an expected call of CreateStudy
func (mr *MockVizierDBInterfaceMockRecorder) CreateStudy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudy", reflect.TypeOf((*MockVizierDBInterface)(nil).CreateStudy), arg0)
}

// CreateTrial mocks base method
func (m *MockVizierDBInterface) CreateTrial(arg0 *api.Trial) error {
	ret := m.ctrl.Call(m, "CreateTrial", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTrial indicates an expected call of CreateTrial
func (mr *MockVizierDBInterfaceMockRecorder) CreateTrial(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrial", reflect.TypeOf((*MockVizierDBInterface)(nil).CreateTrial), arg0)
}

// DB_Init mocks base method
func (m *MockVizierDBInterface) DB_Init() {
	m.ctrl.Call(m, "DB_Init")
}

// DB_Init indicates an expected call of DB_Init
func (mr *MockVizierDBInterfaceMockRecorder) DB_Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB_Init", reflect.TypeOf((*MockVizierDBInterface)(nil).DB_Init))
}

// DeleteStudy mocks base method
func (m *MockVizierDBInterface) DeleteStudy(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteStudy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudy indicates an expected call of DeleteStudy
func (mr *MockVizierDBInterfaceMockRecorder) DeleteStudy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudy", reflect.TypeOf((*MockVizierDBInterface)(nil).DeleteStudy), arg0)
}

// DeleteTrial mocks base method
func (m *MockVizierDBInterface) DeleteTrial(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteTrial", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTrial indicates an expected call of DeleteTrial
func (mr *MockVizierDBInterfaceMockRecorder) DeleteTrial(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTrial", reflect.TypeOf((*MockVizierDBInterface)(nil).DeleteTrial), arg0)
}

// GetStudyConfig mocks base method
func (m *MockVizierDBInterface) GetStudyConfig(arg0 string) (*api.StudyConfig, error) {
	ret := m.ctrl.Call(m, "GetStudyConfig", arg0)
	ret0, _ := ret[0].(*api.StudyConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudyConfig indicates an expected call of GetStudyConfig
func (mr *MockVizierDBInterfaceMockRecorder) GetStudyConfig(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudyConfig", reflect.TypeOf((*MockVizierDBInterface)(nil).GetStudyConfig), arg0)
}

// GetStudyList mocks base method
func (m *MockVizierDBInterface) GetStudyList() ([]string, error) {
	ret := m.ctrl.Call(m, "GetStudyList")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudyList indicates an expected call of GetStudyList
func (mr *MockVizierDBInterfaceMockRecorder) GetStudyList() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudyList", reflect.TypeOf((*MockVizierDBInterface)(nil).GetStudyList))
}

// GetTrial mocks base method
func (m *MockVizierDBInterface) GetTrial(arg0 string) (*api.Trial, error) {
	ret := m.ctrl.Call(m, "GetTrial", arg0)
	ret0, _ := ret[0].(*api.Trial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrial indicates an expected call of GetTrial
func (mr *MockVizierDBInterfaceMockRecorder) GetTrial(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrial", reflect.TypeOf((*MockVizierDBInterface)(nil).GetTrial), arg0)
}

// GetTrialList mocks base method
func (m *MockVizierDBInterface) GetTrialList(arg0 string) ([]*api.Trial, error) {
	ret := m.ctrl.Call(m, "GetTrialList", arg0)
	ret0, _ := ret[0].([]*api.Trial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrialList indicates an expected call of GetTrialList
func (mr *MockVizierDBInterfaceMockRecorder) GetTrialList(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrialList", reflect.TypeOf((*MockVizierDBInterface)(nil).GetTrialList), arg0)
}

// GetTrialLogs mocks base method
func (m *MockVizierDBInterface) GetTrialLogs(arg0 string, arg1 *db.GetTrialLogOpts) ([]*db.TrialLog, error) {
	ret := m.ctrl.Call(m, "GetTrialLogs", arg0, arg1)
	ret0, _ := ret[0].([]*db.TrialLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrialLogs indicates an expected call of GetTrialLogs
func (mr *MockVizierDBInterfaceMockRecorder) GetTrialLogs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrialLogs", reflect.TypeOf((*MockVizierDBInterface)(nil).GetTrialLogs), arg0, arg1)
}

// GetTrialStatus mocks base method
func (m *MockVizierDBInterface) GetTrialStatus(arg0 string) (api.TrialState, error) {
	ret := m.ctrl.Call(m, "GetTrialStatus", arg0)
	ret0, _ := ret[0].(api.TrialState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrialStatus indicates an expected call of GetTrialStatus
func (mr *MockVizierDBInterfaceMockRecorder) GetTrialStatus(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrialStatus", reflect.TypeOf((*MockVizierDBInterface)(nil).GetTrialStatus), arg0)
}

// GetTrialTimestamp mocks base method
func (m *MockVizierDBInterface) GetTrialTimestamp(arg0 string) (*time.Time, error) {
	ret := m.ctrl.Call(m, "GetTrialTimestamp", arg0)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrialTimestamp indicates an expected call of GetTrialTimestamp
func (mr *MockVizierDBInterfaceMockRecorder) GetTrialTimestamp(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrialTimestamp", reflect.TypeOf((*MockVizierDBInterface)(nil).GetTrialTimestamp), arg0)
}

// StoreTrialLogs mocks base method
func (m *MockVizierDBInterface) StoreTrialLogs(arg0 string, arg1 []string) error {
	ret := m.ctrl.Call(m, "StoreTrialLogs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTrialLogs indicates an expected call of StoreTrialLogs
func (mr *MockVizierDBInterfaceMockRecorder) StoreTrialLogs(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTrialLogs", reflect.TypeOf((*MockVizierDBInterface)(nil).StoreTrialLogs), arg0, arg1)
}

// UpdateTrial mocks base method
func (m *MockVizierDBInterface) UpdateTrial(arg0 string, arg1 api.TrialState) error {
	ret := m.ctrl.Call(m, "UpdateTrial", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTrial indicates an expected call of UpdateTrial
func (mr *MockVizierDBInterfaceMockRecorder) UpdateTrial(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrial", reflect.TypeOf((*MockVizierDBInterface)(nil).UpdateTrial), arg0, arg1)
}
