// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeflow/katib/pkg/controller/v1alpha2/experiment/manifest (interfaces: Producer)

// Package mock is a generated GoMock package.
package mock

import (
	bytes "bytes"
	gomock "github.com/golang/mock/gomock"
	v1alpha2 "github.com/kubeflow/katib/pkg/api/operators/apis/experiment/v1alpha2"
	v1alpha20 "github.com/kubeflow/katib/pkg/api/v1alpha2"
	reflect "reflect"
)

// MockProducer is a mock of Producer interface
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

// MockProducerMockRecorder is the mock recorder for MockProducer
type MockProducerMockRecorder struct {
	mock *MockProducer
}

// NewMockProducer creates a new mock instance
func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	mock := &MockProducer{ctrl: ctrl}
	mock.recorder = &MockProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducer) EXPECT() *MockProducerMockRecorder {
	return m.recorder
}

// GetMetricsCollectorManifest mocks base method
func (m *MockProducer) GetMetricsCollectorManifest(arg0, arg1, arg2, arg3 string, arg4 []string, arg5 *v1alpha2.MetricsCollectorSpec) (*bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsCollectorManifest", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricsCollectorManifest indicates an expected call of GetMetricsCollectorManifest
func (mr *MockProducerMockRecorder) GetMetricsCollectorManifest(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsCollectorManifest", reflect.TypeOf((*MockProducer)(nil).GetMetricsCollectorManifest), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetRunSpec mocks base method
func (m *MockProducer) GetRunSpec(arg0 *v1alpha2.Experiment, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunSpec", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunSpec indicates an expected call of GetRunSpec
func (mr *MockProducerMockRecorder) GetRunSpec(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunSpec", reflect.TypeOf((*MockProducer)(nil).GetRunSpec), arg0, arg1, arg2, arg3)
}

// GetRunSpecWithHyperParameters mocks base method
func (m *MockProducer) GetRunSpecWithHyperParameters(arg0 *v1alpha2.Experiment, arg1, arg2, arg3 string, arg4 []*v1alpha20.ParameterAssignment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunSpecWithHyperParameters", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunSpecWithHyperParameters indicates an expected call of GetRunSpecWithHyperParameters
func (mr *MockProducerMockRecorder) GetRunSpecWithHyperParameters(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunSpecWithHyperParameters", reflect.TypeOf((*MockProducer)(nil).GetRunSpecWithHyperParameters), arg0, arg1, arg2, arg3, arg4)
}
