// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeflow/katib/api (interfaces: ManagerClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/kubeflow/katib/api"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockManagerClient is a mock of ManagerClient interface
type MockManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagerClientMockRecorder
}

// MockManagerClientMockRecorder is the mock recorder for MockManagerClient
type MockManagerClientMockRecorder struct {
	mock *MockManagerClient
}

// NewMockManagerClient creates a new mock instance
func NewMockManagerClient(ctrl *gomock.Controller) *MockManagerClient {
	mock := &MockManagerClient{ctrl: ctrl}
	mock.recorder = &MockManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagerClient) EXPECT() *MockManagerClientMockRecorder {
	return m.recorder
}

// AddMeasurementToTrials mocks base method
func (m *MockManagerClient) AddMeasurementToTrials(arg0 context.Context, arg1 *api.AddMeasurementToTrialsRequest, arg2 ...grpc.CallOption) (*api.AddMeasurementToTrialsReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMeasurementToTrials", varargs...)
	ret0, _ := ret[0].(*api.AddMeasurementToTrialsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMeasurementToTrials indicates an expected call of AddMeasurementToTrials
func (mr *MockManagerClientMockRecorder) AddMeasurementToTrials(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMeasurementToTrials", reflect.TypeOf((*MockManagerClient)(nil).AddMeasurementToTrials), varargs...)
}

// CompleteTrial mocks base method
func (m *MockManagerClient) CompleteTrial(arg0 context.Context, arg1 *api.CompleteTrialRequest, arg2 ...grpc.CallOption) (*api.CompleteTrialReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteTrial", varargs...)
	ret0, _ := ret[0].(*api.CompleteTrialReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteTrial indicates an expected call of CompleteTrial
func (mr *MockManagerClientMockRecorder) CompleteTrial(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTrial", reflect.TypeOf((*MockManagerClient)(nil).CompleteTrial), varargs...)
}

// CreateStudy mocks base method
func (m *MockManagerClient) CreateStudy(arg0 context.Context, arg1 *api.CreateStudyRequest, arg2 ...grpc.CallOption) (*api.CreateStudyReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStudy", varargs...)
	ret0, _ := ret[0].(*api.CreateStudyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudy indicates an expected call of CreateStudy
func (mr *MockManagerClientMockRecorder) CreateStudy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudy", reflect.TypeOf((*MockManagerClient)(nil).CreateStudy), varargs...)
}

// EarlyStopping mocks base method
func (m *MockManagerClient) EarlyStopping(arg0 context.Context, arg1 *api.EarlyStoppingRequest, arg2 ...grpc.CallOption) (*api.EarlyStoppingReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EarlyStopping", varargs...)
	ret0, _ := ret[0].(*api.EarlyStoppingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EarlyStopping indicates an expected call of EarlyStopping
func (mr *MockManagerClientMockRecorder) EarlyStopping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EarlyStopping", reflect.TypeOf((*MockManagerClient)(nil).EarlyStopping), varargs...)
}

// GetObjectValue mocks base method
func (m *MockManagerClient) GetObjectValue(arg0 context.Context, arg1 *api.GetObjectValueRequest, arg2 ...grpc.CallOption) (*api.GetObjectValueReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetObjectValue", varargs...)
	ret0, _ := ret[0].(*api.GetObjectValueReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectValue indicates an expected call of GetObjectValue
func (mr *MockManagerClientMockRecorder) GetObjectValue(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectValue", reflect.TypeOf((*MockManagerClient)(nil).GetObjectValue), varargs...)
}

// GetSavedModel mocks base method
func (m *MockManagerClient) GetSavedModel(arg0 context.Context, arg1 *api.GetSavedModelRequest, arg2 ...grpc.CallOption) (*api.GetSavedModelReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavedModel", varargs...)
	ret0, _ := ret[0].(*api.GetSavedModelReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedModel indicates an expected call of GetSavedModel
func (mr *MockManagerClientMockRecorder) GetSavedModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedModel", reflect.TypeOf((*MockManagerClient)(nil).GetSavedModel), varargs...)
}

// GetSavedModels mocks base method
func (m *MockManagerClient) GetSavedModels(arg0 context.Context, arg1 *api.GetSavedModelsRequest, arg2 ...grpc.CallOption) (*api.GetSavedModelsReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavedModels", varargs...)
	ret0, _ := ret[0].(*api.GetSavedModelsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedModels indicates an expected call of GetSavedModels
func (mr *MockManagerClientMockRecorder) GetSavedModels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedModels", reflect.TypeOf((*MockManagerClient)(nil).GetSavedModels), varargs...)
}

// GetSavedStudies mocks base method
func (m *MockManagerClient) GetSavedStudies(arg0 context.Context, arg1 *api.GetSavedStudiesRequest, arg2 ...grpc.CallOption) (*api.GetSavedStudiesReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavedStudies", varargs...)
	ret0, _ := ret[0].(*api.GetSavedStudiesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedStudies indicates an expected call of GetSavedStudies
func (mr *MockManagerClientMockRecorder) GetSavedStudies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedStudies", reflect.TypeOf((*MockManagerClient)(nil).GetSavedStudies), varargs...)
}

// GetStudies mocks base method
func (m *MockManagerClient) GetStudies(arg0 context.Context, arg1 *api.GetStudiesRequest, arg2 ...grpc.CallOption) (*api.GetStudiesReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStudies", varargs...)
	ret0, _ := ret[0].(*api.GetStudiesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudies indicates an expected call of GetStudies
func (mr *MockManagerClientMockRecorder) GetStudies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudies", reflect.TypeOf((*MockManagerClient)(nil).GetStudies), varargs...)
}

// InitializeSuggestService mocks base method
func (m *MockManagerClient) InitializeSuggestService(arg0 context.Context, arg1 *api.InitializeSuggestServiceRequest, arg2 ...grpc.CallOption) (*api.InitializeSuggestServiceReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InitializeSuggestService", varargs...)
	ret0, _ := ret[0].(*api.InitializeSuggestServiceReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeSuggestService indicates an expected call of InitializeSuggestService
func (mr *MockManagerClientMockRecorder) InitializeSuggestService(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeSuggestService", reflect.TypeOf((*MockManagerClient)(nil).InitializeSuggestService), varargs...)
}

// SaveModel mocks base method
func (m *MockManagerClient) SaveModel(arg0 context.Context, arg1 *api.SaveModelRequest, arg2 ...grpc.CallOption) (*api.SaveModelReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveModel", varargs...)
	ret0, _ := ret[0].(*api.SaveModelReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveModel indicates an expected call of SaveModel
func (mr *MockManagerClientMockRecorder) SaveModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveModel", reflect.TypeOf((*MockManagerClient)(nil).SaveModel), varargs...)
}

// SaveStudy mocks base method
func (m *MockManagerClient) SaveStudy(arg0 context.Context, arg1 *api.SaveStudyRequest, arg2 ...grpc.CallOption) (*api.SaveStudyReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveStudy", varargs...)
	ret0, _ := ret[0].(*api.SaveStudyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveStudy indicates an expected call of SaveStudy
func (mr *MockManagerClientMockRecorder) SaveStudy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStudy", reflect.TypeOf((*MockManagerClient)(nil).SaveStudy), varargs...)
}

// StopStudy mocks base method
func (m *MockManagerClient) StopStudy(arg0 context.Context, arg1 *api.StopStudyRequest, arg2 ...grpc.CallOption) (*api.StopStudyReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopStudy", varargs...)
	ret0, _ := ret[0].(*api.StopStudyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopStudy indicates an expected call of StopStudy
func (mr *MockManagerClientMockRecorder) StopStudy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStudy", reflect.TypeOf((*MockManagerClient)(nil).StopStudy), varargs...)
}

// SuggestTrials mocks base method
func (m *MockManagerClient) SuggestTrials(arg0 context.Context, arg1 *api.SuggestTrialsRequest, arg2 ...grpc.CallOption) (*api.SuggestTrialsReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SuggestTrials", varargs...)
	ret0, _ := ret[0].(*api.SuggestTrialsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestTrials indicates an expected call of SuggestTrials
func (mr *MockManagerClientMockRecorder) SuggestTrials(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestTrials", reflect.TypeOf((*MockManagerClient)(nil).SuggestTrials), varargs...)
}
