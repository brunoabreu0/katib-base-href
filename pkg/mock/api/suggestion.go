// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeflow/katib/pkg/api (interfaces: SuggestionClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/kubeflow/katib/pkg/api"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSuggestionClient is a mock of SuggestionClient interface
type MockSuggestionClient struct {
	ctrl     *gomock.Controller
	recorder *MockSuggestionClientMockRecorder
}

// MockSuggestionClientMockRecorder is the mock recorder for MockSuggestionClient
type MockSuggestionClientMockRecorder struct {
	mock *MockSuggestionClient
}

// NewMockSuggestionClient creates a new mock instance
func NewMockSuggestionClient(ctrl *gomock.Controller) *MockSuggestionClient {
	mock := &MockSuggestionClient{ctrl: ctrl}
	mock.recorder = &MockSuggestionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSuggestionClient) EXPECT() *MockSuggestionClientMockRecorder {
	return m.recorder
}

// GenerateTrials mocks base method
func (m *MockSuggestionClient) GenerateTrials(arg0 context.Context, arg1 *api.GenerateTrialsRequest, arg2 ...grpc.CallOption) (*api.GenerateTrialsReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GenerateTrials", varargs...)
	ret0, _ := ret[0].(*api.GenerateTrialsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTrials indicates an expected call of GenerateTrials
func (mr *MockSuggestionClientMockRecorder) GenerateTrials(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTrials", reflect.TypeOf((*MockSuggestionClient)(nil).GenerateTrials), varargs...)
}

// SetSuggestionParameters mocks base method
func (m *MockSuggestionClient) SetSuggestionParameters(arg0 context.Context, arg1 *api.SetSuggestionParametersRequest, arg2 ...grpc.CallOption) (*api.SetSuggestionParametersReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSuggestionParameters", varargs...)
	ret0, _ := ret[0].(*api.SetSuggestionParametersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSuggestionParameters indicates an expected call of SetSuggestionParameters
func (mr *MockSuggestionClientMockRecorder) SetSuggestionParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuggestionParameters", reflect.TypeOf((*MockSuggestionClient)(nil).SetSuggestionParameters), varargs...)
}

// StopSuggestion mocks base method
func (m *MockSuggestionClient) StopSuggestion(arg0 context.Context, arg1 *api.StopSuggestionRequest, arg2 ...grpc.CallOption) (*api.StopSuggestionReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopSuggestion", varargs...)
	ret0, _ := ret[0].(*api.StopSuggestionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopSuggestion indicates an expected call of StopSuggestion
func (mr *MockSuggestionClientMockRecorder) StopSuggestion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopSuggestion", reflect.TypeOf((*MockSuggestionClient)(nil).StopSuggestion), varargs...)
}
