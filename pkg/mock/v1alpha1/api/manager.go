// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kubeflow/katib/pkg/api/v1alpha1 (interfaces: ManagerClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/kubeflow/katib/pkg/api/v1alpha1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockManagerClient is a mock of ManagerClient interface
type MockManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagerClientMockRecorder
}

// MockManagerClientMockRecorder is the mock recorder for MockManagerClient
type MockManagerClientMockRecorder struct {
	mock *MockManagerClient
}

// NewMockManagerClient creates a new mock instance
func NewMockManagerClient(ctrl *gomock.Controller) *MockManagerClient {
	mock := &MockManagerClient{ctrl: ctrl}
	mock.recorder = &MockManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManagerClient) EXPECT() *MockManagerClientMockRecorder {
	return m.recorder
}

// CreateStudy mocks base method
func (m *MockManagerClient) CreateStudy(arg0 context.Context, arg1 *v1alpha1.CreateStudyRequest, arg2 ...grpc.CallOption) (*v1alpha1.CreateStudyReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateStudy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.CreateStudyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudy indicates an expected call of CreateStudy
func (mr *MockManagerClientMockRecorder) CreateStudy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudy", reflect.TypeOf((*MockManagerClient)(nil).CreateStudy), varargs...)
}

// CreateTrial mocks base method
func (m *MockManagerClient) CreateTrial(arg0 context.Context, arg1 *v1alpha1.CreateTrialRequest, arg2 ...grpc.CallOption) (*v1alpha1.CreateTrialReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTrial", varargs...)
	ret0, _ := ret[0].(*v1alpha1.CreateTrialReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTrial indicates an expected call of CreateTrial
func (mr *MockManagerClientMockRecorder) CreateTrial(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrial", reflect.TypeOf((*MockManagerClient)(nil).CreateTrial), varargs...)
}

// DeleteStudy mocks base method
func (m *MockManagerClient) DeleteStudy(arg0 context.Context, arg1 *v1alpha1.DeleteStudyRequest, arg2 ...grpc.CallOption) (*v1alpha1.DeleteStudyReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteStudy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.DeleteStudyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStudy indicates an expected call of DeleteStudy
func (mr *MockManagerClientMockRecorder) DeleteStudy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudy", reflect.TypeOf((*MockManagerClient)(nil).DeleteStudy), varargs...)
}

// GetEarlyStoppingParameterList mocks base method
func (m *MockManagerClient) GetEarlyStoppingParameterList(arg0 context.Context, arg1 *v1alpha1.GetEarlyStoppingParameterListRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetEarlyStoppingParameterListReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEarlyStoppingParameterList", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetEarlyStoppingParameterListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEarlyStoppingParameterList indicates an expected call of GetEarlyStoppingParameterList
func (mr *MockManagerClientMockRecorder) GetEarlyStoppingParameterList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarlyStoppingParameterList", reflect.TypeOf((*MockManagerClient)(nil).GetEarlyStoppingParameterList), varargs...)
}

// GetEarlyStoppingParameters mocks base method
func (m *MockManagerClient) GetEarlyStoppingParameters(arg0 context.Context, arg1 *v1alpha1.GetEarlyStoppingParametersRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetEarlyStoppingParametersReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEarlyStoppingParameters", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetEarlyStoppingParametersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEarlyStoppingParameters indicates an expected call of GetEarlyStoppingParameters
func (mr *MockManagerClientMockRecorder) GetEarlyStoppingParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEarlyStoppingParameters", reflect.TypeOf((*MockManagerClient)(nil).GetEarlyStoppingParameters), varargs...)
}

// GetMetrics mocks base method
func (m *MockManagerClient) GetMetrics(arg0 context.Context, arg1 *v1alpha1.GetMetricsRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetMetricsReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetrics", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetMetricsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics
func (mr *MockManagerClientMockRecorder) GetMetrics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockManagerClient)(nil).GetMetrics), varargs...)
}

// GetSavedModels mocks base method
func (m *MockManagerClient) GetSavedModels(arg0 context.Context, arg1 *v1alpha1.GetSavedModelsRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetSavedModelsReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavedModels", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetSavedModelsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedModels indicates an expected call of GetSavedModels
func (mr *MockManagerClientMockRecorder) GetSavedModels(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedModels", reflect.TypeOf((*MockManagerClient)(nil).GetSavedModels), varargs...)
}

// GetSavedStudies mocks base method
func (m *MockManagerClient) GetSavedStudies(arg0 context.Context, arg1 *v1alpha1.GetSavedStudiesRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetSavedStudiesReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSavedStudies", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetSavedStudiesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedStudies indicates an expected call of GetSavedStudies
func (mr *MockManagerClientMockRecorder) GetSavedStudies(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedStudies", reflect.TypeOf((*MockManagerClient)(nil).GetSavedStudies), varargs...)
}

// GetShouldStopWorkers mocks base method
func (m *MockManagerClient) GetShouldStopWorkers(arg0 context.Context, arg1 *v1alpha1.GetShouldStopWorkersRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetShouldStopWorkersReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetShouldStopWorkers", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetShouldStopWorkersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShouldStopWorkers indicates an expected call of GetShouldStopWorkers
func (mr *MockManagerClientMockRecorder) GetShouldStopWorkers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShouldStopWorkers", reflect.TypeOf((*MockManagerClient)(nil).GetShouldStopWorkers), varargs...)
}

// GetStudy mocks base method
func (m *MockManagerClient) GetStudy(arg0 context.Context, arg1 *v1alpha1.GetStudyRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetStudyReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStudy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetStudyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudy indicates an expected call of GetStudy
func (mr *MockManagerClientMockRecorder) GetStudy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudy", reflect.TypeOf((*MockManagerClient)(nil).GetStudy), varargs...)
}

// GetStudyList mocks base method
func (m *MockManagerClient) GetStudyList(arg0 context.Context, arg1 *v1alpha1.GetStudyListRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetStudyListReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStudyList", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetStudyListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudyList indicates an expected call of GetStudyList
func (mr *MockManagerClientMockRecorder) GetStudyList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudyList", reflect.TypeOf((*MockManagerClient)(nil).GetStudyList), varargs...)
}

// GetSuggestionParameterList mocks base method
func (m *MockManagerClient) GetSuggestionParameterList(arg0 context.Context, arg1 *v1alpha1.GetSuggestionParameterListRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetSuggestionParameterListReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuggestionParameterList", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetSuggestionParameterListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestionParameterList indicates an expected call of GetSuggestionParameterList
func (mr *MockManagerClientMockRecorder) GetSuggestionParameterList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestionParameterList", reflect.TypeOf((*MockManagerClient)(nil).GetSuggestionParameterList), varargs...)
}

// GetSuggestionParameters mocks base method
func (m *MockManagerClient) GetSuggestionParameters(arg0 context.Context, arg1 *v1alpha1.GetSuggestionParametersRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetSuggestionParametersReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuggestionParameters", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetSuggestionParametersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestionParameters indicates an expected call of GetSuggestionParameters
func (mr *MockManagerClientMockRecorder) GetSuggestionParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestionParameters", reflect.TypeOf((*MockManagerClient)(nil).GetSuggestionParameters), varargs...)
}

// GetSuggestions mocks base method
func (m *MockManagerClient) GetSuggestions(arg0 context.Context, arg1 *v1alpha1.GetSuggestionsRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetSuggestionsReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSuggestions", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetSuggestionsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestions indicates an expected call of GetSuggestions
func (mr *MockManagerClientMockRecorder) GetSuggestions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestions", reflect.TypeOf((*MockManagerClient)(nil).GetSuggestions), varargs...)
}

// GetTrial mocks base method
func (m *MockManagerClient) GetTrial(arg0 context.Context, arg1 *v1alpha1.GetTrialRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetTrialReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrial", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetTrialReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrial indicates an expected call of GetTrial
func (mr *MockManagerClientMockRecorder) GetTrial(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrial", reflect.TypeOf((*MockManagerClient)(nil).GetTrial), varargs...)
}

// GetTrials mocks base method
func (m *MockManagerClient) GetTrials(arg0 context.Context, arg1 *v1alpha1.GetTrialsRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetTrialsReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrials", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetTrialsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrials indicates an expected call of GetTrials
func (mr *MockManagerClientMockRecorder) GetTrials(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrials", reflect.TypeOf((*MockManagerClient)(nil).GetTrials), varargs...)
}

// GetWorkerFullInfo mocks base method
func (m *MockManagerClient) GetWorkerFullInfo(arg0 context.Context, arg1 *v1alpha1.GetWorkerFullInfoRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetWorkerFullInfoReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkerFullInfo", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetWorkerFullInfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkerFullInfo indicates an expected call of GetWorkerFullInfo
func (mr *MockManagerClientMockRecorder) GetWorkerFullInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkerFullInfo", reflect.TypeOf((*MockManagerClient)(nil).GetWorkerFullInfo), varargs...)
}

// GetWorkers mocks base method
func (m *MockManagerClient) GetWorkers(arg0 context.Context, arg1 *v1alpha1.GetWorkersRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetWorkersReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkers", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetWorkersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkers indicates an expected call of GetWorkers
func (mr *MockManagerClientMockRecorder) GetWorkers(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkers", reflect.TypeOf((*MockManagerClient)(nil).GetWorkers), varargs...)
}

// RegisterWorker mocks base method
func (m *MockManagerClient) RegisterWorker(arg0 context.Context, arg1 *v1alpha1.RegisterWorkerRequest, arg2 ...grpc.CallOption) (*v1alpha1.RegisterWorkerReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterWorker", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RegisterWorkerReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterWorker indicates an expected call of RegisterWorker
func (mr *MockManagerClientMockRecorder) RegisterWorker(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWorker", reflect.TypeOf((*MockManagerClient)(nil).RegisterWorker), varargs...)
}

// ReportMetricsLogs mocks base method
func (m *MockManagerClient) ReportMetricsLogs(arg0 context.Context, arg1 *v1alpha1.ReportMetricsLogsRequest, arg2 ...grpc.CallOption) (*v1alpha1.ReportMetricsLogsReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportMetricsLogs", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ReportMetricsLogsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportMetricsLogs indicates an expected call of ReportMetricsLogs
func (mr *MockManagerClientMockRecorder) ReportMetricsLogs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportMetricsLogs", reflect.TypeOf((*MockManagerClient)(nil).ReportMetricsLogs), varargs...)
}

// SaveModel mocks base method
func (m *MockManagerClient) SaveModel(arg0 context.Context, arg1 *v1alpha1.SaveModelRequest, arg2 ...grpc.CallOption) (*v1alpha1.SaveModelReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveModel", varargs...)
	ret0, _ := ret[0].(*v1alpha1.SaveModelReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveModel indicates an expected call of SaveModel
func (mr *MockManagerClientMockRecorder) SaveModel(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveModel", reflect.TypeOf((*MockManagerClient)(nil).SaveModel), varargs...)
}

// SaveStudy mocks base method
func (m *MockManagerClient) SaveStudy(arg0 context.Context, arg1 *v1alpha1.SaveStudyRequest, arg2 ...grpc.CallOption) (*v1alpha1.SaveStudyReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveStudy", varargs...)
	ret0, _ := ret[0].(*v1alpha1.SaveStudyReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveStudy indicates an expected call of SaveStudy
func (mr *MockManagerClientMockRecorder) SaveStudy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveStudy", reflect.TypeOf((*MockManagerClient)(nil).SaveStudy), varargs...)
}

// SetEarlyStoppingParameters mocks base method
func (m *MockManagerClient) SetEarlyStoppingParameters(arg0 context.Context, arg1 *v1alpha1.SetEarlyStoppingParametersRequest, arg2 ...grpc.CallOption) (*v1alpha1.SetEarlyStoppingParametersReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetEarlyStoppingParameters", varargs...)
	ret0, _ := ret[0].(*v1alpha1.SetEarlyStoppingParametersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEarlyStoppingParameters indicates an expected call of SetEarlyStoppingParameters
func (mr *MockManagerClientMockRecorder) SetEarlyStoppingParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEarlyStoppingParameters", reflect.TypeOf((*MockManagerClient)(nil).SetEarlyStoppingParameters), varargs...)
}

// SetSuggestionParameters mocks base method
func (m *MockManagerClient) SetSuggestionParameters(arg0 context.Context, arg1 *v1alpha1.SetSuggestionParametersRequest, arg2 ...grpc.CallOption) (*v1alpha1.SetSuggestionParametersReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetSuggestionParameters", varargs...)
	ret0, _ := ret[0].(*v1alpha1.SetSuggestionParametersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSuggestionParameters indicates an expected call of SetSuggestionParameters
func (mr *MockManagerClientMockRecorder) SetSuggestionParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuggestionParameters", reflect.TypeOf((*MockManagerClient)(nil).SetSuggestionParameters), varargs...)
}

// UpdateWorkerState mocks base method
func (m *MockManagerClient) UpdateWorkerState(arg0 context.Context, arg1 *v1alpha1.UpdateWorkerStateRequest, arg2 ...grpc.CallOption) (*v1alpha1.UpdateWorkerStateReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkerState", varargs...)
	ret0, _ := ret[0].(*v1alpha1.UpdateWorkerStateReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkerState indicates an expected call of UpdateWorkerState
func (mr *MockManagerClientMockRecorder) UpdateWorkerState(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkerState", reflect.TypeOf((*MockManagerClient)(nil).UpdateWorkerState), varargs...)
}

// ValidateSuggestionParameters mocks base method
func (m *MockManagerClient) ValidateSuggestionParameters(arg0 context.Context, arg1 *v1alpha1.ValidateSuggestionParametersRequest, arg2 ...grpc.CallOption) (*v1alpha1.ValidateSuggestionParametersReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateSuggestionParameters", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ValidateSuggestionParametersReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSuggestionParameters indicates an expected call of ValidateSuggestionParameters
func (mr *MockManagerClientMockRecorder) ValidateSuggestionParameters(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSuggestionParameters", reflect.TypeOf((*MockManagerClient)(nil).ValidateSuggestionParameters), varargs...)
}
