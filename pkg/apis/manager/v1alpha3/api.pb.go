// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api_v1_alpha3 is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	FeasibleSpace
	ParameterSpec
	ObjectiveSpec
	AlgorithmSetting
	EarlyStoppingSpec
	AlgorithmSpec
	NasConfig
	GraphConfig
	Operation
	ExperimentSpec
	ExperimentStatus
	Experiment
	ParameterAssignment
	Metric
	MetricLog
	Observation
	ObservationLog
	TrialSpec
	TrialStatus
	Trial
	RegisterExperimentRequest
	RegisterExperimentReply
	PreCheckRegisterExperimentReply
	DeleteExperimentRequest
	DeleteExperimentReply
	GetExperimentRequest
	GetExperimentReply
	ExperimentSummary
	GetExperimentListRequest
	GetExperimentListReply
	UpdateExperimentStatusRequest
	UpdateExperimentStatusReply
	UpdateAlgorithmExtraSettingsRequest
	UpdateAlgorithmExtraSettingsReply
	GetAlgorithmExtraSettingsRequest
	GetAlgorithmExtraSettingsReply
	RegisterTrialRequest
	RegisterTrialReply
	DeleteTrialRequest
	DeleteTrialReply
	GetTrialListRequest
	GetTrialListReply
	GetTrialRequest
	GetTrialReply
	UpdateTrialStatusRequest
	UpdateTrialStatusReply
	ReportObservationLogRequest
	ReportObservationLogReply
	GetObservationLogRequest
	GetObservationLogReply
	GetSuggestionsRequest
	GetSuggestionsReply
	ValidateAlgorithmSettingsRequest
	ValidateAlgorithmSettingsReply
*/
package api_v1_alpha3

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Types of value for HyperParameter.
type ParameterType int32

const (
	ParameterType_UNKNOWN_TYPE ParameterType = 0
	ParameterType_DOUBLE       ParameterType = 1
	ParameterType_INT          ParameterType = 2
	ParameterType_DISCRETE     ParameterType = 3
	ParameterType_CATEGORICAL  ParameterType = 4
)

var ParameterType_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "DOUBLE",
	2: "INT",
	3: "DISCRETE",
	4: "CATEGORICAL",
}
var ParameterType_value = map[string]int32{
	"UNKNOWN_TYPE": 0,
	"DOUBLE":       1,
	"INT":          2,
	"DISCRETE":     3,
	"CATEGORICAL":  4,
}

func (x ParameterType) String() string {
	return proto.EnumName(ParameterType_name, int32(x))
}
func (ParameterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Direction of optimization. Minimize or Maximize.
type ObjectiveType int32

const (
	ObjectiveType_UNKNOWN  ObjectiveType = 0
	ObjectiveType_MINIMIZE ObjectiveType = 1
	ObjectiveType_MAXIMIZE ObjectiveType = 2
)

var ObjectiveType_name = map[int32]string{
	0: "UNKNOWN",
	1: "MINIMIZE",
	2: "MAXIMIZE",
}
var ObjectiveType_value = map[string]int32{
	"UNKNOWN":  0,
	"MINIMIZE": 1,
	"MAXIMIZE": 2,
}

func (x ObjectiveType) String() string {
	return proto.EnumName(ObjectiveType_name, int32(x))
}
func (ObjectiveType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ExperimentStatus_ExperimentConditionType int32

const (
	ExperimentStatus_CREATED    ExperimentStatus_ExperimentConditionType = 0
	ExperimentStatus_RUNNING    ExperimentStatus_ExperimentConditionType = 1
	ExperimentStatus_RESTARTING ExperimentStatus_ExperimentConditionType = 2
	ExperimentStatus_SUCCEEDED  ExperimentStatus_ExperimentConditionType = 3
	ExperimentStatus_FAILED     ExperimentStatus_ExperimentConditionType = 4
	ExperimentStatus_UNKNOWN    ExperimentStatus_ExperimentConditionType = 5
)

var ExperimentStatus_ExperimentConditionType_name = map[int32]string{
	0: "CREATED",
	1: "RUNNING",
	2: "RESTARTING",
	3: "SUCCEEDED",
	4: "FAILED",
	5: "UNKNOWN",
}
var ExperimentStatus_ExperimentConditionType_value = map[string]int32{
	"CREATED":    0,
	"RUNNING":    1,
	"RESTARTING": 2,
	"SUCCEEDED":  3,
	"FAILED":     4,
	"UNKNOWN":    5,
}

func (x ExperimentStatus_ExperimentConditionType) String() string {
	return proto.EnumName(ExperimentStatus_ExperimentConditionType_name, int32(x))
}
func (ExperimentStatus_ExperimentConditionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0}
}

type TrialStatus_TrialConditionType int32

const (
	TrialStatus_CREATED   TrialStatus_TrialConditionType = 0
	TrialStatus_RUNNING   TrialStatus_TrialConditionType = 1
	TrialStatus_SUCCEEDED TrialStatus_TrialConditionType = 2
	TrialStatus_KILLED    TrialStatus_TrialConditionType = 3
	TrialStatus_FAILED    TrialStatus_TrialConditionType = 4
	TrialStatus_UNKNOWN   TrialStatus_TrialConditionType = 5
)

var TrialStatus_TrialConditionType_name = map[int32]string{
	0: "CREATED",
	1: "RUNNING",
	2: "SUCCEEDED",
	3: "KILLED",
	4: "FAILED",
	5: "UNKNOWN",
}
var TrialStatus_TrialConditionType_value = map[string]int32{
	"CREATED":   0,
	"RUNNING":   1,
	"SUCCEEDED": 2,
	"KILLED":    3,
	"FAILED":    4,
	"UNKNOWN":   5,
}

func (x TrialStatus_TrialConditionType) String() string {
	return proto.EnumName(TrialStatus_TrialConditionType_name, int32(x))
}
func (TrialStatus_TrialConditionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18, 0}
}

// *
// Feasible space for optimization.
// Int and Double type use Max/Min.
// Discrete and Categorical type use List.
type FeasibleSpace struct {
	Max  string   `protobuf:"bytes,1,opt,name=max" json:"max,omitempty"`
	Min  string   `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
	List []string `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Step string   `protobuf:"bytes,4,opt,name=step" json:"step,omitempty"`
}

func (m *FeasibleSpace) Reset()                    { *m = FeasibleSpace{} }
func (m *FeasibleSpace) String() string            { return proto.CompactTextString(m) }
func (*FeasibleSpace) ProtoMessage()               {}
func (*FeasibleSpace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FeasibleSpace) GetMax() string {
	if m != nil {
		return m.Max
	}
	return ""
}

func (m *FeasibleSpace) GetMin() string {
	if m != nil {
		return m.Min
	}
	return ""
}

func (m *FeasibleSpace) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *FeasibleSpace) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// *
// Config for a Hyper parameter.
// Katib will create each Hyper parameter from this config.
type ParameterSpec struct {
	Name          string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ParameterType ParameterType  `protobuf:"varint,2,opt,name=parameter_type,json=parameterType,enum=api.v1.alpha3.ParameterType" json:"parameter_type,omitempty"`
	FeasibleSpace *FeasibleSpace `protobuf:"bytes,3,opt,name=feasible_space,json=feasibleSpace" json:"feasible_space,omitempty"`
}

func (m *ParameterSpec) Reset()                    { *m = ParameterSpec{} }
func (m *ParameterSpec) String() string            { return proto.CompactTextString(m) }
func (*ParameterSpec) ProtoMessage()               {}
func (*ParameterSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ParameterSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParameterSpec) GetParameterType() ParameterType {
	if m != nil {
		return m.ParameterType
	}
	return ParameterType_UNKNOWN_TYPE
}

func (m *ParameterSpec) GetFeasibleSpace() *FeasibleSpace {
	if m != nil {
		return m.FeasibleSpace
	}
	return nil
}

type ObjectiveSpec struct {
	Type                  ObjectiveType `protobuf:"varint,1,opt,name=type,enum=api.v1.alpha3.ObjectiveType" json:"type,omitempty"`
	Goal                  float64       `protobuf:"fixed64,2,opt,name=goal" json:"goal,omitempty"`
	ObjectiveMetricName   string        `protobuf:"bytes,3,opt,name=objective_metric_name,json=objectiveMetricName" json:"objective_metric_name,omitempty"`
	AdditionalMetricNames []string      `protobuf:"bytes,4,rep,name=additional_metric_names,json=additionalMetricNames" json:"additional_metric_names,omitempty"`
}

func (m *ObjectiveSpec) Reset()                    { *m = ObjectiveSpec{} }
func (m *ObjectiveSpec) String() string            { return proto.CompactTextString(m) }
func (*ObjectiveSpec) ProtoMessage()               {}
func (*ObjectiveSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ObjectiveSpec) GetType() ObjectiveType {
	if m != nil {
		return m.Type
	}
	return ObjectiveType_UNKNOWN
}

func (m *ObjectiveSpec) GetGoal() float64 {
	if m != nil {
		return m.Goal
	}
	return 0
}

func (m *ObjectiveSpec) GetObjectiveMetricName() string {
	if m != nil {
		return m.ObjectiveMetricName
	}
	return ""
}

func (m *ObjectiveSpec) GetAdditionalMetricNames() []string {
	if m != nil {
		return m.AdditionalMetricNames
	}
	return nil
}

type AlgorithmSetting struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *AlgorithmSetting) Reset()                    { *m = AlgorithmSetting{} }
func (m *AlgorithmSetting) String() string            { return proto.CompactTextString(m) }
func (*AlgorithmSetting) ProtoMessage()               {}
func (*AlgorithmSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AlgorithmSetting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AlgorithmSetting) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EarlyStoppingSpec struct {
}

func (m *EarlyStoppingSpec) Reset()                    { *m = EarlyStoppingSpec{} }
func (m *EarlyStoppingSpec) String() string            { return proto.CompactTextString(m) }
func (*EarlyStoppingSpec) ProtoMessage()               {}
func (*EarlyStoppingSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AlgorithmSpec struct {
	AlgorithmName     string              `protobuf:"bytes,1,opt,name=algorithm_name,json=algorithmName" json:"algorithm_name,omitempty"`
	AlgorithmSetting  []*AlgorithmSetting `protobuf:"bytes,2,rep,name=algorithm_setting,json=algorithmSetting" json:"algorithm_setting,omitempty"`
	EarlyStoppingSpec *EarlyStoppingSpec  `protobuf:"bytes,3,opt,name=early_stopping_spec,json=earlyStoppingSpec" json:"early_stopping_spec,omitempty"`
}

func (m *AlgorithmSpec) Reset()                    { *m = AlgorithmSpec{} }
func (m *AlgorithmSpec) String() string            { return proto.CompactTextString(m) }
func (*AlgorithmSpec) ProtoMessage()               {}
func (*AlgorithmSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AlgorithmSpec) GetAlgorithmName() string {
	if m != nil {
		return m.AlgorithmName
	}
	return ""
}

func (m *AlgorithmSpec) GetAlgorithmSetting() []*AlgorithmSetting {
	if m != nil {
		return m.AlgorithmSetting
	}
	return nil
}

func (m *AlgorithmSpec) GetEarlyStoppingSpec() *EarlyStoppingSpec {
	if m != nil {
		return m.EarlyStoppingSpec
	}
	return nil
}

// *
// NasConfig contains a config of NAS job
type NasConfig struct {
	GraphConfig *GraphConfig          `protobuf:"bytes,1,opt,name=graph_config,json=graphConfig" json:"graph_config,omitempty"`
	Operations  *NasConfig_Operations `protobuf:"bytes,2,opt,name=operations" json:"operations,omitempty"`
}

func (m *NasConfig) Reset()                    { *m = NasConfig{} }
func (m *NasConfig) String() string            { return proto.CompactTextString(m) }
func (*NasConfig) ProtoMessage()               {}
func (*NasConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NasConfig) GetGraphConfig() *GraphConfig {
	if m != nil {
		return m.GraphConfig
	}
	return nil
}

func (m *NasConfig) GetOperations() *NasConfig_Operations {
	if m != nil {
		return m.Operations
	}
	return nil
}

type NasConfig_Operations struct {
	Operation []*Operation `protobuf:"bytes,1,rep,name=operation" json:"operation,omitempty"`
}

func (m *NasConfig_Operations) Reset()                    { *m = NasConfig_Operations{} }
func (m *NasConfig_Operations) String() string            { return proto.CompactTextString(m) }
func (*NasConfig_Operations) ProtoMessage()               {}
func (*NasConfig_Operations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *NasConfig_Operations) GetOperation() []*Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

// *
// GraphConfig contains a config of DAG
type GraphConfig struct {
	NumLayers   int32   `protobuf:"varint,1,opt,name=num_layers,json=numLayers" json:"num_layers,omitempty"`
	InputSizes  []int32 `protobuf:"varint,2,rep,packed,name=input_sizes,json=inputSizes" json:"input_sizes,omitempty"`
	OutputSizes []int32 `protobuf:"varint,3,rep,packed,name=output_sizes,json=outputSizes" json:"output_sizes,omitempty"`
}

func (m *GraphConfig) Reset()                    { *m = GraphConfig{} }
func (m *GraphConfig) String() string            { return proto.CompactTextString(m) }
func (*GraphConfig) ProtoMessage()               {}
func (*GraphConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GraphConfig) GetNumLayers() int32 {
	if m != nil {
		return m.NumLayers
	}
	return 0
}

func (m *GraphConfig) GetInputSizes() []int32 {
	if m != nil {
		return m.InputSizes
	}
	return nil
}

func (m *GraphConfig) GetOutputSizes() []int32 {
	if m != nil {
		return m.OutputSizes
	}
	return nil
}

// *
// Config for operations in DAG
type Operation struct {
	OperationType  string                    `protobuf:"bytes,1,opt,name=operation_type,json=operationType" json:"operation_type,omitempty"`
	ParameterSpecs *Operation_ParameterSpecs `protobuf:"bytes,2,opt,name=parameter_specs,json=parameterSpecs" json:"parameter_specs,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Operation) GetOperationType() string {
	if m != nil {
		return m.OperationType
	}
	return ""
}

func (m *Operation) GetParameterSpecs() *Operation_ParameterSpecs {
	if m != nil {
		return m.ParameterSpecs
	}
	return nil
}

// *
// List of ParameterSpec
type Operation_ParameterSpecs struct {
	Parameters []*ParameterSpec `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
}

func (m *Operation_ParameterSpecs) Reset()                    { *m = Operation_ParameterSpecs{} }
func (m *Operation_ParameterSpecs) String() string            { return proto.CompactTextString(m) }
func (*Operation_ParameterSpecs) ProtoMessage()               {}
func (*Operation_ParameterSpecs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *Operation_ParameterSpecs) GetParameters() []*ParameterSpec {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// *
// Spec of a Experiment. Experiment represents a single optimization run over a feasible space.
// Each Experiment contains a configuration describing the feasible space, as well as a set of Trials.
// It is assumed that objective function f(x) does not change in the course of a Experiment.
type ExperimentSpec struct {
	ParameterSpecs       *ExperimentSpec_ParameterSpecs `protobuf:"bytes,1,opt,name=parameter_specs,json=parameterSpecs" json:"parameter_specs,omitempty"`
	Objective            *ObjectiveSpec                 `protobuf:"bytes,2,opt,name=objective" json:"objective,omitempty"`
	Algorithm            *AlgorithmSpec                 `protobuf:"bytes,3,opt,name=algorithm" json:"algorithm,omitempty"`
	TrialTemplate        string                         `protobuf:"bytes,4,opt,name=trial_template,json=trialTemplate" json:"trial_template,omitempty"`
	MetricsCollectorSpec string                         `protobuf:"bytes,5,opt,name=metrics_collector_spec,json=metricsCollectorSpec" json:"metrics_collector_spec,omitempty"`
	ParallelTrialCount   int32                          `protobuf:"varint,6,opt,name=parallel_trial_count,json=parallelTrialCount" json:"parallel_trial_count,omitempty"`
	MaxTrialCount        int32                          `protobuf:"varint,7,opt,name=max_trial_count,json=maxTrialCount" json:"max_trial_count,omitempty"`
	NasConfig            *NasConfig                     `protobuf:"bytes,8,opt,name=nas_config,json=nasConfig" json:"nas_config,omitempty"`
}

func (m *ExperimentSpec) Reset()                    { *m = ExperimentSpec{} }
func (m *ExperimentSpec) String() string            { return proto.CompactTextString(m) }
func (*ExperimentSpec) ProtoMessage()               {}
func (*ExperimentSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ExperimentSpec) GetParameterSpecs() *ExperimentSpec_ParameterSpecs {
	if m != nil {
		return m.ParameterSpecs
	}
	return nil
}

func (m *ExperimentSpec) GetObjective() *ObjectiveSpec {
	if m != nil {
		return m.Objective
	}
	return nil
}

func (m *ExperimentSpec) GetAlgorithm() *AlgorithmSpec {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

func (m *ExperimentSpec) GetTrialTemplate() string {
	if m != nil {
		return m.TrialTemplate
	}
	return ""
}

func (m *ExperimentSpec) GetMetricsCollectorSpec() string {
	if m != nil {
		return m.MetricsCollectorSpec
	}
	return ""
}

func (m *ExperimentSpec) GetParallelTrialCount() int32 {
	if m != nil {
		return m.ParallelTrialCount
	}
	return 0
}

func (m *ExperimentSpec) GetMaxTrialCount() int32 {
	if m != nil {
		return m.MaxTrialCount
	}
	return 0
}

func (m *ExperimentSpec) GetNasConfig() *NasConfig {
	if m != nil {
		return m.NasConfig
	}
	return nil
}

// *
// List of ParameterSpec
type ExperimentSpec_ParameterSpecs struct {
	Parameters []*ParameterSpec `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
}

func (m *ExperimentSpec_ParameterSpecs) Reset()         { *m = ExperimentSpec_ParameterSpecs{} }
func (m *ExperimentSpec_ParameterSpecs) String() string { return proto.CompactTextString(m) }
func (*ExperimentSpec_ParameterSpecs) ProtoMessage()    {}
func (*ExperimentSpec_ParameterSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 0}
}

func (m *ExperimentSpec_ParameterSpecs) GetParameters() []*ParameterSpec {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type ExperimentStatus struct {
	StartTime      string                                   `protobuf:"bytes,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	CompletionTime string                                   `protobuf:"bytes,2,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	Condition      ExperimentStatus_ExperimentConditionType `protobuf:"varint,3,opt,name=condition,enum=api.v1.alpha3.ExperimentStatus_ExperimentConditionType" json:"condition,omitempty"`
}

func (m *ExperimentStatus) Reset()                    { *m = ExperimentStatus{} }
func (m *ExperimentStatus) String() string            { return proto.CompactTextString(m) }
func (*ExperimentStatus) ProtoMessage()               {}
func (*ExperimentStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ExperimentStatus) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *ExperimentStatus) GetCompletionTime() string {
	if m != nil {
		return m.CompletionTime
	}
	return ""
}

func (m *ExperimentStatus) GetCondition() ExperimentStatus_ExperimentConditionType {
	if m != nil {
		return m.Condition
	}
	return ExperimentStatus_CREATED
}

type Experiment struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Spec   *ExperimentSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *ExperimentStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Experiment) Reset()                    { *m = Experiment{} }
func (m *Experiment) String() string            { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()               {}
func (*Experiment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Experiment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Experiment) GetSpec() *ExperimentSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Experiment) GetStatus() *ExperimentStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ParameterAssignment struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ParameterAssignment) Reset()                    { *m = ParameterAssignment{} }
func (m *ParameterAssignment) String() string            { return proto.CompactTextString(m) }
func (*ParameterAssignment) ProtoMessage()               {}
func (*ParameterAssignment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ParameterAssignment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParameterAssignment) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Metric struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metric) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MetricLog struct {
	TimeStamp string  `protobuf:"bytes,1,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	Metric    *Metric `protobuf:"bytes,2,opt,name=metric" json:"metric,omitempty"`
}

func (m *MetricLog) Reset()                    { *m = MetricLog{} }
func (m *MetricLog) String() string            { return proto.CompactTextString(m) }
func (*MetricLog) ProtoMessage()               {}
func (*MetricLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *MetricLog) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

func (m *MetricLog) GetMetric() *Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

type Observation struct {
	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *Observation) Reset()                    { *m = Observation{} }
func (m *Observation) String() string            { return proto.CompactTextString(m) }
func (*Observation) ProtoMessage()               {}
func (*Observation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Observation) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type ObservationLog struct {
	MetricLogs []*MetricLog `protobuf:"bytes,1,rep,name=metric_logs,json=metricLogs" json:"metric_logs,omitempty"`
}

func (m *ObservationLog) Reset()                    { *m = ObservationLog{} }
func (m *ObservationLog) String() string            { return proto.CompactTextString(m) }
func (*ObservationLog) ProtoMessage()               {}
func (*ObservationLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ObservationLog) GetMetricLogs() []*MetricLog {
	if m != nil {
		return m.MetricLogs
	}
	return nil
}

type TrialSpec struct {
	ExperimentName       string                          `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName" json:"experiment_name,omitempty"`
	Objective            *ObjectiveSpec                  `protobuf:"bytes,2,opt,name=objective" json:"objective,omitempty"`
	ParameterAssignments *TrialSpec_ParameterAssignments `protobuf:"bytes,3,opt,name=parameter_assignments,json=parameterAssignments" json:"parameter_assignments,omitempty"`
	RunSpec              string                          `protobuf:"bytes,4,opt,name=run_spec,json=runSpec" json:"run_spec,omitempty"`
	MetricsCollectorSpec string                          `protobuf:"bytes,5,opt,name=metrics_collector_spec,json=metricsCollectorSpec" json:"metrics_collector_spec,omitempty"`
}

func (m *TrialSpec) Reset()                    { *m = TrialSpec{} }
func (m *TrialSpec) String() string            { return proto.CompactTextString(m) }
func (*TrialSpec) ProtoMessage()               {}
func (*TrialSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TrialSpec) GetExperimentName() string {
	if m != nil {
		return m.ExperimentName
	}
	return ""
}

func (m *TrialSpec) GetObjective() *ObjectiveSpec {
	if m != nil {
		return m.Objective
	}
	return nil
}

func (m *TrialSpec) GetParameterAssignments() *TrialSpec_ParameterAssignments {
	if m != nil {
		return m.ParameterAssignments
	}
	return nil
}

func (m *TrialSpec) GetRunSpec() string {
	if m != nil {
		return m.RunSpec
	}
	return ""
}

func (m *TrialSpec) GetMetricsCollectorSpec() string {
	if m != nil {
		return m.MetricsCollectorSpec
	}
	return ""
}

// *
// List of ParameterAssignment
type TrialSpec_ParameterAssignments struct {
	Assignments []*ParameterAssignment `protobuf:"bytes,1,rep,name=assignments" json:"assignments,omitempty"`
}

func (m *TrialSpec_ParameterAssignments) Reset()         { *m = TrialSpec_ParameterAssignments{} }
func (m *TrialSpec_ParameterAssignments) String() string { return proto.CompactTextString(m) }
func (*TrialSpec_ParameterAssignments) ProtoMessage()    {}
func (*TrialSpec_ParameterAssignments) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17, 0}
}

func (m *TrialSpec_ParameterAssignments) GetAssignments() []*ParameterAssignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type TrialStatus struct {
	StartTime      string                         `protobuf:"bytes,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	CompletionTime string                         `protobuf:"bytes,2,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	Condition      TrialStatus_TrialConditionType `protobuf:"varint,3,opt,name=condition,enum=api.v1.alpha3.TrialStatus_TrialConditionType" json:"condition,omitempty"`
	Observation    *Observation                   `protobuf:"bytes,4,opt,name=observation" json:"observation,omitempty"`
}

func (m *TrialStatus) Reset()                    { *m = TrialStatus{} }
func (m *TrialStatus) String() string            { return proto.CompactTextString(m) }
func (*TrialStatus) ProtoMessage()               {}
func (*TrialStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *TrialStatus) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *TrialStatus) GetCompletionTime() string {
	if m != nil {
		return m.CompletionTime
	}
	return ""
}

func (m *TrialStatus) GetCondition() TrialStatus_TrialConditionType {
	if m != nil {
		return m.Condition
	}
	return TrialStatus_CREATED
}

func (m *TrialStatus) GetObservation() *Observation {
	if m != nil {
		return m.Observation
	}
	return nil
}

type Trial struct {
	Name   string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Spec   *TrialSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *TrialStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Trial) Reset()                    { *m = Trial{} }
func (m *Trial) String() string            { return proto.CompactTextString(m) }
func (*Trial) ProtoMessage()               {}
func (*Trial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Trial) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Trial) GetSpec() *TrialSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Trial) GetStatus() *TrialStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type RegisterExperimentRequest struct {
	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty"`
}

func (m *RegisterExperimentRequest) Reset()                    { *m = RegisterExperimentRequest{} }
func (m *RegisterExperimentRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterExperimentRequest) ProtoMessage()               {}
func (*RegisterExperimentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RegisterExperimentRequest) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

type RegisterExperimentReply struct {
}

func (m *RegisterExperimentReply) Reset()                    { *m = RegisterExperimentReply{} }
func (m *RegisterExperimentReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterExperimentReply) ProtoMessage()               {}
func (*RegisterExperimentReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type PreCheckRegisterExperimentReply struct {
	CanRegister bool `protobuf:"varint,1,opt,name=can_register,json=canRegister" json:"can_register,omitempty"`
}

func (m *PreCheckRegisterExperimentReply) Reset()         { *m = PreCheckRegisterExperimentReply{} }
func (m *PreCheckRegisterExperimentReply) String() string { return proto.CompactTextString(m) }
func (*PreCheckRegisterExperimentReply) ProtoMessage()    {}
func (*PreCheckRegisterExperimentReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *PreCheckRegisterExperimentReply) GetCanRegister() bool {
	if m != nil {
		return m.CanRegister
	}
	return false
}

type DeleteExperimentRequest struct {
	ExperimentName string `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName" json:"experiment_name,omitempty"`
}

func (m *DeleteExperimentRequest) Reset()                    { *m = DeleteExperimentRequest{} }
func (m *DeleteExperimentRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteExperimentRequest) ProtoMessage()               {}
func (*DeleteExperimentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DeleteExperimentRequest) GetExperimentName() string {
	if m != nil {
		return m.ExperimentName
	}
	return ""
}

type DeleteExperimentReply struct {
}

func (m *DeleteExperimentReply) Reset()                    { *m = DeleteExperimentReply{} }
func (m *DeleteExperimentReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteExperimentReply) ProtoMessage()               {}
func (*DeleteExperimentReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type GetExperimentRequest struct {
	ExperimentName string `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName" json:"experiment_name,omitempty"`
}

func (m *GetExperimentRequest) Reset()                    { *m = GetExperimentRequest{} }
func (m *GetExperimentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetExperimentRequest) ProtoMessage()               {}
func (*GetExperimentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetExperimentRequest) GetExperimentName() string {
	if m != nil {
		return m.ExperimentName
	}
	return ""
}

type GetExperimentReply struct {
	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty"`
}

func (m *GetExperimentReply) Reset()                    { *m = GetExperimentReply{} }
func (m *GetExperimentReply) String() string            { return proto.CompactTextString(m) }
func (*GetExperimentReply) ProtoMessage()               {}
func (*GetExperimentReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetExperimentReply) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

type ExperimentSummary struct {
	ExperimentName string            `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName" json:"experiment_name,omitempty"`
	Status         *ExperimentStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *ExperimentSummary) Reset()                    { *m = ExperimentSummary{} }
func (m *ExperimentSummary) String() string            { return proto.CompactTextString(m) }
func (*ExperimentSummary) ProtoMessage()               {}
func (*ExperimentSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ExperimentSummary) GetExperimentName() string {
	if m != nil {
		return m.ExperimentName
	}
	return ""
}

func (m *ExperimentSummary) GetStatus() *ExperimentStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetExperimentListRequest struct {
}

func (m *GetExperimentListRequest) Reset()                    { *m = GetExperimentListRequest{} }
func (m *GetExperimentListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetExperimentListRequest) ProtoMessage()               {}
func (*GetExperimentListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type GetExperimentListReply struct {
	ExperimentSummaries []*ExperimentSummary `protobuf:"bytes,1,rep,name=experiment_summaries,json=experimentSummaries" json:"experiment_summaries,omitempty"`
}

func (m *GetExperimentListReply) Reset()                    { *m = GetExperimentListReply{} }
func (m *GetExperimentListReply) String() string            { return proto.CompactTextString(m) }
func (*GetExperimentListReply) ProtoMessage()               {}
func (*GetExperimentListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetExperimentListReply) GetExperimentSummaries() []*ExperimentSummary {
	if m != nil {
		return m.ExperimentSummaries
	}
	return nil
}

type UpdateExperimentStatusRequest struct {
	ExperimentName string            `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName" json:"experiment_name,omitempty"`
	NewStatus      *ExperimentStatus `protobuf:"bytes,2,opt,name=new_status,json=newStatus" json:"new_status,omitempty"`
}

func (m *UpdateExperimentStatusRequest) Reset()                    { *m = UpdateExperimentStatusRequest{} }
func (m *UpdateExperimentStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateExperimentStatusRequest) ProtoMessage()               {}
func (*UpdateExperimentStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *UpdateExperimentStatusRequest) GetExperimentName() string {
	if m != nil {
		return m.ExperimentName
	}
	return ""
}

func (m *UpdateExperimentStatusRequest) GetNewStatus() *ExperimentStatus {
	if m != nil {
		return m.NewStatus
	}
	return nil
}

type UpdateExperimentStatusReply struct {
}

func (m *UpdateExperimentStatusReply) Reset()                    { *m = UpdateExperimentStatusReply{} }
func (m *UpdateExperimentStatusReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateExperimentStatusReply) ProtoMessage()               {}
func (*UpdateExperimentStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type UpdateAlgorithmExtraSettingsRequest struct {
	ExperimentName         string              `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName" json:"experiment_name,omitempty"`
	ExtraAlgorithmSettings []*AlgorithmSetting `protobuf:"bytes,2,rep,name=extra_algorithm_settings,json=extraAlgorithmSettings" json:"extra_algorithm_settings,omitempty"`
}

func (m *UpdateAlgorithmExtraSettingsRequest) Reset()         { *m = UpdateAlgorithmExtraSettingsRequest{} }
func (m *UpdateAlgorithmExtraSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAlgorithmExtraSettingsRequest) ProtoMessage()    {}
func (*UpdateAlgorithmExtraSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32}
}

func (m *UpdateAlgorithmExtraSettingsRequest) GetExperimentName() string {
	if m != nil {
		return m.ExperimentName
	}
	return ""
}

func (m *UpdateAlgorithmExtraSettingsRequest) GetExtraAlgorithmSettings() []*AlgorithmSetting {
	if m != nil {
		return m.ExtraAlgorithmSettings
	}
	return nil
}

type UpdateAlgorithmExtraSettingsReply struct {
}

func (m *UpdateAlgorithmExtraSettingsReply) Reset()         { *m = UpdateAlgorithmExtraSettingsReply{} }
func (m *UpdateAlgorithmExtraSettingsReply) String() string { return proto.CompactTextString(m) }
func (*UpdateAlgorithmExtraSettingsReply) ProtoMessage()    {}
func (*UpdateAlgorithmExtraSettingsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33}
}

type GetAlgorithmExtraSettingsRequest struct {
	ExperimentName string `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName" json:"experiment_name,omitempty"`
}

func (m *GetAlgorithmExtraSettingsRequest) Reset()         { *m = GetAlgorithmExtraSettingsRequest{} }
func (m *GetAlgorithmExtraSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*GetAlgorithmExtraSettingsRequest) ProtoMessage()    {}
func (*GetAlgorithmExtraSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34}
}

func (m *GetAlgorithmExtraSettingsRequest) GetExperimentName() string {
	if m != nil {
		return m.ExperimentName
	}
	return ""
}

type GetAlgorithmExtraSettingsReply struct {
	ExtraAlgorithmSettings []*AlgorithmSetting `protobuf:"bytes,1,rep,name=extra_algorithm_settings,json=extraAlgorithmSettings" json:"extra_algorithm_settings,omitempty"`
}

func (m *GetAlgorithmExtraSettingsReply) Reset()                    { *m = GetAlgorithmExtraSettingsReply{} }
func (m *GetAlgorithmExtraSettingsReply) String() string            { return proto.CompactTextString(m) }
func (*GetAlgorithmExtraSettingsReply) ProtoMessage()               {}
func (*GetAlgorithmExtraSettingsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *GetAlgorithmExtraSettingsReply) GetExtraAlgorithmSettings() []*AlgorithmSetting {
	if m != nil {
		return m.ExtraAlgorithmSettings
	}
	return nil
}

type RegisterTrialRequest struct {
	Trial *Trial `protobuf:"bytes,1,opt,name=trial" json:"trial,omitempty"`
}

func (m *RegisterTrialRequest) Reset()                    { *m = RegisterTrialRequest{} }
func (m *RegisterTrialRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterTrialRequest) ProtoMessage()               {}
func (*RegisterTrialRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *RegisterTrialRequest) GetTrial() *Trial {
	if m != nil {
		return m.Trial
	}
	return nil
}

type RegisterTrialReply struct {
}

func (m *RegisterTrialReply) Reset()                    { *m = RegisterTrialReply{} }
func (m *RegisterTrialReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterTrialReply) ProtoMessage()               {}
func (*RegisterTrialReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

type DeleteTrialRequest struct {
	TrialName string `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
}

func (m *DeleteTrialRequest) Reset()                    { *m = DeleteTrialRequest{} }
func (m *DeleteTrialRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTrialRequest) ProtoMessage()               {}
func (*DeleteTrialRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *DeleteTrialRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

type DeleteTrialReply struct {
}

func (m *DeleteTrialReply) Reset()                    { *m = DeleteTrialReply{} }
func (m *DeleteTrialReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteTrialReply) ProtoMessage()               {}
func (*DeleteTrialReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

type GetTrialListRequest struct {
	ExperimentName string `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName" json:"experiment_name,omitempty"`
	Filter         string `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
}

func (m *GetTrialListRequest) Reset()                    { *m = GetTrialListRequest{} }
func (m *GetTrialListRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTrialListRequest) ProtoMessage()               {}
func (*GetTrialListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *GetTrialListRequest) GetExperimentName() string {
	if m != nil {
		return m.ExperimentName
	}
	return ""
}

func (m *GetTrialListRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type GetTrialListReply struct {
	Trials []*Trial `protobuf:"bytes,1,rep,name=trials" json:"trials,omitempty"`
}

func (m *GetTrialListReply) Reset()                    { *m = GetTrialListReply{} }
func (m *GetTrialListReply) String() string            { return proto.CompactTextString(m) }
func (*GetTrialListReply) ProtoMessage()               {}
func (*GetTrialListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *GetTrialListReply) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

type GetTrialRequest struct {
	TrialName string `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
}

func (m *GetTrialRequest) Reset()                    { *m = GetTrialRequest{} }
func (m *GetTrialRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTrialRequest) ProtoMessage()               {}
func (*GetTrialRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *GetTrialRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

type GetTrialReply struct {
	Trial *Trial `protobuf:"bytes,1,opt,name=trial" json:"trial,omitempty"`
}

func (m *GetTrialReply) Reset()                    { *m = GetTrialReply{} }
func (m *GetTrialReply) String() string            { return proto.CompactTextString(m) }
func (*GetTrialReply) ProtoMessage()               {}
func (*GetTrialReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *GetTrialReply) GetTrial() *Trial {
	if m != nil {
		return m.Trial
	}
	return nil
}

type UpdateTrialStatusRequest struct {
	TrialName string       `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
	NewStatus *TrialStatus `protobuf:"bytes,2,opt,name=new_status,json=newStatus" json:"new_status,omitempty"`
}

func (m *UpdateTrialStatusRequest) Reset()                    { *m = UpdateTrialStatusRequest{} }
func (m *UpdateTrialStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTrialStatusRequest) ProtoMessage()               {}
func (*UpdateTrialStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *UpdateTrialStatusRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

func (m *UpdateTrialStatusRequest) GetNewStatus() *TrialStatus {
	if m != nil {
		return m.NewStatus
	}
	return nil
}

type UpdateTrialStatusReply struct {
}

func (m *UpdateTrialStatusReply) Reset()                    { *m = UpdateTrialStatusReply{} }
func (m *UpdateTrialStatusReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateTrialStatusReply) ProtoMessage()               {}
func (*UpdateTrialStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

type ReportObservationLogRequest struct {
	TrialName      string          `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
	ObservationLog *ObservationLog `protobuf:"bytes,2,opt,name=observation_log,json=observationLog" json:"observation_log,omitempty"`
}

func (m *ReportObservationLogRequest) Reset()                    { *m = ReportObservationLogRequest{} }
func (m *ReportObservationLogRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportObservationLogRequest) ProtoMessage()               {}
func (*ReportObservationLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *ReportObservationLogRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

func (m *ReportObservationLogRequest) GetObservationLog() *ObservationLog {
	if m != nil {
		return m.ObservationLog
	}
	return nil
}

type ReportObservationLogReply struct {
}

func (m *ReportObservationLogReply) Reset()                    { *m = ReportObservationLogReply{} }
func (m *ReportObservationLogReply) String() string            { return proto.CompactTextString(m) }
func (*ReportObservationLogReply) ProtoMessage()               {}
func (*ReportObservationLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

type GetObservationLogRequest struct {
	TrialName  string `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
	MetricName string `protobuf:"bytes,2,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	StartTime  string `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime    string `protobuf:"bytes,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *GetObservationLogRequest) Reset()                    { *m = GetObservationLogRequest{} }
func (m *GetObservationLogRequest) String() string            { return proto.CompactTextString(m) }
func (*GetObservationLogRequest) ProtoMessage()               {}
func (*GetObservationLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *GetObservationLogRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

func (m *GetObservationLogRequest) GetMetricName() string {
	if m != nil {
		return m.MetricName
	}
	return ""
}

func (m *GetObservationLogRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *GetObservationLogRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

type GetObservationLogReply struct {
	ObservationLog *ObservationLog `protobuf:"bytes,1,opt,name=observation_log,json=observationLog" json:"observation_log,omitempty"`
}

func (m *GetObservationLogReply) Reset()                    { *m = GetObservationLogReply{} }
func (m *GetObservationLogReply) String() string            { return proto.CompactTextString(m) }
func (*GetObservationLogReply) ProtoMessage()               {}
func (*GetObservationLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *GetObservationLogReply) GetObservationLog() *ObservationLog {
	if m != nil {
		return m.ObservationLog
	}
	return nil
}

type GetSuggestionsRequest struct {
	Experiment    *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty"`
	Trials        []*Trial    `protobuf:"bytes,2,rep,name=trials" json:"trials,omitempty"`
	RequestNumber int32       `protobuf:"varint,3,opt,name=request_number,json=requestNumber" json:"request_number,omitempty"`
}

func (m *GetSuggestionsRequest) Reset()                    { *m = GetSuggestionsRequest{} }
func (m *GetSuggestionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSuggestionsRequest) ProtoMessage()               {}
func (*GetSuggestionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *GetSuggestionsRequest) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

func (m *GetSuggestionsRequest) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

func (m *GetSuggestionsRequest) GetRequestNumber() int32 {
	if m != nil {
		return m.RequestNumber
	}
	return 0
}

type GetSuggestionsReply struct {
	ParameterAssignments []*GetSuggestionsReply_ParameterAssignments `protobuf:"bytes,1,rep,name=parameter_assignments,json=parameterAssignments" json:"parameter_assignments,omitempty"`
	Algorithm            *AlgorithmSpec                              `protobuf:"bytes,2,opt,name=algorithm" json:"algorithm,omitempty"`
}

func (m *GetSuggestionsReply) Reset()                    { *m = GetSuggestionsReply{} }
func (m *GetSuggestionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetSuggestionsReply) ProtoMessage()               {}
func (*GetSuggestionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *GetSuggestionsReply) GetParameterAssignments() []*GetSuggestionsReply_ParameterAssignments {
	if m != nil {
		return m.ParameterAssignments
	}
	return nil
}

func (m *GetSuggestionsReply) GetAlgorithm() *AlgorithmSpec {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

type GetSuggestionsReply_ParameterAssignments struct {
	Assignments []*ParameterAssignment `protobuf:"bytes,1,rep,name=assignments" json:"assignments,omitempty"`
}

func (m *GetSuggestionsReply_ParameterAssignments) Reset() {
	*m = GetSuggestionsReply_ParameterAssignments{}
}
func (m *GetSuggestionsReply_ParameterAssignments) String() string { return proto.CompactTextString(m) }
func (*GetSuggestionsReply_ParameterAssignments) ProtoMessage()    {}
func (*GetSuggestionsReply_ParameterAssignments) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{51, 0}
}

func (m *GetSuggestionsReply_ParameterAssignments) GetAssignments() []*ParameterAssignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type ValidateAlgorithmSettingsRequest struct {
	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty"`
}

func (m *ValidateAlgorithmSettingsRequest) Reset()         { *m = ValidateAlgorithmSettingsRequest{} }
func (m *ValidateAlgorithmSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateAlgorithmSettingsRequest) ProtoMessage()    {}
func (*ValidateAlgorithmSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{52}
}

func (m *ValidateAlgorithmSettingsRequest) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

// *
// Return INVALID_ARGUMENT Error if Algorithm Settings are not Valid
type ValidateAlgorithmSettingsReply struct {
}

func (m *ValidateAlgorithmSettingsReply) Reset()                    { *m = ValidateAlgorithmSettingsReply{} }
func (m *ValidateAlgorithmSettingsReply) String() string            { return proto.CompactTextString(m) }
func (*ValidateAlgorithmSettingsReply) ProtoMessage()               {}
func (*ValidateAlgorithmSettingsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func init() {
	proto.RegisterType((*FeasibleSpace)(nil), "api.v1.alpha3.FeasibleSpace")
	proto.RegisterType((*ParameterSpec)(nil), "api.v1.alpha3.ParameterSpec")
	proto.RegisterType((*ObjectiveSpec)(nil), "api.v1.alpha3.ObjectiveSpec")
	proto.RegisterType((*AlgorithmSetting)(nil), "api.v1.alpha3.AlgorithmSetting")
	proto.RegisterType((*EarlyStoppingSpec)(nil), "api.v1.alpha3.EarlyStoppingSpec")
	proto.RegisterType((*AlgorithmSpec)(nil), "api.v1.alpha3.AlgorithmSpec")
	proto.RegisterType((*NasConfig)(nil), "api.v1.alpha3.NasConfig")
	proto.RegisterType((*NasConfig_Operations)(nil), "api.v1.alpha3.NasConfig.Operations")
	proto.RegisterType((*GraphConfig)(nil), "api.v1.alpha3.GraphConfig")
	proto.RegisterType((*Operation)(nil), "api.v1.alpha3.Operation")
	proto.RegisterType((*Operation_ParameterSpecs)(nil), "api.v1.alpha3.Operation.ParameterSpecs")
	proto.RegisterType((*ExperimentSpec)(nil), "api.v1.alpha3.ExperimentSpec")
	proto.RegisterType((*ExperimentSpec_ParameterSpecs)(nil), "api.v1.alpha3.ExperimentSpec.ParameterSpecs")
	proto.RegisterType((*ExperimentStatus)(nil), "api.v1.alpha3.ExperimentStatus")
	proto.RegisterType((*Experiment)(nil), "api.v1.alpha3.Experiment")
	proto.RegisterType((*ParameterAssignment)(nil), "api.v1.alpha3.ParameterAssignment")
	proto.RegisterType((*Metric)(nil), "api.v1.alpha3.Metric")
	proto.RegisterType((*MetricLog)(nil), "api.v1.alpha3.MetricLog")
	proto.RegisterType((*Observation)(nil), "api.v1.alpha3.Observation")
	proto.RegisterType((*ObservationLog)(nil), "api.v1.alpha3.ObservationLog")
	proto.RegisterType((*TrialSpec)(nil), "api.v1.alpha3.TrialSpec")
	proto.RegisterType((*TrialSpec_ParameterAssignments)(nil), "api.v1.alpha3.TrialSpec.ParameterAssignments")
	proto.RegisterType((*TrialStatus)(nil), "api.v1.alpha3.TrialStatus")
	proto.RegisterType((*Trial)(nil), "api.v1.alpha3.Trial")
	proto.RegisterType((*RegisterExperimentRequest)(nil), "api.v1.alpha3.RegisterExperimentRequest")
	proto.RegisterType((*RegisterExperimentReply)(nil), "api.v1.alpha3.RegisterExperimentReply")
	proto.RegisterType((*PreCheckRegisterExperimentReply)(nil), "api.v1.alpha3.PreCheckRegisterExperimentReply")
	proto.RegisterType((*DeleteExperimentRequest)(nil), "api.v1.alpha3.DeleteExperimentRequest")
	proto.RegisterType((*DeleteExperimentReply)(nil), "api.v1.alpha3.DeleteExperimentReply")
	proto.RegisterType((*GetExperimentRequest)(nil), "api.v1.alpha3.GetExperimentRequest")
	proto.RegisterType((*GetExperimentReply)(nil), "api.v1.alpha3.GetExperimentReply")
	proto.RegisterType((*ExperimentSummary)(nil), "api.v1.alpha3.ExperimentSummary")
	proto.RegisterType((*GetExperimentListRequest)(nil), "api.v1.alpha3.GetExperimentListRequest")
	proto.RegisterType((*GetExperimentListReply)(nil), "api.v1.alpha3.GetExperimentListReply")
	proto.RegisterType((*UpdateExperimentStatusRequest)(nil), "api.v1.alpha3.UpdateExperimentStatusRequest")
	proto.RegisterType((*UpdateExperimentStatusReply)(nil), "api.v1.alpha3.UpdateExperimentStatusReply")
	proto.RegisterType((*UpdateAlgorithmExtraSettingsRequest)(nil), "api.v1.alpha3.UpdateAlgorithmExtraSettingsRequest")
	proto.RegisterType((*UpdateAlgorithmExtraSettingsReply)(nil), "api.v1.alpha3.UpdateAlgorithmExtraSettingsReply")
	proto.RegisterType((*GetAlgorithmExtraSettingsRequest)(nil), "api.v1.alpha3.GetAlgorithmExtraSettingsRequest")
	proto.RegisterType((*GetAlgorithmExtraSettingsReply)(nil), "api.v1.alpha3.GetAlgorithmExtraSettingsReply")
	proto.RegisterType((*RegisterTrialRequest)(nil), "api.v1.alpha3.RegisterTrialRequest")
	proto.RegisterType((*RegisterTrialReply)(nil), "api.v1.alpha3.RegisterTrialReply")
	proto.RegisterType((*DeleteTrialRequest)(nil), "api.v1.alpha3.DeleteTrialRequest")
	proto.RegisterType((*DeleteTrialReply)(nil), "api.v1.alpha3.DeleteTrialReply")
	proto.RegisterType((*GetTrialListRequest)(nil), "api.v1.alpha3.GetTrialListRequest")
	proto.RegisterType((*GetTrialListReply)(nil), "api.v1.alpha3.GetTrialListReply")
	proto.RegisterType((*GetTrialRequest)(nil), "api.v1.alpha3.GetTrialRequest")
	proto.RegisterType((*GetTrialReply)(nil), "api.v1.alpha3.GetTrialReply")
	proto.RegisterType((*UpdateTrialStatusRequest)(nil), "api.v1.alpha3.UpdateTrialStatusRequest")
	proto.RegisterType((*UpdateTrialStatusReply)(nil), "api.v1.alpha3.UpdateTrialStatusReply")
	proto.RegisterType((*ReportObservationLogRequest)(nil), "api.v1.alpha3.ReportObservationLogRequest")
	proto.RegisterType((*ReportObservationLogReply)(nil), "api.v1.alpha3.ReportObservationLogReply")
	proto.RegisterType((*GetObservationLogRequest)(nil), "api.v1.alpha3.GetObservationLogRequest")
	proto.RegisterType((*GetObservationLogReply)(nil), "api.v1.alpha3.GetObservationLogReply")
	proto.RegisterType((*GetSuggestionsRequest)(nil), "api.v1.alpha3.GetSuggestionsRequest")
	proto.RegisterType((*GetSuggestionsReply)(nil), "api.v1.alpha3.GetSuggestionsReply")
	proto.RegisterType((*GetSuggestionsReply_ParameterAssignments)(nil), "api.v1.alpha3.GetSuggestionsReply.ParameterAssignments")
	proto.RegisterType((*ValidateAlgorithmSettingsRequest)(nil), "api.v1.alpha3.ValidateAlgorithmSettingsRequest")
	proto.RegisterType((*ValidateAlgorithmSettingsReply)(nil), "api.v1.alpha3.ValidateAlgorithmSettingsReply")
	proto.RegisterEnum("api.v1.alpha3.ParameterType", ParameterType_name, ParameterType_value)
	proto.RegisterEnum("api.v1.alpha3.ObjectiveType", ObjectiveType_name, ObjectiveType_value)
	proto.RegisterEnum("api.v1.alpha3.ExperimentStatus_ExperimentConditionType", ExperimentStatus_ExperimentConditionType_name, ExperimentStatus_ExperimentConditionType_value)
	proto.RegisterEnum("api.v1.alpha3.TrialStatus_TrialConditionType", TrialStatus_TrialConditionType_name, TrialStatus_TrialConditionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Manager service

type ManagerClient interface {
	// *
	// Register a Experiment to DB.
	RegisterExperiment(ctx context.Context, in *RegisterExperimentRequest, opts ...grpc.CallOption) (*RegisterExperimentReply, error)
	// *
	// PreCheck to register a Experiment to DB.
	PreCheckRegisterExperiment(ctx context.Context, in *RegisterExperimentRequest, opts ...grpc.CallOption) (*PreCheckRegisterExperimentReply, error)
	// *
	// Delete a Experiment from DB by name.
	DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentReply, error)
	// *
	// Get a Experiment from DB by name.
	GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentReply, error)
	// *
	// Get a summary list of Experiment from DB.
	// The summary includes name and condition.
	GetExperimentList(ctx context.Context, in *GetExperimentListRequest, opts ...grpc.CallOption) (*GetExperimentListReply, error)
	// *
	// Update Status of a experiment.
	UpdateExperimentStatus(ctx context.Context, in *UpdateExperimentStatusRequest, opts ...grpc.CallOption) (*UpdateExperimentStatusReply, error)
	// *
	// Update AlgorithmExtraSettings.
	// The ExtraSetting is created if it does not exist, otherwise it is overwrited.
	UpdateAlgorithmExtraSettings(ctx context.Context, in *UpdateAlgorithmExtraSettingsRequest, opts ...grpc.CallOption) (*UpdateAlgorithmExtraSettingsReply, error)
	// *
	// Get all AlgorithmExtraSettings.
	GetAlgorithmExtraSettings(ctx context.Context, in *GetAlgorithmExtraSettingsRequest, opts ...grpc.CallOption) (*GetAlgorithmExtraSettingsReply, error)
	// *
	// Register a Trial to DB.
	// ID will be filled by manager automatically.
	RegisterTrial(ctx context.Context, in *RegisterTrialRequest, opts ...grpc.CallOption) (*RegisterTrialReply, error)
	// *
	// Delete a Trial from DB by ID.
	DeleteTrial(ctx context.Context, in *DeleteTrialRequest, opts ...grpc.CallOption) (*DeleteTrialReply, error)
	// *
	// Get a list of Trial from DB by name of a Experiment.
	GetTrialList(ctx context.Context, in *GetTrialListRequest, opts ...grpc.CallOption) (*GetTrialListReply, error)
	// *
	// Get a Trial from DB by ID of Trial.
	GetTrial(ctx context.Context, in *GetTrialRequest, opts ...grpc.CallOption) (*GetTrialReply, error)
	// *
	// Update Status of a trial.
	UpdateTrialStatus(ctx context.Context, in *UpdateTrialStatusRequest, opts ...grpc.CallOption) (*UpdateTrialStatusReply, error)
	// *
	// Report a log of Observations for a Trial.
	// The log consists of timestamp and value of metric.
	// Katib store every log of metrics.
	// You can see accuracy curve or other metric logs on UI.
	ReportObservationLog(ctx context.Context, in *ReportObservationLogRequest, opts ...grpc.CallOption) (*ReportObservationLogReply, error)
	// *
	// Get all log of Observations for a Trial.
	GetObservationLog(ctx context.Context, in *GetObservationLogRequest, opts ...grpc.CallOption) (*GetObservationLogReply, error)
}

type managerClient struct {
	cc *grpc.ClientConn
}

func NewManagerClient(cc *grpc.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) RegisterExperiment(ctx context.Context, in *RegisterExperimentRequest, opts ...grpc.CallOption) (*RegisterExperimentReply, error) {
	out := new(RegisterExperimentReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/RegisterExperiment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) PreCheckRegisterExperiment(ctx context.Context, in *RegisterExperimentRequest, opts ...grpc.CallOption) (*PreCheckRegisterExperimentReply, error) {
	out := new(PreCheckRegisterExperimentReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/PreCheckRegisterExperiment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentReply, error) {
	out := new(DeleteExperimentReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/DeleteExperiment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentReply, error) {
	out := new(GetExperimentReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/GetExperiment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetExperimentList(ctx context.Context, in *GetExperimentListRequest, opts ...grpc.CallOption) (*GetExperimentListReply, error) {
	out := new(GetExperimentListReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/GetExperimentList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateExperimentStatus(ctx context.Context, in *UpdateExperimentStatusRequest, opts ...grpc.CallOption) (*UpdateExperimentStatusReply, error) {
	out := new(UpdateExperimentStatusReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/UpdateExperimentStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateAlgorithmExtraSettings(ctx context.Context, in *UpdateAlgorithmExtraSettingsRequest, opts ...grpc.CallOption) (*UpdateAlgorithmExtraSettingsReply, error) {
	out := new(UpdateAlgorithmExtraSettingsReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/UpdateAlgorithmExtraSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAlgorithmExtraSettings(ctx context.Context, in *GetAlgorithmExtraSettingsRequest, opts ...grpc.CallOption) (*GetAlgorithmExtraSettingsReply, error) {
	out := new(GetAlgorithmExtraSettingsReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/GetAlgorithmExtraSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) RegisterTrial(ctx context.Context, in *RegisterTrialRequest, opts ...grpc.CallOption) (*RegisterTrialReply, error) {
	out := new(RegisterTrialReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/RegisterTrial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteTrial(ctx context.Context, in *DeleteTrialRequest, opts ...grpc.CallOption) (*DeleteTrialReply, error) {
	out := new(DeleteTrialReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/DeleteTrial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTrialList(ctx context.Context, in *GetTrialListRequest, opts ...grpc.CallOption) (*GetTrialListReply, error) {
	out := new(GetTrialListReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/GetTrialList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTrial(ctx context.Context, in *GetTrialRequest, opts ...grpc.CallOption) (*GetTrialReply, error) {
	out := new(GetTrialReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/GetTrial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateTrialStatus(ctx context.Context, in *UpdateTrialStatusRequest, opts ...grpc.CallOption) (*UpdateTrialStatusReply, error) {
	out := new(UpdateTrialStatusReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/UpdateTrialStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ReportObservationLog(ctx context.Context, in *ReportObservationLogRequest, opts ...grpc.CallOption) (*ReportObservationLogReply, error) {
	out := new(ReportObservationLogReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/ReportObservationLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetObservationLog(ctx context.Context, in *GetObservationLogRequest, opts ...grpc.CallOption) (*GetObservationLogReply, error) {
	out := new(GetObservationLogReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Manager/GetObservationLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Manager service

type ManagerServer interface {
	// *
	// Register a Experiment to DB.
	RegisterExperiment(context.Context, *RegisterExperimentRequest) (*RegisterExperimentReply, error)
	// *
	// PreCheck to register a Experiment to DB.
	PreCheckRegisterExperiment(context.Context, *RegisterExperimentRequest) (*PreCheckRegisterExperimentReply, error)
	// *
	// Delete a Experiment from DB by name.
	DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentReply, error)
	// *
	// Get a Experiment from DB by name.
	GetExperiment(context.Context, *GetExperimentRequest) (*GetExperimentReply, error)
	// *
	// Get a summary list of Experiment from DB.
	// The summary includes name and condition.
	GetExperimentList(context.Context, *GetExperimentListRequest) (*GetExperimentListReply, error)
	// *
	// Update Status of a experiment.
	UpdateExperimentStatus(context.Context, *UpdateExperimentStatusRequest) (*UpdateExperimentStatusReply, error)
	// *
	// Update AlgorithmExtraSettings.
	// The ExtraSetting is created if it does not exist, otherwise it is overwrited.
	UpdateAlgorithmExtraSettings(context.Context, *UpdateAlgorithmExtraSettingsRequest) (*UpdateAlgorithmExtraSettingsReply, error)
	// *
	// Get all AlgorithmExtraSettings.
	GetAlgorithmExtraSettings(context.Context, *GetAlgorithmExtraSettingsRequest) (*GetAlgorithmExtraSettingsReply, error)
	// *
	// Register a Trial to DB.
	// ID will be filled by manager automatically.
	RegisterTrial(context.Context, *RegisterTrialRequest) (*RegisterTrialReply, error)
	// *
	// Delete a Trial from DB by ID.
	DeleteTrial(context.Context, *DeleteTrialRequest) (*DeleteTrialReply, error)
	// *
	// Get a list of Trial from DB by name of a Experiment.
	GetTrialList(context.Context, *GetTrialListRequest) (*GetTrialListReply, error)
	// *
	// Get a Trial from DB by ID of Trial.
	GetTrial(context.Context, *GetTrialRequest) (*GetTrialReply, error)
	// *
	// Update Status of a trial.
	UpdateTrialStatus(context.Context, *UpdateTrialStatusRequest) (*UpdateTrialStatusReply, error)
	// *
	// Report a log of Observations for a Trial.
	// The log consists of timestamp and value of metric.
	// Katib store every log of metrics.
	// You can see accuracy curve or other metric logs on UI.
	ReportObservationLog(context.Context, *ReportObservationLogRequest) (*ReportObservationLogReply, error)
	// *
	// Get all log of Observations for a Trial.
	GetObservationLog(context.Context, *GetObservationLogRequest) (*GetObservationLogReply, error)
}

func RegisterManagerServer(s *grpc.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_RegisterExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RegisterExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/RegisterExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RegisterExperiment(ctx, req.(*RegisterExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_PreCheckRegisterExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).PreCheckRegisterExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/PreCheckRegisterExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).PreCheckRegisterExperiment(ctx, req.(*RegisterExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteExperiment(ctx, req.(*DeleteExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/GetExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetExperiment(ctx, req.(*GetExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetExperimentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetExperimentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/GetExperimentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetExperimentList(ctx, req.(*GetExperimentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateExperimentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateExperimentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/UpdateExperimentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateExperimentStatus(ctx, req.(*UpdateExperimentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateAlgorithmExtraSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlgorithmExtraSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateAlgorithmExtraSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/UpdateAlgorithmExtraSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateAlgorithmExtraSettings(ctx, req.(*UpdateAlgorithmExtraSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAlgorithmExtraSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlgorithmExtraSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAlgorithmExtraSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/GetAlgorithmExtraSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAlgorithmExtraSettings(ctx, req.(*GetAlgorithmExtraSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_RegisterTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RegisterTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/RegisterTrial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RegisterTrial(ctx, req.(*RegisterTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/DeleteTrial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteTrial(ctx, req.(*DeleteTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTrialList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrialListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTrialList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/GetTrialList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTrialList(ctx, req.(*GetTrialListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/GetTrial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTrial(ctx, req.(*GetTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateTrialStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrialStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateTrialStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/UpdateTrialStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateTrialStatus(ctx, req.(*UpdateTrialStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ReportObservationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportObservationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ReportObservationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/ReportObservationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ReportObservationLog(ctx, req.(*ReportObservationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetObservationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObservationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetObservationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Manager/GetObservationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetObservationLog(ctx, req.(*GetObservationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.alpha3.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterExperiment",
			Handler:    _Manager_RegisterExperiment_Handler,
		},
		{
			MethodName: "PreCheckRegisterExperiment",
			Handler:    _Manager_PreCheckRegisterExperiment_Handler,
		},
		{
			MethodName: "DeleteExperiment",
			Handler:    _Manager_DeleteExperiment_Handler,
		},
		{
			MethodName: "GetExperiment",
			Handler:    _Manager_GetExperiment_Handler,
		},
		{
			MethodName: "GetExperimentList",
			Handler:    _Manager_GetExperimentList_Handler,
		},
		{
			MethodName: "UpdateExperimentStatus",
			Handler:    _Manager_UpdateExperimentStatus_Handler,
		},
		{
			MethodName: "UpdateAlgorithmExtraSettings",
			Handler:    _Manager_UpdateAlgorithmExtraSettings_Handler,
		},
		{
			MethodName: "GetAlgorithmExtraSettings",
			Handler:    _Manager_GetAlgorithmExtraSettings_Handler,
		},
		{
			MethodName: "RegisterTrial",
			Handler:    _Manager_RegisterTrial_Handler,
		},
		{
			MethodName: "DeleteTrial",
			Handler:    _Manager_DeleteTrial_Handler,
		},
		{
			MethodName: "GetTrialList",
			Handler:    _Manager_GetTrialList_Handler,
		},
		{
			MethodName: "GetTrial",
			Handler:    _Manager_GetTrial_Handler,
		},
		{
			MethodName: "UpdateTrialStatus",
			Handler:    _Manager_UpdateTrialStatus_Handler,
		},
		{
			MethodName: "ReportObservationLog",
			Handler:    _Manager_ReportObservationLog_Handler,
		},
		{
			MethodName: "GetObservationLog",
			Handler:    _Manager_GetObservationLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for Suggestion service

type SuggestionClient interface {
	GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsReply, error)
	ValidateAlgorithmSettings(ctx context.Context, in *ValidateAlgorithmSettingsRequest, opts ...grpc.CallOption) (*ValidateAlgorithmSettingsReply, error)
}

type suggestionClient struct {
	cc *grpc.ClientConn
}

func NewSuggestionClient(cc *grpc.ClientConn) SuggestionClient {
	return &suggestionClient{cc}
}

func (c *suggestionClient) GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsReply, error) {
	out := new(GetSuggestionsReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Suggestion/GetSuggestions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestionClient) ValidateAlgorithmSettings(ctx context.Context, in *ValidateAlgorithmSettingsRequest, opts ...grpc.CallOption) (*ValidateAlgorithmSettingsReply, error) {
	out := new(ValidateAlgorithmSettingsReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.Suggestion/ValidateAlgorithmSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Suggestion service

type SuggestionServer interface {
	GetSuggestions(context.Context, *GetSuggestionsRequest) (*GetSuggestionsReply, error)
	ValidateAlgorithmSettings(context.Context, *ValidateAlgorithmSettingsRequest) (*ValidateAlgorithmSettingsReply, error)
}

func RegisterSuggestionServer(s *grpc.Server, srv SuggestionServer) {
	s.RegisterService(&_Suggestion_serviceDesc, srv)
}

func _Suggestion_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Suggestion/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).GetSuggestions(ctx, req.(*GetSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suggestion_ValidateAlgorithmSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAlgorithmSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).ValidateAlgorithmSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.Suggestion/ValidateAlgorithmSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).ValidateAlgorithmSettings(ctx, req.(*ValidateAlgorithmSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Suggestion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.alpha3.Suggestion",
	HandlerType: (*SuggestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSuggestions",
			Handler:    _Suggestion_GetSuggestions_Handler,
		},
		{
			MethodName: "ValidateAlgorithmSettings",
			Handler:    _Suggestion_ValidateAlgorithmSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for EarlyStopping service

type EarlyStoppingClient interface {
}

type earlyStoppingClient struct {
	cc *grpc.ClientConn
}

func NewEarlyStoppingClient(cc *grpc.ClientConn) EarlyStoppingClient {
	return &earlyStoppingClient{cc}
}

// Server API for EarlyStopping service

type EarlyStoppingServer interface {
}

func RegisterEarlyStoppingServer(s *grpc.Server, srv EarlyStoppingServer) {
	s.RegisterService(&_EarlyStopping_serviceDesc, srv)
}

var _EarlyStopping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.alpha3.EarlyStopping",
	HandlerType: (*EarlyStoppingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x5a, 0xcd, 0x73, 0x1b, 0x49,
	0x15, 0xcf, 0x48, 0xfe, 0xd2, 0x53, 0x24, 0xcb, 0x6d, 0x3b, 0x91, 0x95, 0x0f, 0x3b, 0x9d, 0x0f,
	0x1b, 0x93, 0xd8, 0x89, 0xb2, 0xbb, 0xd9, 0x4d, 0xc2, 0xee, 0x3a, 0xb2, 0xe2, 0x72, 0xc5, 0x91,
	0x53, 0x23, 0x39, 0x90, 0x05, 0x6a, 0x18, 0x2b, 0x1d, 0x65, 0xd8, 0xd1, 0xcc, 0x30, 0x33, 0xca,
	0xc6, 0xa4, 0x52, 0x45, 0x2d, 0x1c, 0xa0, 0x80, 0xbd, 0xc0, 0x05, 0x28, 0xe0, 0x06, 0xc5, 0x81,
	0x13, 0x5c, 0x39, 0x50, 0xc5, 0x91, 0x1b, 0x1f, 0x7f, 0x01, 0xfc, 0x1f, 0x54, 0xbf, 0xf9, 0xfe,
	0x92, 0xe5, 0x38, 0xdc, 0xa6, 0xbb, 0x7f, 0xdd, 0xfd, 0x7b, 0xaf, 0xdf, 0xfb, 0xf5, 0x6b, 0xd9,
	0x50, 0x90, 0x0d, 0x65, 0xcd, 0x30, 0x75, 0x5b, 0x27, 0x25, 0xfe, 0xf9, 0xe2, 0xc6, 0x9a, 0xac,
	0x1a, 0xcf, 0xe5, 0x9b, 0xb5, 0xb3, 0x3d, 0x5d, 0xef, 0xa9, 0x6c, 0x5d, 0x36, 0x94, 0x75, 0x59,
	0xd3, 0x74, 0x5b, 0xb6, 0x15, 0x5d, 0xb3, 0x1c, 0x30, 0xfd, 0x3a, 0x94, 0xee, 0x33, 0xd9, 0x52,
	0xf6, 0x55, 0xd6, 0x36, 0xe4, 0x2e, 0x23, 0x15, 0xc8, 0xf7, 0xe5, 0x97, 0x55, 0x61, 0x49, 0x58,
	0x29, 0x88, 0xfc, 0x13, 0x7b, 0x14, 0xad, 0x9a, 0x73, 0x7b, 0x14, 0x8d, 0x10, 0x18, 0x53, 0x15,
	0xcb, 0xae, 0xe6, 0x97, 0xf2, 0x2b, 0x05, 0x11, 0xbf, 0x79, 0x9f, 0x65, 0x33, 0xa3, 0x3a, 0x86,
	0x30, 0xfc, 0xa6, 0x7f, 0x14, 0xa0, 0xf4, 0x48, 0x36, 0xe5, 0x3e, 0xb3, 0x99, 0xd9, 0x36, 0x58,
	0x97, 0xa3, 0x34, 0xb9, 0xcf, 0xdc, 0xe5, 0xf1, 0x9b, 0x34, 0xa0, 0x6c, 0x78, 0x20, 0xc9, 0x3e,
	0x30, 0x18, 0x6e, 0x55, 0xae, 0x9f, 0x5d, 0x8b, 0x18, 0xb2, 0xe6, 0xaf, 0xd4, 0x39, 0x30, 0x98,
	0x58, 0x32, 0xc2, 0x4d, 0xbe, 0xc8, 0x33, 0xd7, 0x0e, 0xc9, 0xe2, 0x86, 0x54, 0xf3, 0x4b, 0xc2,
	0x4a, 0x31, 0xb1, 0x48, 0xc4, 0x58, 0xb1, 0xf4, 0x2c, 0xdc, 0xa4, 0x7f, 0x15, 0xa0, 0xb4, 0xbb,
	0xff, 0x6d, 0xd6, 0xb5, 0x95, 0x17, 0x0c, 0xf9, 0x5e, 0x87, 0x31, 0x64, 0x24, 0xa4, 0x32, 0xf2,
	0xb1, 0xc8, 0x08, 0x91, 0xdc, 0xc2, 0x9e, 0x2e, 0xab, 0x68, 0x83, 0x20, 0xe2, 0x37, 0xa9, 0xc3,
	0xbc, 0xee, 0x41, 0xa5, 0x3e, 0xb3, 0x4d, 0xa5, 0x2b, 0xa1, 0x1b, 0xf2, 0xe8, 0x86, 0x59, 0x7f,
	0xf0, 0x21, 0x8e, 0xb5, 0xb8, 0x57, 0xde, 0x83, 0xd3, 0xf2, 0xd3, 0xa7, 0x0a, 0x3f, 0x2b, 0x59,
	0x0d, 0x4f, 0xb2, 0xaa, 0x63, 0xe8, 0xf6, 0xf9, 0x60, 0x38, 0x98, 0x66, 0xd1, 0xbb, 0x50, 0xd9,
	0x50, 0x7b, 0xba, 0xa9, 0xd8, 0xcf, 0xfb, 0x6d, 0x66, 0xdb, 0x8a, 0xd6, 0x4b, 0xf5, 0xfa, 0x1c,
	0x8c, 0xbf, 0x90, 0xd5, 0x01, 0x73, 0xcf, 0xd5, 0x69, 0xd0, 0x59, 0x98, 0x69, 0xca, 0xa6, 0x7a,
	0xd0, 0xb6, 0x75, 0xc3, 0x50, 0xb4, 0x1e, 0x77, 0x02, 0xfd, 0xb7, 0x00, 0xa5, 0x60, 0x4d, 0xee,
	0x96, 0xcb, 0x50, 0x96, 0xbd, 0x0e, 0x29, 0xb4, 0x74, 0xc9, 0xef, 0x45, 0x1b, 0x76, 0x60, 0x26,
	0x80, 0x59, 0x0e, 0x99, 0x6a, 0x6e, 0x29, 0xbf, 0x52, 0xac, 0x2f, 0xc6, 0x5c, 0x19, 0xe7, 0x2c,
	0x56, 0xe4, 0xb8, 0x15, 0x8f, 0x60, 0x96, 0x71, 0x6e, 0x92, 0xe5, 0x92, 0x93, 0x2c, 0x83, 0x75,
	0xdd, 0x73, 0x5e, 0x8a, 0xad, 0x97, 0xb0, 0x42, 0x9c, 0x61, 0x09, 0xc3, 0xfe, 0x25, 0x40, 0xa1,
	0x25, 0x5b, 0x0d, 0x5d, 0x7b, 0xa6, 0xf4, 0xc8, 0x57, 0xe0, 0x64, 0xcf, 0x94, 0x8d, 0xe7, 0x52,
	0x17, 0xdb, 0x68, 0x52, 0xb1, 0x5e, 0x8b, 0x2d, 0xbc, 0xc5, 0x21, 0xce, 0x0c, 0xb1, 0xd8, 0x0b,
	0x1a, 0xa4, 0x01, 0xa0, 0x1b, 0xcc, 0x74, 0xb2, 0x0b, 0xbd, 0x5a, 0xac, 0x5f, 0x8c, 0x4d, 0xf6,
	0x37, 0x5b, 0xdb, 0xf5, 0xa1, 0x62, 0x68, 0x5a, 0x6d, 0x13, 0x20, 0x18, 0x21, 0xef, 0x41, 0xc1,
	0x1f, 0xab, 0x0a, 0xe8, 0xb7, 0x6a, 0x3c, 0x04, 0xbd, 0x71, 0x31, 0x80, 0x52, 0x03, 0x8a, 0x21,
	0x9a, 0xe4, 0x1c, 0x80, 0x36, 0xe8, 0x4b, 0xaa, 0x7c, 0xc0, 0x4c, 0x0b, 0xcd, 0x1a, 0x17, 0x0b,
	0xda, 0xa0, 0xbf, 0x83, 0x1d, 0x64, 0x11, 0x8a, 0x8a, 0x66, 0x0c, 0x6c, 0xc9, 0x52, 0xbe, 0xcb,
	0x2c, 0x3c, 0x9f, 0x71, 0x11, 0xb0, 0xab, 0xcd, 0x7b, 0xc8, 0x05, 0x38, 0xa9, 0x0f, 0xec, 0x00,
	0x91, 0x47, 0x44, 0xd1, 0xe9, 0x43, 0x08, 0xfd, 0xa7, 0x00, 0x05, 0x9f, 0x0a, 0x0f, 0x0f, 0x9f,
	0x8c, 0xe4, 0xe7, 0x4f, 0x41, 0x2c, 0xf9, 0xbd, 0x98, 0xb3, 0x8f, 0x60, 0x3a, 0x48, 0x7c, 0x7e,
	0x96, 0x9e, 0xdb, 0x96, 0xb3, 0x8c, 0x5c, 0x8b, 0xa8, 0x89, 0x25, 0x06, 0xc2, 0x81, 0xed, 0x5a,
	0x0b, 0xca, 0x51, 0x04, 0xb9, 0x0b, 0xe0, 0x63, 0x2c, 0xd7, 0x87, 0x99, 0xc2, 0x82, 0x71, 0x12,
	0xc2, 0xd3, 0xdf, 0x8e, 0x41, 0xb9, 0xf9, 0xd2, 0x60, 0xa6, 0xd2, 0x67, 0x9a, 0x8d, 0xa1, 0xbf,
	0x97, 0x24, 0xed, 0x04, 0xca, 0xd5, 0x78, 0x04, 0x46, 0xe6, 0x1d, 0xc2, 0x9c, 0xdc, 0x86, 0x82,
	0xaf, 0x02, 0xae, 0x17, 0x32, 0xd5, 0x06, 0x69, 0x06, 0x70, 0x3e, 0xd7, 0x4f, 0x96, 0x0c, 0xd9,
	0x8b, 0xa4, 0xaf, 0x18, 0xc0, 0xf9, 0x51, 0xd9, 0xa6, 0x22, 0xab, 0x92, 0xcd, 0xfa, 0x86, 0x2a,
	0xdb, 0xcc, 0x15, 0xf0, 0x12, 0xf6, 0x76, 0xdc, 0x4e, 0xf2, 0x0e, 0x9c, 0x72, 0x24, 0xc8, 0x92,
	0xba, 0xba, 0xaa, 0xb2, 0xae, 0xad, 0x3b, 0xd6, 0x57, 0xc7, 0x11, 0x3e, 0xe7, 0x8e, 0x36, 0xbc,
	0x41, 0x57, 0x3d, 0xe7, 0xb8, 0x99, 0xaa, 0xca, 0x54, 0xc9, 0xd9, 0xa5, 0xab, 0x0f, 0x34, 0xbb,
	0x3a, 0x81, 0x21, 0x48, 0xbc, 0xb1, 0x0e, 0x1f, 0x6a, 0xf0, 0x11, 0x72, 0x05, 0xa6, 0xfb, 0xf2,
	0xcb, 0x08, 0x78, 0x12, 0xc1, 0xa5, 0xbe, 0xfc, 0x32, 0x84, 0xbb, 0x05, 0xa0, 0xc9, 0x96, 0x97,
	0xa9, 0x53, 0x68, 0x73, 0x35, 0x2b, 0xd9, 0xc4, 0x82, 0xe6, 0x7d, 0xbe, 0xf5, 0x08, 0xf9, 0x4d,
	0x0e, 0x2a, 0xa1, 0x93, 0xb6, 0x65, 0x7b, 0x60, 0xf1, 0x84, 0xb3, 0x6c, 0xd9, 0xb4, 0x25, 0x5b,
	0xf1, 0xa5, 0xb1, 0x80, 0x3d, 0x1d, 0xa5, 0xcf, 0xc8, 0x32, 0x4c, 0x77, 0xf5, 0xbe, 0xa1, 0x32,
	0x27, 0x3f, 0x38, 0xc6, 0x11, 0xe1, 0x72, 0xd0, 0x8d, 0xc0, 0x3d, 0x28, 0x74, 0x75, 0xcd, 0x51,
	0x79, 0x3c, 0xd8, 0x72, 0xfd, 0x56, 0x76, 0x94, 0xe1, 0xde, 0xa1, 0x8e, 0x86, 0x37, 0x15, 0x6f,
	0xa7, 0x60, 0x25, 0xfa, 0x29, 0x9c, 0xce, 0x40, 0x91, 0x22, 0x4c, 0x36, 0xc4, 0xe6, 0x46, 0xa7,
	0xb9, 0x59, 0x39, 0xc1, 0x1b, 0xe2, 0x5e, 0xab, 0xb5, 0xdd, 0xda, 0xaa, 0x08, 0xa4, 0x0c, 0x20,
	0x36, 0xdb, 0x9d, 0x0d, 0xb1, 0xc3, 0xdb, 0x39, 0x52, 0x82, 0x42, 0x7b, 0xaf, 0xd1, 0x68, 0x36,
	0x37, 0x9b, 0x9b, 0x95, 0x3c, 0x01, 0x98, 0xb8, 0xbf, 0xb1, 0xbd, 0xd3, 0xdc, 0xac, 0x8c, 0xf1,
	0x79, 0x7b, 0xad, 0x07, 0xad, 0xdd, 0xaf, 0xb6, 0x2a, 0xe3, 0xf4, 0x27, 0x02, 0x40, 0xb0, 0x5b,
	0xea, 0x55, 0x74, 0x03, 0xc6, 0x30, 0x94, 0x9c, 0xb0, 0x3f, 0x37, 0x34, 0x8f, 0x44, 0x84, 0x92,
	0x5b, 0x30, 0x61, 0xa1, 0xbd, 0x6e, 0xbc, 0x2f, 0x1e, 0xe2, 0x16, 0xd1, 0x85, 0xd3, 0x8f, 0x60,
	0xd6, 0x3f, 0xcc, 0x0d, 0xcb, 0x52, 0x7a, 0x5a, 0x26, 0xad, 0xf4, 0x1b, 0xb2, 0x0e, 0x13, 0xce,
	0x75, 0x7b, 0x84, 0x39, 0x4f, 0xa0, 0xe0, 0xcc, 0xd9, 0xd1, 0x51, 0x8d, 0xf9, 0x91, 0x4b, 0x96,
	0x2d, 0xf7, 0x0d, 0x2f, 0x38, 0x78, 0x4f, 0x9b, 0x77, 0x90, 0x6b, 0x30, 0xe1, 0xe4, 0x92, 0xeb,
	0x8e, 0xf9, 0x98, 0x65, 0xce, 0x42, 0xa2, 0x0b, 0xa2, 0x1f, 0x42, 0x71, 0x77, 0xdf, 0x62, 0xe6,
	0x0b, 0x47, 0x79, 0xd7, 0x61, 0xd2, 0xcd, 0x44, 0x37, 0x92, 0x33, 0xa6, 0x7b, 0x28, 0xfa, 0x00,
	0xca, 0xa1, 0xf9, 0x9c, 0xdf, 0x07, 0x50, 0x74, 0xab, 0x0d, 0x55, 0xef, 0x59, 0x19, 0xd7, 0x8e,
	0x6f, 0x8e, 0x08, 0x7d, 0xef, 0xd3, 0xa2, 0xdf, 0xcf, 0x43, 0x01, 0x93, 0x14, 0xb3, 0x7f, 0x19,
	0xa6, 0x99, 0x7f, 0x0c, 0xe1, 0x2a, 0xa1, 0x1c, 0x74, 0x63, 0x99, 0x70, 0x1c, 0xed, 0xdb, 0x87,
	0xf9, 0x40, 0x8e, 0x65, 0xff, 0x40, 0xbd, 0xb8, 0xb8, 0x16, 0x5b, 0xc7, 0x67, 0xb7, 0x96, 0x12,
	0x05, 0x96, 0x38, 0x67, 0xa4, 0xf4, 0x92, 0x05, 0x98, 0x32, 0x07, 0x9a, 0x23, 0x77, 0x8e, 0x3a,
	0x4e, 0x9a, 0x03, 0x0d, 0x6d, 0x7c, 0x23, 0x5d, 0xac, 0x7d, 0x03, 0xe6, 0xd2, 0xb6, 0x27, 0x9b,
	0x50, 0x0c, 0x9b, 0xe0, 0xb8, 0x9e, 0x66, 0x69, 0x51, 0x30, 0x53, 0x0c, 0x4f, 0xa3, 0x7f, 0xcb,
	0x41, 0xd1, 0xb1, 0xf3, 0xed, 0xaa, 0xd1, 0x83, 0xa4, 0x1a, 0xa5, 0xbb, 0xd7, 0x11, 0x22, 0x57,
	0xad, 0xd3, 0x35, 0x88, 0xdc, 0x85, 0xa2, 0x1e, 0xc4, 0x1d, 0xba, 0x35, 0x59, 0x6b, 0x85, 0x22,
	0x53, 0x0c, 0xc3, 0xe9, 0x3e, 0x90, 0xe4, 0xf2, 0x43, 0xc4, 0x2b, 0x22, 0x56, 0x39, 0x2e, 0x56,
	0x0f, 0xb6, 0x77, 0x76, 0x86, 0x0b, 0xd7, 0x6b, 0x18, 0xc7, 0x3d, 0x52, 0xf3, 0xfc, 0x6a, 0x44,
	0xb2, 0xaa, 0x59, 0x51, 0xe6, 0xaa, 0x55, 0x3d, 0xa6, 0x56, 0xb5, 0x6c, 0xb7, 0xf9, 0x42, 0xf5,
	0x18, 0x16, 0x44, 0xd6, 0x53, 0x2c, 0x9b, 0x99, 0x81, 0x98, 0x89, 0xec, 0x3b, 0x03, 0x66, 0xd9,
	0xe4, 0x03, 0x80, 0x20, 0x87, 0xdc, 0xfa, 0x63, 0x21, 0x53, 0x02, 0xc5, 0x10, 0x98, 0x2e, 0xc0,
	0xe9, 0xb4, 0x75, 0x0d, 0xf5, 0x80, 0x6e, 0xc2, 0xe2, 0x23, 0x93, 0x35, 0x9e, 0xb3, 0xee, 0xa7,
	0x19, 0x10, 0x5e, 0x0a, 0x76, 0x65, 0x4d, 0x32, 0xdd, 0x61, 0xdc, 0x7a, 0x4a, 0x2c, 0x76, 0x65,
	0xcd, 0x9b, 0x41, 0xef, 0xc1, 0xe9, 0x4d, 0xa6, 0x32, 0x9b, 0x25, 0x69, 0x8f, 0xaa, 0x08, 0xf4,
	0x34, 0xcc, 0x27, 0xd7, 0xe0, 0x14, 0x3f, 0x82, 0xb9, 0x2d, 0x66, 0x1f, 0x63, 0xe5, 0x5d, 0x20,
	0xb1, 0x05, 0xb8, 0x59, 0xc7, 0xf0, 0xe7, 0x00, 0x66, 0x42, 0x97, 0xcd, 0xa0, 0xdf, 0x97, 0xcd,
	0x83, 0xd1, 0xa5, 0x2f, 0xb8, 0xc7, 0x72, 0x47, 0xbb, 0xc7, 0x6a, 0x50, 0x8d, 0xd8, 0xb1, 0xa3,
	0x58, 0x9e, 0x33, 0x68, 0x1f, 0x4e, 0xa5, 0x8c, 0x71, 0x3b, 0xdb, 0x30, 0x17, 0xe2, 0x65, 0x21,
	0x5b, 0x85, 0x79, 0x4a, 0xb3, 0x94, 0xbd, 0xb9, 0x63, 0x97, 0x38, 0xcb, 0x62, 0x5d, 0x0a, 0xb3,
	0xe8, 0x0f, 0x05, 0x38, 0xb7, 0x67, 0x3c, 0x95, 0xc3, 0xa7, 0xe5, 0xb2, 0x3d, 0xe2, 0xe9, 0x90,
	0x0f, 0x01, 0x34, 0xf6, 0x99, 0x74, 0x34, 0x97, 0x14, 0x34, 0xf6, 0x99, 0xf3, 0x49, 0xcf, 0xc1,
	0x99, 0x2c, 0x26, 0x3c, 0x7a, 0xfe, 0x20, 0xc0, 0x45, 0x67, 0xdc, 0xaf, 0x87, 0x9b, 0x2f, 0x6d,
	0x53, 0x76, 0x5f, 0x98, 0x47, 0xe7, 0xfb, 0x04, 0xaa, 0x8c, 0x2f, 0x20, 0x25, 0x9e, 0xb9, 0xd6,
	0xa8, 0xef, 0xdc, 0x53, 0xb8, 0x40, 0xbc, 0xdb, 0xa2, 0x17, 0xe1, 0xc2, 0x70, 0xaa, 0xdc, 0xa0,
	0x07, 0xb0, 0xb4, 0xc5, 0xec, 0xb7, 0x63, 0x0c, 0x7d, 0x05, 0xe7, 0x87, 0x2c, 0xc6, 0xc3, 0x67,
	0x98, 0xb9, 0xc2, 0xf1, 0xcc, 0xbd, 0x07, 0x73, 0x9e, 0x82, 0xa0, 0x1a, 0x7a, 0xec, 0x57, 0x61,
	0x1c, 0x1f, 0x03, 0x6e, 0x52, 0xce, 0xa5, 0x29, 0xa7, 0xe8, 0x40, 0xe8, 0x1c, 0x90, 0xd8, 0x1a,
	0xdc, 0x47, 0x37, 0x81, 0x38, 0x5a, 0x12, 0x59, 0x97, 0x57, 0x61, 0xf8, 0xc8, 0x08, 0x39, 0xa4,
	0x80, 0x3d, 0xe8, 0x0b, 0x02, 0x95, 0xc8, 0x24, 0xbe, 0xd0, 0x63, 0x98, 0xdd, 0x62, 0x36, 0x76,
	0x84, 0xb2, 0x6d, 0xf4, 0x60, 0x39, 0x05, 0x13, 0xcf, 0x14, 0x95, 0xab, 0xa6, 0x73, 0xbf, 0xba,
	0x2d, 0xba, 0x01, 0x33, 0xd1, 0x75, 0xb9, 0xab, 0xaf, 0xc2, 0x04, 0xb2, 0xf1, 0x1c, 0x9b, 0x6e,
	0xb8, 0x8b, 0xa1, 0xd7, 0x61, 0xda, 0x5b, 0x62, 0x44, 0x03, 0xef, 0x40, 0x29, 0x98, 0xc1, 0x37,
	0x3c, 0x8a, 0xa3, 0x6d, 0xa8, 0x3a, 0xb1, 0x19, 0xbe, 0xb8, 0x46, 0xda, 0x97, 0x2b, 0x6d, 0x22,
	0xc3, 0x87, 0x5d, 0x87, 0xa1, 0xe4, 0xae, 0xc2, 0xa9, 0x94, 0x5d, 0xf9, 0xc9, 0xfc, 0x40, 0x80,
	0x33, 0x22, 0x33, 0x74, 0xd3, 0x8e, 0xd6, 0xb2, 0x23, 0x72, 0xba, 0x0f, 0xd3, 0xa1, 0xe2, 0x82,
	0x97, 0xbd, 0x19, 0x4f, 0x91, 0xd8, 0xea, 0x65, 0x3d, 0xd2, 0xa6, 0x67, 0xf8, 0x95, 0x9d, 0xc6,
	0x82, 0x73, 0xfc, 0xb9, 0x80, 0x8a, 0xfd, 0x46, 0x04, 0x17, 0xfd, 0x92, 0x1c, 0xc7, 0x9d, 0xf0,
	0x71, 0x0b, 0x6f, 0x04, 0x44, 0x4b, 0xbc, 0x7c, 0xbc, 0xc4, 0x5b, 0x80, 0x29, 0xa6, 0x3d, 0x75,
	0x06, 0xdd, 0x02, 0x96, 0x69, 0x4f, 0xf9, 0x10, 0xfd, 0x16, 0xde, 0x15, 0x29, 0x84, 0xd3, 0xbc,
	0x22, 0xbc, 0x89, 0x57, 0x7e, 0x2f, 0xc0, 0xfc, 0x16, 0xb3, 0xdb, 0x83, 0x5e, 0x8f, 0x59, 0xce,
	0x2f, 0x5e, 0xc7, 0xae, 0x62, 0x42, 0xe9, 0x91, 0x3b, 0x3c, 0x3d, 0xc8, 0x65, 0x28, 0x9b, 0xce,
	0x9e, 0x92, 0x36, 0xe8, 0xef, 0x33, 0x13, 0x5d, 0x34, 0x2e, 0x96, 0xdc, 0xde, 0x16, 0x76, 0xd2,
	0x5f, 0xe7, 0x30, 0xc3, 0x23, 0x4c, 0xb9, 0x27, 0xd4, 0xac, 0x37, 0x86, 0x93, 0x9a, 0xf1, 0x27,
	0x79, 0xca, 0x12, 0x47, 0x79, 0x6d, 0x44, 0x7e, 0xcd, 0xc9, 0x1d, 0xe9, 0xd7, 0x9c, 0xff, 0xf3,
	0xc3, 0xe2, 0x9b, 0xb0, 0xf4, 0x58, 0x56, 0x95, 0xc8, 0xa5, 0x14, 0xbf, 0x6d, 0x8e, 0x51, 0x49,
	0x2d, 0xc1, 0xf9, 0x21, 0xcb, 0x1b, 0xea, 0xc1, 0xea, 0x5e, 0xe8, 0xcf, 0x09, 0x58, 0xf1, 0x57,
	0xe0, 0xa4, 0x5b, 0xb0, 0x4b, 0x9d, 0x27, 0x8f, 0x9a, 0x95, 0x13, 0xbc, 0x9c, 0xdf, 0xdc, 0xdd,
	0xbb, 0xb7, 0xd3, 0xac, 0x08, 0x64, 0x12, 0xf2, 0xdb, 0xad, 0x4e, 0x25, 0x47, 0x4e, 0xc2, 0xd4,
	0xe6, 0x76, 0xbb, 0x21, 0x36, 0x3b, 0xcd, 0x4a, 0x9e, 0x4c, 0x43, 0xb1, 0xb1, 0xd1, 0x69, 0x6e,
	0xed, 0x8a, 0xdb, 0x8d, 0x8d, 0x9d, 0xca, 0xd8, 0xea, 0xfb, 0xa1, 0x5f, 0xfd, 0xbd, 0x87, 0x84,
	0xf7, 0x0e, 0x38, 0xc1, 0x27, 0x3f, 0xdc, 0x6e, 0x6d, 0x3f, 0xdc, 0xfe, 0x84, 0xaf, 0xc9, 0x5b,
	0x1b, 0x5f, 0x73, 0x5a, 0xb9, 0xfa, 0xef, 0x08, 0x4c, 0x3e, 0x94, 0x35, 0xb9, 0xc7, 0x4c, 0xf2,
	0x2b, 0x21, 0xb8, 0x7e, 0x42, 0x3f, 0x78, 0xac, 0xc4, 0x8c, 0xcf, 0x2c, 0xea, 0x6b, 0x57, 0x46,
	0x40, 0xe2, 0x85, 0xf6, 0xf9, 0x3f, 0xfe, 0xf3, 0xb3, 0xdc, 0x35, 0xba, 0x88, 0x7f, 0xd2, 0x71,
	0xb7, 0x5f, 0x4f, 0xa2, 0x6f, 0x87, 0x13, 0xe6, 0x4f, 0x02, 0xd4, 0xb2, 0x8b, 0xfb, 0x23, 0xb0,
	0x5c, 0x8b, 0x47, 0xcd, 0xf0, 0x17, 0x03, 0xbd, 0x83, 0x6c, 0xdf, 0xa5, 0xcb, 0x11, 0xb6, 0xd9,
	0xb3, 0x22, 0xac, 0x7f, 0x21, 0x78, 0xf7, 0x70, 0x88, 0x6b, 0xdc, 0x4f, 0x19, 0xaf, 0x8d, 0xda,
	0xa5, 0x43, 0x71, 0x9c, 0xdf, 0x2d, 0xe4, 0x77, 0x83, 0xac, 0x47, 0xf8, 0xc5, 0xb1, 0xeb, 0xaf,
	0x62, 0x77, 0xfc, 0x6b, 0xf2, 0x53, 0x01, 0xaf, 0xd0, 0x10, 0xb1, 0x8b, 0x49, 0x21, 0x48, 0xb2,
	0xba, 0x30, 0x1c, 0xc4, 0x29, 0xbd, 0x83, 0x94, 0xd6, 0xc8, 0xd5, 0x08, 0xa5, 0x08, 0x30, 0x85,
	0xcf, 0x8f, 0x05, 0xac, 0x23, 0xa2, 0x65, 0x3f, 0x59, 0x1e, 0xb6, 0x5d, 0xa8, 0x8c, 0xa9, 0x5d,
	0x3e, 0x1c, 0xc8, 0xb9, 0x5d, 0x41, 0x6e, 0x4b, 0xe4, 0x7c, 0x36, 0x37, 0xdc, 0xf7, 0xcf, 0x82,
	0x77, 0x5b, 0x27, 0x7e, 0x1d, 0x8d, 0xff, 0x50, 0x3e, 0xf4, 0xed, 0x50, 0x5b, 0x1d, 0x11, 0xcd,
	0xc9, 0x7d, 0x8c, 0xe4, 0x6e, 0xd7, 0xde, 0x8d, 0x90, 0x4b, 0x9f, 0x91, 0xf4, 0xe0, 0x6d, 0x61,
	0x95, 0xfc, 0x5d, 0x80, 0xb3, 0xc3, 0xca, 0x6e, 0x52, 0x4f, 0xa5, 0x33, 0xb4, 0x02, 0xaf, 0x5d,
	0x3f, 0xd2, 0x1c, 0x6e, 0xc8, 0x7d, 0x34, 0xe4, 0xe3, 0xda, 0x9d, 0x14, 0x43, 0xd2, 0xe7, 0xa5,
	0x9b, 0xf3, 0x17, 0x01, 0x16, 0x32, 0x6b, 0x7a, 0xb2, 0x9e, 0x3c, 0xf2, 0xe1, 0x86, 0x5c, 0x1b,
	0x7d, 0x42, 0xe8, 0x38, 0xc8, 0xfb, 0xf1, 0x58, 0x19, 0xd5, 0x04, 0xf2, 0xb9, 0x00, 0xa5, 0x48,
	0x49, 0x9f, 0xc8, 0xb1, 0xb4, 0x47, 0x43, 0x22, 0xc7, 0x52, 0x5e, 0x05, 0x5f, 0x42, 0x6e, 0x17,
	0x69, 0x2d, 0x55, 0x44, 0x11, 0x78, 0xdb, 0xa9, 0x76, 0xc9, 0xf7, 0x04, 0x28, 0x86, 0x1e, 0x03,
	0xe4, 0x42, 0xaa, 0xae, 0x44, 0x08, 0x2c, 0x0e, 0x83, 0xf0, 0xed, 0xaf, 0xe1, 0xf6, 0xcb, 0xe4,
	0x72, 0x8a, 0xea, 0x20, 0x6c, 0xfd, 0x55, 0x50, 0x10, 0xbe, 0x26, 0x3f, 0x12, 0xe0, 0x64, 0xf8,
	0x8d, 0x40, 0x68, 0xf2, 0x24, 0xe2, 0x0f, 0x93, 0xda, 0xd2, 0x50, 0x4c, 0xe8, 0x26, 0x21, 0x5f,
	0x8e, 0x1f, 0x90, 0x8f, 0x4b, 0x39, 0x13, 0x1b, 0xa6, 0x3c, 0x04, 0x39, 0x9f, 0xb1, 0x85, 0x47,
	0xe1, 0x6c, 0xe6, 0x38, 0xdf, 0x7e, 0x15, 0xb7, 0xbf, 0x44, 0x68, 0xea, 0xf6, 0x51, 0x0f, 0x7c,
	0x21, 0xc0, 0x4c, 0xa2, 0xfa, 0x4f, 0xa8, 0x5b, 0xd6, 0xab, 0x24, 0xa1, 0x6e, 0x19, 0x0f, 0x09,
	0x37, 0x2a, 0x6a, 0xe7, 0x53, 0xf2, 0x2e, 0x04, 0xe6, 0xa9, 0xf5, 0x4b, 0x81, 0xbf, 0x58, 0x93,
	0xd5, 0x3e, 0x59, 0x4d, 0x04, 0x5f, 0xe6, 0xc3, 0xa4, 0xb6, 0x32, 0x12, 0x96, 0x33, 0xbb, 0x8a,
	0xcc, 0xae, 0xd0, 0x0b, 0xb1, 0x78, 0x4d, 0xe2, 0x39, 0xb9, 0x2f, 0x9c, 0xbb, 0x20, 0xc6, 0x2c,
	0xe5, 0x2e, 0x48, 0xa7, 0x75, 0xf9, 0x70, 0x60, 0x38, 0x87, 0x12, 0x77, 0x41, 0x82, 0x50, 0xfd,
	0xbf, 0x02, 0x40, 0x50, 0x14, 0x93, 0x4f, 0xa0, 0x1c, 0xad, 0x92, 0xc9, 0xa5, 0x43, 0x8a, 0x68,
	0x87, 0x18, 0x3d, 0xbc, 0xd4, 0x26, 0xaf, 0x60, 0x21, 0xb3, 0x8c, 0x4c, 0x48, 0xde, 0x61, 0xf5,
	0x6c, 0x42, 0xf2, 0x86, 0x57, 0xa8, 0xf5, 0x69, 0x28, 0x45, 0xfe, 0xf3, 0x60, 0x7f, 0x02, 0xff,
	0xcd, 0xe6, 0xe6, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xe1, 0xfa, 0xe4, 0xa0, 0x23, 0x00,
	0x00,
}
