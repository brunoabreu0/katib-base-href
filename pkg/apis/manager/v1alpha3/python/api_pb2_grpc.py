# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import api_pb2 as api__pb2


class ManagerStub(object):
  """*
  Service for Main API for Katib
  For each RPC service, we define mapping to HTTP REST API method.
  The mapping includes the URL path, query parameters and request body.
  https://cloud.google.com/service-infrastructure/docs/service-management/reference/rpc/google.api#http
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ReportObservationLog = channel.unary_unary(
        '/api.v1.alpha3.Manager/ReportObservationLog',
        request_serializer=api__pb2.ReportObservationLogRequest.SerializeToString,
        response_deserializer=api__pb2.ReportObservationLogReply.FromString,
        )
    self.GetObservationLog = channel.unary_unary(
        '/api.v1.alpha3.Manager/GetObservationLog',
        request_serializer=api__pb2.GetObservationLogRequest.SerializeToString,
        response_deserializer=api__pb2.GetObservationLogReply.FromString,
        )
    self.DeleteObservationLog = channel.unary_unary(
        '/api.v1.alpha3.Manager/DeleteObservationLog',
        request_serializer=api__pb2.DeleteObservationLogRequest.SerializeToString,
        response_deserializer=api__pb2.DeleteObservationLogReply.FromString,
        )


class ManagerServicer(object):
  """*
  Service for Main API for Katib
  For each RPC service, we define mapping to HTTP REST API method.
  The mapping includes the URL path, query parameters and request body.
  https://cloud.google.com/service-infrastructure/docs/service-management/reference/rpc/google.api#http
  """

  def ReportObservationLog(self, request, context):
    """* 
    Report a log of Observations for a Trial.
    The log consists of timestamp and value of metric.
    Katib store every log of metrics.
    You can see accuracy curve or other metric logs on UI.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetObservationLog(self, request, context):
    """*
    Get all log of Observations for a Trial.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteObservationLog(self, request, context):
    """*
    Delete all log of Observations for a Trial.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ManagerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ReportObservationLog': grpc.unary_unary_rpc_method_handler(
          servicer.ReportObservationLog,
          request_deserializer=api__pb2.ReportObservationLogRequest.FromString,
          response_serializer=api__pb2.ReportObservationLogReply.SerializeToString,
      ),
      'GetObservationLog': grpc.unary_unary_rpc_method_handler(
          servicer.GetObservationLog,
          request_deserializer=api__pb2.GetObservationLogRequest.FromString,
          response_serializer=api__pb2.GetObservationLogReply.SerializeToString,
      ),
      'DeleteObservationLog': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteObservationLog,
          request_deserializer=api__pb2.DeleteObservationLogRequest.FromString,
          response_serializer=api__pb2.DeleteObservationLogReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'api.v1.alpha3.Manager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class SuggestionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetSuggestions = channel.unary_unary(
        '/api.v1.alpha3.Suggestion/GetSuggestions',
        request_serializer=api__pb2.GetSuggestionsRequest.SerializeToString,
        response_deserializer=api__pb2.GetSuggestionsReply.FromString,
        )
    self.ValidateAlgorithmSettings = channel.unary_unary(
        '/api.v1.alpha3.Suggestion/ValidateAlgorithmSettings',
        request_serializer=api__pb2.ValidateAlgorithmSettingsRequest.SerializeToString,
        response_deserializer=api__pb2.ValidateAlgorithmSettingsReply.FromString,
        )


class SuggestionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetSuggestions(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ValidateAlgorithmSettings(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SuggestionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetSuggestions': grpc.unary_unary_rpc_method_handler(
          servicer.GetSuggestions,
          request_deserializer=api__pb2.GetSuggestionsRequest.FromString,
          response_serializer=api__pb2.GetSuggestionsReply.SerializeToString,
      ),
      'ValidateAlgorithmSettings': grpc.unary_unary_rpc_method_handler(
          servicer.ValidateAlgorithmSettings,
          request_deserializer=api__pb2.ValidateAlgorithmSettingsRequest.FromString,
          response_serializer=api__pb2.ValidateAlgorithmSettingsReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'api.v1.alpha3.Suggestion', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class EarlyStoppingStub(object):
  """TODO
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """


class EarlyStoppingServicer(object):
  """TODO
  """


def add_EarlyStoppingServicer_to_server(servicer, server):
  rpc_method_handlers = {
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'api.v1.alpha3.EarlyStopping', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
