// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api_v1_beta1 is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	FeasibleSpace
	ParameterSpec
	ObjectiveSpec
	AlgorithmSetting
	EarlyStoppingSpec
	AlgorithmSpec
	NasConfig
	GraphConfig
	Operation
	ExperimentSpec
	Experiment
	ParameterAssignment
	Metric
	MetricLog
	Observation
	ObservationLog
	TrialSpec
	TrialStatus
	Trial
	ReportObservationLogRequest
	ReportObservationLogReply
	DeleteObservationLogRequest
	DeleteObservationLogReply
	GetObservationLogRequest
	GetObservationLogReply
	GetSuggestionsRequest
	GetSuggestionsReply
	ValidateAlgorithmSettingsRequest
	ValidateAlgorithmSettingsReply
	GetEarlyStoppingRulesRequest
	GetEarlyStoppingRulesReply
	EarlyStoppingRule
	SetTrialStatusRequest
	SetTrialStatusReply
*/
package api_v1_beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Types of value for HyperParameter.
type ParameterType int32

const (
	ParameterType_UNKNOWN_TYPE ParameterType = 0
	ParameterType_DOUBLE       ParameterType = 1
	ParameterType_INT          ParameterType = 2
	ParameterType_DISCRETE     ParameterType = 3
	ParameterType_CATEGORICAL  ParameterType = 4
)

var ParameterType_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "DOUBLE",
	2: "INT",
	3: "DISCRETE",
	4: "CATEGORICAL",
}
var ParameterType_value = map[string]int32{
	"UNKNOWN_TYPE": 0,
	"DOUBLE":       1,
	"INT":          2,
	"DISCRETE":     3,
	"CATEGORICAL":  4,
}

func (x ParameterType) String() string {
	return proto.EnumName(ParameterType_name, int32(x))
}
func (ParameterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Direction of optimization. Minimize or Maximize.
type ObjectiveType int32

const (
	ObjectiveType_UNKNOWN  ObjectiveType = 0
	ObjectiveType_MINIMIZE ObjectiveType = 1
	ObjectiveType_MAXIMIZE ObjectiveType = 2
)

var ObjectiveType_name = map[int32]string{
	0: "UNKNOWN",
	1: "MINIMIZE",
	2: "MAXIMIZE",
}
var ObjectiveType_value = map[string]int32{
	"UNKNOWN":  0,
	"MINIMIZE": 1,
	"MAXIMIZE": 2,
}

func (x ObjectiveType) String() string {
	return proto.EnumName(ObjectiveType_name, int32(x))
}
func (ObjectiveType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ComparisonType int32

const (
	ComparisonType_EQUAL   ComparisonType = 0
	ComparisonType_LESS    ComparisonType = 1
	ComparisonType_GREATER ComparisonType = 2
)

var ComparisonType_name = map[int32]string{
	0: "EQUAL",
	1: "LESS",
	2: "GREATER",
}
var ComparisonType_value = map[string]int32{
	"EQUAL":   0,
	"LESS":    1,
	"GREATER": 2,
}

func (x ComparisonType) String() string {
	return proto.EnumName(ComparisonType_name, int32(x))
}
func (ComparisonType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TrialStatus_TrialConditionType int32

const (
	TrialStatus_CREATED   TrialStatus_TrialConditionType = 0
	TrialStatus_RUNNING   TrialStatus_TrialConditionType = 1
	TrialStatus_SUCCEEDED TrialStatus_TrialConditionType = 2
	TrialStatus_KILLED    TrialStatus_TrialConditionType = 3
	TrialStatus_FAILED    TrialStatus_TrialConditionType = 4
	TrialStatus_UNKNOWN   TrialStatus_TrialConditionType = 5
)

var TrialStatus_TrialConditionType_name = map[int32]string{
	0: "CREATED",
	1: "RUNNING",
	2: "SUCCEEDED",
	3: "KILLED",
	4: "FAILED",
	5: "UNKNOWN",
}
var TrialStatus_TrialConditionType_value = map[string]int32{
	"CREATED":   0,
	"RUNNING":   1,
	"SUCCEEDED": 2,
	"KILLED":    3,
	"FAILED":    4,
	"UNKNOWN":   5,
}

func (x TrialStatus_TrialConditionType) String() string {
	return proto.EnumName(TrialStatus_TrialConditionType_name, int32(x))
}
func (TrialStatus_TrialConditionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17, 0}
}

// *
// Feasible space for optimization.
// Int and Double type use Max/Min.
// Discrete and Categorical type use List.
type FeasibleSpace struct {
	Max  string   `protobuf:"bytes,1,opt,name=max" json:"max,omitempty"`
	Min  string   `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
	List []string `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Step string   `protobuf:"bytes,4,opt,name=step" json:"step,omitempty"`
}

func (m *FeasibleSpace) Reset()                    { *m = FeasibleSpace{} }
func (m *FeasibleSpace) String() string            { return proto.CompactTextString(m) }
func (*FeasibleSpace) ProtoMessage()               {}
func (*FeasibleSpace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FeasibleSpace) GetMax() string {
	if m != nil {
		return m.Max
	}
	return ""
}

func (m *FeasibleSpace) GetMin() string {
	if m != nil {
		return m.Min
	}
	return ""
}

func (m *FeasibleSpace) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *FeasibleSpace) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

// *
// Config for a Hyper parameter.
// Katib will create each Hyper parameter from this config.
type ParameterSpec struct {
	Name          string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ParameterType ParameterType  `protobuf:"varint,2,opt,name=parameter_type,json=parameterType,enum=api.v1.beta1.ParameterType" json:"parameter_type,omitempty"`
	FeasibleSpace *FeasibleSpace `protobuf:"bytes,3,opt,name=feasible_space,json=feasibleSpace" json:"feasible_space,omitempty"`
}

func (m *ParameterSpec) Reset()                    { *m = ParameterSpec{} }
func (m *ParameterSpec) String() string            { return proto.CompactTextString(m) }
func (*ParameterSpec) ProtoMessage()               {}
func (*ParameterSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ParameterSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParameterSpec) GetParameterType() ParameterType {
	if m != nil {
		return m.ParameterType
	}
	return ParameterType_UNKNOWN_TYPE
}

func (m *ParameterSpec) GetFeasibleSpace() *FeasibleSpace {
	if m != nil {
		return m.FeasibleSpace
	}
	return nil
}

type ObjectiveSpec struct {
	Type                  ObjectiveType `protobuf:"varint,1,opt,name=type,enum=api.v1.beta1.ObjectiveType" json:"type,omitempty"`
	Goal                  float64       `protobuf:"fixed64,2,opt,name=goal" json:"goal,omitempty"`
	ObjectiveMetricName   string        `protobuf:"bytes,3,opt,name=objective_metric_name,json=objectiveMetricName" json:"objective_metric_name,omitempty"`
	AdditionalMetricNames []string      `protobuf:"bytes,4,rep,name=additional_metric_names,json=additionalMetricNames" json:"additional_metric_names,omitempty"`
}

func (m *ObjectiveSpec) Reset()                    { *m = ObjectiveSpec{} }
func (m *ObjectiveSpec) String() string            { return proto.CompactTextString(m) }
func (*ObjectiveSpec) ProtoMessage()               {}
func (*ObjectiveSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ObjectiveSpec) GetType() ObjectiveType {
	if m != nil {
		return m.Type
	}
	return ObjectiveType_UNKNOWN
}

func (m *ObjectiveSpec) GetGoal() float64 {
	if m != nil {
		return m.Goal
	}
	return 0
}

func (m *ObjectiveSpec) GetObjectiveMetricName() string {
	if m != nil {
		return m.ObjectiveMetricName
	}
	return ""
}

func (m *ObjectiveSpec) GetAdditionalMetricNames() []string {
	if m != nil {
		return m.AdditionalMetricNames
	}
	return nil
}

type AlgorithmSetting struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *AlgorithmSetting) Reset()                    { *m = AlgorithmSetting{} }
func (m *AlgorithmSetting) String() string            { return proto.CompactTextString(m) }
func (*AlgorithmSetting) ProtoMessage()               {}
func (*AlgorithmSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AlgorithmSetting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AlgorithmSetting) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EarlyStoppingSpec struct {
}

func (m *EarlyStoppingSpec) Reset()                    { *m = EarlyStoppingSpec{} }
func (m *EarlyStoppingSpec) String() string            { return proto.CompactTextString(m) }
func (*EarlyStoppingSpec) ProtoMessage()               {}
func (*EarlyStoppingSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AlgorithmSpec struct {
	AlgorithmName     string              `protobuf:"bytes,1,opt,name=algorithm_name,json=algorithmName" json:"algorithm_name,omitempty"`
	AlgorithmSettings []*AlgorithmSetting `protobuf:"bytes,2,rep,name=algorithm_settings,json=algorithmSettings" json:"algorithm_settings,omitempty"`
	EarlyStoppingSpec *EarlyStoppingSpec  `protobuf:"bytes,3,opt,name=early_stopping_spec,json=earlyStoppingSpec" json:"early_stopping_spec,omitempty"`
}

func (m *AlgorithmSpec) Reset()                    { *m = AlgorithmSpec{} }
func (m *AlgorithmSpec) String() string            { return proto.CompactTextString(m) }
func (*AlgorithmSpec) ProtoMessage()               {}
func (*AlgorithmSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AlgorithmSpec) GetAlgorithmName() string {
	if m != nil {
		return m.AlgorithmName
	}
	return ""
}

func (m *AlgorithmSpec) GetAlgorithmSettings() []*AlgorithmSetting {
	if m != nil {
		return m.AlgorithmSettings
	}
	return nil
}

func (m *AlgorithmSpec) GetEarlyStoppingSpec() *EarlyStoppingSpec {
	if m != nil {
		return m.EarlyStoppingSpec
	}
	return nil
}

// *
// NasConfig contains a config of NAS job
type NasConfig struct {
	GraphConfig *GraphConfig          `protobuf:"bytes,1,opt,name=graph_config,json=graphConfig" json:"graph_config,omitempty"`
	Operations  *NasConfig_Operations `protobuf:"bytes,2,opt,name=operations" json:"operations,omitempty"`
}

func (m *NasConfig) Reset()                    { *m = NasConfig{} }
func (m *NasConfig) String() string            { return proto.CompactTextString(m) }
func (*NasConfig) ProtoMessage()               {}
func (*NasConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NasConfig) GetGraphConfig() *GraphConfig {
	if m != nil {
		return m.GraphConfig
	}
	return nil
}

func (m *NasConfig) GetOperations() *NasConfig_Operations {
	if m != nil {
		return m.Operations
	}
	return nil
}

type NasConfig_Operations struct {
	Operation []*Operation `protobuf:"bytes,1,rep,name=operation" json:"operation,omitempty"`
}

func (m *NasConfig_Operations) Reset()                    { *m = NasConfig_Operations{} }
func (m *NasConfig_Operations) String() string            { return proto.CompactTextString(m) }
func (*NasConfig_Operations) ProtoMessage()               {}
func (*NasConfig_Operations) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *NasConfig_Operations) GetOperation() []*Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

// *
// GraphConfig contains a config of DAG
type GraphConfig struct {
	NumLayers   int32   `protobuf:"varint,1,opt,name=num_layers,json=numLayers" json:"num_layers,omitempty"`
	InputSizes  []int32 `protobuf:"varint,2,rep,packed,name=input_sizes,json=inputSizes" json:"input_sizes,omitempty"`
	OutputSizes []int32 `protobuf:"varint,3,rep,packed,name=output_sizes,json=outputSizes" json:"output_sizes,omitempty"`
}

func (m *GraphConfig) Reset()                    { *m = GraphConfig{} }
func (m *GraphConfig) String() string            { return proto.CompactTextString(m) }
func (*GraphConfig) ProtoMessage()               {}
func (*GraphConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GraphConfig) GetNumLayers() int32 {
	if m != nil {
		return m.NumLayers
	}
	return 0
}

func (m *GraphConfig) GetInputSizes() []int32 {
	if m != nil {
		return m.InputSizes
	}
	return nil
}

func (m *GraphConfig) GetOutputSizes() []int32 {
	if m != nil {
		return m.OutputSizes
	}
	return nil
}

// *
// Config for operations in DAG
type Operation struct {
	OperationType  string                    `protobuf:"bytes,1,opt,name=operation_type,json=operationType" json:"operation_type,omitempty"`
	ParameterSpecs *Operation_ParameterSpecs `protobuf:"bytes,2,opt,name=parameter_specs,json=parameterSpecs" json:"parameter_specs,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Operation) GetOperationType() string {
	if m != nil {
		return m.OperationType
	}
	return ""
}

func (m *Operation) GetParameterSpecs() *Operation_ParameterSpecs {
	if m != nil {
		return m.ParameterSpecs
	}
	return nil
}

// *
// List of ParameterSpec
type Operation_ParameterSpecs struct {
	Parameters []*ParameterSpec `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
}

func (m *Operation_ParameterSpecs) Reset()                    { *m = Operation_ParameterSpecs{} }
func (m *Operation_ParameterSpecs) String() string            { return proto.CompactTextString(m) }
func (*Operation_ParameterSpecs) ProtoMessage()               {}
func (*Operation_ParameterSpecs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8, 0} }

func (m *Operation_ParameterSpecs) GetParameters() []*ParameterSpec {
	if m != nil {
		return m.Parameters
	}
	return nil
}

// *
// Spec of a Experiment. Experiment represents a single optimization run over a feasible space.
// Each Experiment contains a configuration describing the feasible space, as well as a set of Trials.
// It is assumed that objective function f(x) does not change in the course of a Experiment.
type ExperimentSpec struct {
	ParameterSpecs       *ExperimentSpec_ParameterSpecs `protobuf:"bytes,1,opt,name=parameter_specs,json=parameterSpecs" json:"parameter_specs,omitempty"`
	Objective            *ObjectiveSpec                 `protobuf:"bytes,2,opt,name=objective" json:"objective,omitempty"`
	Algorithm            *AlgorithmSpec                 `protobuf:"bytes,3,opt,name=algorithm" json:"algorithm,omitempty"`
	TrialTemplate        string                         `protobuf:"bytes,4,opt,name=trial_template,json=trialTemplate" json:"trial_template,omitempty"`
	MetricsCollectorSpec string                         `protobuf:"bytes,5,opt,name=metrics_collector_spec,json=metricsCollectorSpec" json:"metrics_collector_spec,omitempty"`
	ParallelTrialCount   int32                          `protobuf:"varint,6,opt,name=parallel_trial_count,json=parallelTrialCount" json:"parallel_trial_count,omitempty"`
	MaxTrialCount        int32                          `protobuf:"varint,7,opt,name=max_trial_count,json=maxTrialCount" json:"max_trial_count,omitempty"`
	NasConfig            *NasConfig                     `protobuf:"bytes,8,opt,name=nas_config,json=nasConfig" json:"nas_config,omitempty"`
}

func (m *ExperimentSpec) Reset()                    { *m = ExperimentSpec{} }
func (m *ExperimentSpec) String() string            { return proto.CompactTextString(m) }
func (*ExperimentSpec) ProtoMessage()               {}
func (*ExperimentSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ExperimentSpec) GetParameterSpecs() *ExperimentSpec_ParameterSpecs {
	if m != nil {
		return m.ParameterSpecs
	}
	return nil
}

func (m *ExperimentSpec) GetObjective() *ObjectiveSpec {
	if m != nil {
		return m.Objective
	}
	return nil
}

func (m *ExperimentSpec) GetAlgorithm() *AlgorithmSpec {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

func (m *ExperimentSpec) GetTrialTemplate() string {
	if m != nil {
		return m.TrialTemplate
	}
	return ""
}

func (m *ExperimentSpec) GetMetricsCollectorSpec() string {
	if m != nil {
		return m.MetricsCollectorSpec
	}
	return ""
}

func (m *ExperimentSpec) GetParallelTrialCount() int32 {
	if m != nil {
		return m.ParallelTrialCount
	}
	return 0
}

func (m *ExperimentSpec) GetMaxTrialCount() int32 {
	if m != nil {
		return m.MaxTrialCount
	}
	return 0
}

func (m *ExperimentSpec) GetNasConfig() *NasConfig {
	if m != nil {
		return m.NasConfig
	}
	return nil
}

// *
// List of ParameterSpec
type ExperimentSpec_ParameterSpecs struct {
	Parameters []*ParameterSpec `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
}

func (m *ExperimentSpec_ParameterSpecs) Reset()         { *m = ExperimentSpec_ParameterSpecs{} }
func (m *ExperimentSpec_ParameterSpecs) String() string { return proto.CompactTextString(m) }
func (*ExperimentSpec_ParameterSpecs) ProtoMessage()    {}
func (*ExperimentSpec_ParameterSpecs) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{9, 0}
}

func (m *ExperimentSpec_ParameterSpecs) GetParameters() []*ParameterSpec {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type Experiment struct {
	Name string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Spec *ExperimentSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
}

func (m *Experiment) Reset()                    { *m = Experiment{} }
func (m *Experiment) String() string            { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()               {}
func (*Experiment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Experiment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Experiment) GetSpec() *ExperimentSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type ParameterAssignment struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ParameterAssignment) Reset()                    { *m = ParameterAssignment{} }
func (m *ParameterAssignment) String() string            { return proto.CompactTextString(m) }
func (*ParameterAssignment) ProtoMessage()               {}
func (*ParameterAssignment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ParameterAssignment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParameterAssignment) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Metric struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metric) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MetricLog struct {
	TimeStamp string  `protobuf:"bytes,1,opt,name=time_stamp,json=timeStamp" json:"time_stamp,omitempty"`
	Metric    *Metric `protobuf:"bytes,2,opt,name=metric" json:"metric,omitempty"`
}

func (m *MetricLog) Reset()                    { *m = MetricLog{} }
func (m *MetricLog) String() string            { return proto.CompactTextString(m) }
func (*MetricLog) ProtoMessage()               {}
func (*MetricLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MetricLog) GetTimeStamp() string {
	if m != nil {
		return m.TimeStamp
	}
	return ""
}

func (m *MetricLog) GetMetric() *Metric {
	if m != nil {
		return m.Metric
	}
	return nil
}

type Observation struct {
	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *Observation) Reset()                    { *m = Observation{} }
func (m *Observation) String() string            { return proto.CompactTextString(m) }
func (*Observation) ProtoMessage()               {}
func (*Observation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Observation) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type ObservationLog struct {
	MetricLogs []*MetricLog `protobuf:"bytes,1,rep,name=metric_logs,json=metricLogs" json:"metric_logs,omitempty"`
}

func (m *ObservationLog) Reset()                    { *m = ObservationLog{} }
func (m *ObservationLog) String() string            { return proto.CompactTextString(m) }
func (*ObservationLog) ProtoMessage()               {}
func (*ObservationLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ObservationLog) GetMetricLogs() []*MetricLog {
	if m != nil {
		return m.MetricLogs
	}
	return nil
}

type TrialSpec struct {
	ExperimentName       string                          `protobuf:"bytes,1,opt,name=experiment_name,json=experimentName" json:"experiment_name,omitempty"`
	Objective            *ObjectiveSpec                  `protobuf:"bytes,2,opt,name=objective" json:"objective,omitempty"`
	ParameterAssignments *TrialSpec_ParameterAssignments `protobuf:"bytes,3,opt,name=parameter_assignments,json=parameterAssignments" json:"parameter_assignments,omitempty"`
	RunSpec              string                          `protobuf:"bytes,4,opt,name=run_spec,json=runSpec" json:"run_spec,omitempty"`
	MetricsCollectorSpec string                          `protobuf:"bytes,5,opt,name=metrics_collector_spec,json=metricsCollectorSpec" json:"metrics_collector_spec,omitempty"`
}

func (m *TrialSpec) Reset()                    { *m = TrialSpec{} }
func (m *TrialSpec) String() string            { return proto.CompactTextString(m) }
func (*TrialSpec) ProtoMessage()               {}
func (*TrialSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *TrialSpec) GetExperimentName() string {
	if m != nil {
		return m.ExperimentName
	}
	return ""
}

func (m *TrialSpec) GetObjective() *ObjectiveSpec {
	if m != nil {
		return m.Objective
	}
	return nil
}

func (m *TrialSpec) GetParameterAssignments() *TrialSpec_ParameterAssignments {
	if m != nil {
		return m.ParameterAssignments
	}
	return nil
}

func (m *TrialSpec) GetRunSpec() string {
	if m != nil {
		return m.RunSpec
	}
	return ""
}

func (m *TrialSpec) GetMetricsCollectorSpec() string {
	if m != nil {
		return m.MetricsCollectorSpec
	}
	return ""
}

// *
// List of ParameterAssignment
type TrialSpec_ParameterAssignments struct {
	Assignments []*ParameterAssignment `protobuf:"bytes,1,rep,name=assignments" json:"assignments,omitempty"`
}

func (m *TrialSpec_ParameterAssignments) Reset()         { *m = TrialSpec_ParameterAssignments{} }
func (m *TrialSpec_ParameterAssignments) String() string { return proto.CompactTextString(m) }
func (*TrialSpec_ParameterAssignments) ProtoMessage()    {}
func (*TrialSpec_ParameterAssignments) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16, 0}
}

func (m *TrialSpec_ParameterAssignments) GetAssignments() []*ParameterAssignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type TrialStatus struct {
	StartTime      string                         `protobuf:"bytes,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	CompletionTime string                         `protobuf:"bytes,2,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	Condition      TrialStatus_TrialConditionType `protobuf:"varint,3,opt,name=condition,enum=api.v1.beta1.TrialStatus_TrialConditionType" json:"condition,omitempty"`
	Observation    *Observation                   `protobuf:"bytes,4,opt,name=observation" json:"observation,omitempty"`
}

func (m *TrialStatus) Reset()                    { *m = TrialStatus{} }
func (m *TrialStatus) String() string            { return proto.CompactTextString(m) }
func (*TrialStatus) ProtoMessage()               {}
func (*TrialStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TrialStatus) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *TrialStatus) GetCompletionTime() string {
	if m != nil {
		return m.CompletionTime
	}
	return ""
}

func (m *TrialStatus) GetCondition() TrialStatus_TrialConditionType {
	if m != nil {
		return m.Condition
	}
	return TrialStatus_CREATED
}

func (m *TrialStatus) GetObservation() *Observation {
	if m != nil {
		return m.Observation
	}
	return nil
}

type Trial struct {
	Name   string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Spec   *TrialSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *TrialStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Trial) Reset()                    { *m = Trial{} }
func (m *Trial) String() string            { return proto.CompactTextString(m) }
func (*Trial) ProtoMessage()               {}
func (*Trial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Trial) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Trial) GetSpec() *TrialSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Trial) GetStatus() *TrialStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ReportObservationLogRequest struct {
	TrialName      string          `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
	ObservationLog *ObservationLog `protobuf:"bytes,2,opt,name=observation_log,json=observationLog" json:"observation_log,omitempty"`
}

func (m *ReportObservationLogRequest) Reset()                    { *m = ReportObservationLogRequest{} }
func (m *ReportObservationLogRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportObservationLogRequest) ProtoMessage()               {}
func (*ReportObservationLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ReportObservationLogRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

func (m *ReportObservationLogRequest) GetObservationLog() *ObservationLog {
	if m != nil {
		return m.ObservationLog
	}
	return nil
}

type ReportObservationLogReply struct {
}

func (m *ReportObservationLogReply) Reset()                    { *m = ReportObservationLogReply{} }
func (m *ReportObservationLogReply) String() string            { return proto.CompactTextString(m) }
func (*ReportObservationLogReply) ProtoMessage()               {}
func (*ReportObservationLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type DeleteObservationLogRequest struct {
	TrialName string `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
}

func (m *DeleteObservationLogRequest) Reset()                    { *m = DeleteObservationLogRequest{} }
func (m *DeleteObservationLogRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteObservationLogRequest) ProtoMessage()               {}
func (*DeleteObservationLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DeleteObservationLogRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

type DeleteObservationLogReply struct {
}

func (m *DeleteObservationLogReply) Reset()                    { *m = DeleteObservationLogReply{} }
func (m *DeleteObservationLogReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteObservationLogReply) ProtoMessage()               {}
func (*DeleteObservationLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type GetObservationLogRequest struct {
	TrialName  string `protobuf:"bytes,1,opt,name=trial_name,json=trialName" json:"trial_name,omitempty"`
	MetricName string `protobuf:"bytes,2,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	StartTime  string `protobuf:"bytes,3,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	EndTime    string `protobuf:"bytes,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
}

func (m *GetObservationLogRequest) Reset()                    { *m = GetObservationLogRequest{} }
func (m *GetObservationLogRequest) String() string            { return proto.CompactTextString(m) }
func (*GetObservationLogRequest) ProtoMessage()               {}
func (*GetObservationLogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetObservationLogRequest) GetTrialName() string {
	if m != nil {
		return m.TrialName
	}
	return ""
}

func (m *GetObservationLogRequest) GetMetricName() string {
	if m != nil {
		return m.MetricName
	}
	return ""
}

func (m *GetObservationLogRequest) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *GetObservationLogRequest) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

type GetObservationLogReply struct {
	ObservationLog *ObservationLog `protobuf:"bytes,1,opt,name=observation_log,json=observationLog" json:"observation_log,omitempty"`
}

func (m *GetObservationLogReply) Reset()                    { *m = GetObservationLogReply{} }
func (m *GetObservationLogReply) String() string            { return proto.CompactTextString(m) }
func (*GetObservationLogReply) ProtoMessage()               {}
func (*GetObservationLogReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetObservationLogReply) GetObservationLog() *ObservationLog {
	if m != nil {
		return m.ObservationLog
	}
	return nil
}

type GetSuggestionsRequest struct {
	Experiment    *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty"`
	Trials        []*Trial    `protobuf:"bytes,2,rep,name=trials" json:"trials,omitempty"`
	RequestNumber int32       `protobuf:"varint,3,opt,name=request_number,json=requestNumber" json:"request_number,omitempty"`
}

func (m *GetSuggestionsRequest) Reset()                    { *m = GetSuggestionsRequest{} }
func (m *GetSuggestionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSuggestionsRequest) ProtoMessage()               {}
func (*GetSuggestionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetSuggestionsRequest) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

func (m *GetSuggestionsRequest) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

func (m *GetSuggestionsRequest) GetRequestNumber() int32 {
	if m != nil {
		return m.RequestNumber
	}
	return 0
}

type GetSuggestionsReply struct {
	ParameterAssignments []*GetSuggestionsReply_ParameterAssignments `protobuf:"bytes,1,rep,name=parameter_assignments,json=parameterAssignments" json:"parameter_assignments,omitempty"`
	Algorithm            *AlgorithmSpec                              `protobuf:"bytes,2,opt,name=algorithm" json:"algorithm,omitempty"`
	EarlyStoppingRules   []*GetSuggestionsReply_EarlyStoppingRules   `protobuf:"bytes,3,rep,name=early_stopping_rules,json=earlyStoppingRules" json:"early_stopping_rules,omitempty"`
}

func (m *GetSuggestionsReply) Reset()                    { *m = GetSuggestionsReply{} }
func (m *GetSuggestionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetSuggestionsReply) ProtoMessage()               {}
func (*GetSuggestionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetSuggestionsReply) GetParameterAssignments() []*GetSuggestionsReply_ParameterAssignments {
	if m != nil {
		return m.ParameterAssignments
	}
	return nil
}

func (m *GetSuggestionsReply) GetAlgorithm() *AlgorithmSpec {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

func (m *GetSuggestionsReply) GetEarlyStoppingRules() []*GetSuggestionsReply_EarlyStoppingRules {
	if m != nil {
		return m.EarlyStoppingRules
	}
	return nil
}

type GetSuggestionsReply_ParameterAssignments struct {
	Assignments []*ParameterAssignment `protobuf:"bytes,1,rep,name=assignments" json:"assignments,omitempty"`
}

func (m *GetSuggestionsReply_ParameterAssignments) Reset() {
	*m = GetSuggestionsReply_ParameterAssignments{}
}
func (m *GetSuggestionsReply_ParameterAssignments) String() string { return proto.CompactTextString(m) }
func (*GetSuggestionsReply_ParameterAssignments) ProtoMessage()    {}
func (*GetSuggestionsReply_ParameterAssignments) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 0}
}

func (m *GetSuggestionsReply_ParameterAssignments) GetAssignments() []*ParameterAssignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type GetSuggestionsReply_EarlyStoppingRules struct {
	Rules []*EarlyStoppingRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *GetSuggestionsReply_EarlyStoppingRules) Reset() {
	*m = GetSuggestionsReply_EarlyStoppingRules{}
}
func (m *GetSuggestionsReply_EarlyStoppingRules) String() string { return proto.CompactTextString(m) }
func (*GetSuggestionsReply_EarlyStoppingRules) ProtoMessage()    {}
func (*GetSuggestionsReply_EarlyStoppingRules) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 1}
}

func (m *GetSuggestionsReply_EarlyStoppingRules) GetRules() []*EarlyStoppingRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type ValidateAlgorithmSettingsRequest struct {
	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty"`
}

func (m *ValidateAlgorithmSettingsRequest) Reset()         { *m = ValidateAlgorithmSettingsRequest{} }
func (m *ValidateAlgorithmSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateAlgorithmSettingsRequest) ProtoMessage()    {}
func (*ValidateAlgorithmSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27}
}

func (m *ValidateAlgorithmSettingsRequest) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

// *
// Return INVALID_ARGUMENT Error if Algorithm Settings are not Valid
type ValidateAlgorithmSettingsReply struct {
}

func (m *ValidateAlgorithmSettingsReply) Reset()                    { *m = ValidateAlgorithmSettingsReply{} }
func (m *ValidateAlgorithmSettingsReply) String() string            { return proto.CompactTextString(m) }
func (*ValidateAlgorithmSettingsReply) ProtoMessage()               {}
func (*ValidateAlgorithmSettingsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type GetEarlyStoppingRulesRequest struct {
	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty"`
	Trials     []*Trial    `protobuf:"bytes,2,rep,name=trials" json:"trials,omitempty"`
}

func (m *GetEarlyStoppingRulesRequest) Reset()                    { *m = GetEarlyStoppingRulesRequest{} }
func (m *GetEarlyStoppingRulesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEarlyStoppingRulesRequest) ProtoMessage()               {}
func (*GetEarlyStoppingRulesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetEarlyStoppingRulesRequest) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

func (m *GetEarlyStoppingRulesRequest) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

type GetEarlyStoppingRulesReply struct {
	EarlyStoppingRules []*GetEarlyStoppingRulesReply_EarlyStoppingRules `protobuf:"bytes,1,rep,name=early_stopping_rules,json=earlyStoppingRules" json:"early_stopping_rules,omitempty"`
}

func (m *GetEarlyStoppingRulesReply) Reset()                    { *m = GetEarlyStoppingRulesReply{} }
func (m *GetEarlyStoppingRulesReply) String() string            { return proto.CompactTextString(m) }
func (*GetEarlyStoppingRulesReply) ProtoMessage()               {}
func (*GetEarlyStoppingRulesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetEarlyStoppingRulesReply) GetEarlyStoppingRules() []*GetEarlyStoppingRulesReply_EarlyStoppingRules {
	if m != nil {
		return m.EarlyStoppingRules
	}
	return nil
}

type GetEarlyStoppingRulesReply_EarlyStoppingRules struct {
	Rules []*EarlyStoppingRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *GetEarlyStoppingRulesReply_EarlyStoppingRules) Reset() {
	*m = GetEarlyStoppingRulesReply_EarlyStoppingRules{}
}
func (m *GetEarlyStoppingRulesReply_EarlyStoppingRules) String() string {
	return proto.CompactTextString(m)
}
func (*GetEarlyStoppingRulesReply_EarlyStoppingRules) ProtoMessage() {}
func (*GetEarlyStoppingRulesReply_EarlyStoppingRules) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30, 0}
}

func (m *GetEarlyStoppingRulesReply_EarlyStoppingRules) GetRules() []*EarlyStoppingRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type EarlyStoppingRule struct {
	Name       string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value      string         `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Comparison ComparisonType `protobuf:"varint,3,opt,name=comparison,enum=api.v1.beta1.ComparisonType" json:"comparison,omitempty"`
}

func (m *EarlyStoppingRule) Reset()                    { *m = EarlyStoppingRule{} }
func (m *EarlyStoppingRule) String() string            { return proto.CompactTextString(m) }
func (*EarlyStoppingRule) ProtoMessage()               {}
func (*EarlyStoppingRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *EarlyStoppingRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EarlyStoppingRule) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *EarlyStoppingRule) GetComparison() ComparisonType {
	if m != nil {
		return m.Comparison
	}
	return ComparisonType_EQUAL
}

// TODO (andreyvelich): Add request + reply
type SetTrialStatusRequest struct {
}

func (m *SetTrialStatusRequest) Reset()                    { *m = SetTrialStatusRequest{} }
func (m *SetTrialStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTrialStatusRequest) ProtoMessage()               {}
func (*SetTrialStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

type SetTrialStatusReply struct {
}

func (m *SetTrialStatusReply) Reset()                    { *m = SetTrialStatusReply{} }
func (m *SetTrialStatusReply) String() string            { return proto.CompactTextString(m) }
func (*SetTrialStatusReply) ProtoMessage()               {}
func (*SetTrialStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func init() {
	proto.RegisterType((*FeasibleSpace)(nil), "api.v1.beta1.FeasibleSpace")
	proto.RegisterType((*ParameterSpec)(nil), "api.v1.beta1.ParameterSpec")
	proto.RegisterType((*ObjectiveSpec)(nil), "api.v1.beta1.ObjectiveSpec")
	proto.RegisterType((*AlgorithmSetting)(nil), "api.v1.beta1.AlgorithmSetting")
	proto.RegisterType((*EarlyStoppingSpec)(nil), "api.v1.beta1.EarlyStoppingSpec")
	proto.RegisterType((*AlgorithmSpec)(nil), "api.v1.beta1.AlgorithmSpec")
	proto.RegisterType((*NasConfig)(nil), "api.v1.beta1.NasConfig")
	proto.RegisterType((*NasConfig_Operations)(nil), "api.v1.beta1.NasConfig.Operations")
	proto.RegisterType((*GraphConfig)(nil), "api.v1.beta1.GraphConfig")
	proto.RegisterType((*Operation)(nil), "api.v1.beta1.Operation")
	proto.RegisterType((*Operation_ParameterSpecs)(nil), "api.v1.beta1.Operation.ParameterSpecs")
	proto.RegisterType((*ExperimentSpec)(nil), "api.v1.beta1.ExperimentSpec")
	proto.RegisterType((*ExperimentSpec_ParameterSpecs)(nil), "api.v1.beta1.ExperimentSpec.ParameterSpecs")
	proto.RegisterType((*Experiment)(nil), "api.v1.beta1.Experiment")
	proto.RegisterType((*ParameterAssignment)(nil), "api.v1.beta1.ParameterAssignment")
	proto.RegisterType((*Metric)(nil), "api.v1.beta1.Metric")
	proto.RegisterType((*MetricLog)(nil), "api.v1.beta1.MetricLog")
	proto.RegisterType((*Observation)(nil), "api.v1.beta1.Observation")
	proto.RegisterType((*ObservationLog)(nil), "api.v1.beta1.ObservationLog")
	proto.RegisterType((*TrialSpec)(nil), "api.v1.beta1.TrialSpec")
	proto.RegisterType((*TrialSpec_ParameterAssignments)(nil), "api.v1.beta1.TrialSpec.ParameterAssignments")
	proto.RegisterType((*TrialStatus)(nil), "api.v1.beta1.TrialStatus")
	proto.RegisterType((*Trial)(nil), "api.v1.beta1.Trial")
	proto.RegisterType((*ReportObservationLogRequest)(nil), "api.v1.beta1.ReportObservationLogRequest")
	proto.RegisterType((*ReportObservationLogReply)(nil), "api.v1.beta1.ReportObservationLogReply")
	proto.RegisterType((*DeleteObservationLogRequest)(nil), "api.v1.beta1.DeleteObservationLogRequest")
	proto.RegisterType((*DeleteObservationLogReply)(nil), "api.v1.beta1.DeleteObservationLogReply")
	proto.RegisterType((*GetObservationLogRequest)(nil), "api.v1.beta1.GetObservationLogRequest")
	proto.RegisterType((*GetObservationLogReply)(nil), "api.v1.beta1.GetObservationLogReply")
	proto.RegisterType((*GetSuggestionsRequest)(nil), "api.v1.beta1.GetSuggestionsRequest")
	proto.RegisterType((*GetSuggestionsReply)(nil), "api.v1.beta1.GetSuggestionsReply")
	proto.RegisterType((*GetSuggestionsReply_ParameterAssignments)(nil), "api.v1.beta1.GetSuggestionsReply.ParameterAssignments")
	proto.RegisterType((*GetSuggestionsReply_EarlyStoppingRules)(nil), "api.v1.beta1.GetSuggestionsReply.EarlyStoppingRules")
	proto.RegisterType((*ValidateAlgorithmSettingsRequest)(nil), "api.v1.beta1.ValidateAlgorithmSettingsRequest")
	proto.RegisterType((*ValidateAlgorithmSettingsReply)(nil), "api.v1.beta1.ValidateAlgorithmSettingsReply")
	proto.RegisterType((*GetEarlyStoppingRulesRequest)(nil), "api.v1.beta1.GetEarlyStoppingRulesRequest")
	proto.RegisterType((*GetEarlyStoppingRulesReply)(nil), "api.v1.beta1.GetEarlyStoppingRulesReply")
	proto.RegisterType((*GetEarlyStoppingRulesReply_EarlyStoppingRules)(nil), "api.v1.beta1.GetEarlyStoppingRulesReply.EarlyStoppingRules")
	proto.RegisterType((*EarlyStoppingRule)(nil), "api.v1.beta1.EarlyStoppingRule")
	proto.RegisterType((*SetTrialStatusRequest)(nil), "api.v1.beta1.SetTrialStatusRequest")
	proto.RegisterType((*SetTrialStatusReply)(nil), "api.v1.beta1.SetTrialStatusReply")
	proto.RegisterEnum("api.v1.beta1.ParameterType", ParameterType_name, ParameterType_value)
	proto.RegisterEnum("api.v1.beta1.ObjectiveType", ObjectiveType_name, ObjectiveType_value)
	proto.RegisterEnum("api.v1.beta1.ComparisonType", ComparisonType_name, ComparisonType_value)
	proto.RegisterEnum("api.v1.beta1.TrialStatus_TrialConditionType", TrialStatus_TrialConditionType_name, TrialStatus_TrialConditionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DBManager service

type DBManagerClient interface {
	// *
	// Report a log of Observations for a Trial.
	// The log consists of timestamp and value of metric.
	// Katib store every log of metrics.
	// You can see accuracy curve or other metric logs on UI.
	ReportObservationLog(ctx context.Context, in *ReportObservationLogRequest, opts ...grpc.CallOption) (*ReportObservationLogReply, error)
	// *
	// Get all log of Observations for a Trial.
	GetObservationLog(ctx context.Context, in *GetObservationLogRequest, opts ...grpc.CallOption) (*GetObservationLogReply, error)
	// *
	// Delete all log of Observations for a Trial.
	DeleteObservationLog(ctx context.Context, in *DeleteObservationLogRequest, opts ...grpc.CallOption) (*DeleteObservationLogReply, error)
}

type dBManagerClient struct {
	cc *grpc.ClientConn
}

func NewDBManagerClient(cc *grpc.ClientConn) DBManagerClient {
	return &dBManagerClient{cc}
}

func (c *dBManagerClient) ReportObservationLog(ctx context.Context, in *ReportObservationLogRequest, opts ...grpc.CallOption) (*ReportObservationLogReply, error) {
	out := new(ReportObservationLogReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.DBManager/ReportObservationLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBManagerClient) GetObservationLog(ctx context.Context, in *GetObservationLogRequest, opts ...grpc.CallOption) (*GetObservationLogReply, error) {
	out := new(GetObservationLogReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.DBManager/GetObservationLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBManagerClient) DeleteObservationLog(ctx context.Context, in *DeleteObservationLogRequest, opts ...grpc.CallOption) (*DeleteObservationLogReply, error) {
	out := new(DeleteObservationLogReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.DBManager/DeleteObservationLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DBManager service

type DBManagerServer interface {
	// *
	// Report a log of Observations for a Trial.
	// The log consists of timestamp and value of metric.
	// Katib store every log of metrics.
	// You can see accuracy curve or other metric logs on UI.
	ReportObservationLog(context.Context, *ReportObservationLogRequest) (*ReportObservationLogReply, error)
	// *
	// Get all log of Observations for a Trial.
	GetObservationLog(context.Context, *GetObservationLogRequest) (*GetObservationLogReply, error)
	// *
	// Delete all log of Observations for a Trial.
	DeleteObservationLog(context.Context, *DeleteObservationLogRequest) (*DeleteObservationLogReply, error)
}

func RegisterDBManagerServer(s *grpc.Server, srv DBManagerServer) {
	s.RegisterService(&_DBManager_serviceDesc, srv)
}

func _DBManager_ReportObservationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportObservationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBManagerServer).ReportObservationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.DBManager/ReportObservationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBManagerServer).ReportObservationLog(ctx, req.(*ReportObservationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBManager_GetObservationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObservationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBManagerServer).GetObservationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.DBManager/GetObservationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBManagerServer).GetObservationLog(ctx, req.(*GetObservationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBManager_DeleteObservationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObservationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBManagerServer).DeleteObservationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.DBManager/DeleteObservationLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBManagerServer).DeleteObservationLog(ctx, req.(*DeleteObservationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DBManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.beta1.DBManager",
	HandlerType: (*DBManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportObservationLog",
			Handler:    _DBManager_ReportObservationLog_Handler,
		},
		{
			MethodName: "GetObservationLog",
			Handler:    _DBManager_GetObservationLog_Handler,
		},
		{
			MethodName: "DeleteObservationLog",
			Handler:    _DBManager_DeleteObservationLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for Suggestion service

type SuggestionClient interface {
	GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsReply, error)
	ValidateAlgorithmSettings(ctx context.Context, in *ValidateAlgorithmSettingsRequest, opts ...grpc.CallOption) (*ValidateAlgorithmSettingsReply, error)
}

type suggestionClient struct {
	cc *grpc.ClientConn
}

func NewSuggestionClient(cc *grpc.ClientConn) SuggestionClient {
	return &suggestionClient{cc}
}

func (c *suggestionClient) GetSuggestions(ctx context.Context, in *GetSuggestionsRequest, opts ...grpc.CallOption) (*GetSuggestionsReply, error) {
	out := new(GetSuggestionsReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.Suggestion/GetSuggestions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestionClient) ValidateAlgorithmSettings(ctx context.Context, in *ValidateAlgorithmSettingsRequest, opts ...grpc.CallOption) (*ValidateAlgorithmSettingsReply, error) {
	out := new(ValidateAlgorithmSettingsReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.Suggestion/ValidateAlgorithmSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Suggestion service

type SuggestionServer interface {
	GetSuggestions(context.Context, *GetSuggestionsRequest) (*GetSuggestionsReply, error)
	ValidateAlgorithmSettings(context.Context, *ValidateAlgorithmSettingsRequest) (*ValidateAlgorithmSettingsReply, error)
}

func RegisterSuggestionServer(s *grpc.Server, srv SuggestionServer) {
	s.RegisterService(&_Suggestion_serviceDesc, srv)
}

func _Suggestion_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.Suggestion/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).GetSuggestions(ctx, req.(*GetSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suggestion_ValidateAlgorithmSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAlgorithmSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).ValidateAlgorithmSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.Suggestion/ValidateAlgorithmSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).ValidateAlgorithmSettings(ctx, req.(*ValidateAlgorithmSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Suggestion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.beta1.Suggestion",
	HandlerType: (*SuggestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSuggestions",
			Handler:    _Suggestion_GetSuggestions_Handler,
		},
		{
			MethodName: "ValidateAlgorithmSettings",
			Handler:    _Suggestion_ValidateAlgorithmSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for EarlyStopping service

type EarlyStoppingClient interface {
	GetEarlyStoppingRules(ctx context.Context, in *GetEarlyStoppingRulesRequest, opts ...grpc.CallOption) (*GetEarlyStoppingRulesReply, error)
	SetTrialStatus(ctx context.Context, in *SetTrialStatusRequest, opts ...grpc.CallOption) (*SetTrialStatusReply, error)
}

type earlyStoppingClient struct {
	cc *grpc.ClientConn
}

func NewEarlyStoppingClient(cc *grpc.ClientConn) EarlyStoppingClient {
	return &earlyStoppingClient{cc}
}

func (c *earlyStoppingClient) GetEarlyStoppingRules(ctx context.Context, in *GetEarlyStoppingRulesRequest, opts ...grpc.CallOption) (*GetEarlyStoppingRulesReply, error) {
	out := new(GetEarlyStoppingRulesReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.EarlyStopping/GetEarlyStoppingRules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *earlyStoppingClient) SetTrialStatus(ctx context.Context, in *SetTrialStatusRequest, opts ...grpc.CallOption) (*SetTrialStatusReply, error) {
	out := new(SetTrialStatusReply)
	err := grpc.Invoke(ctx, "/api.v1.beta1.EarlyStopping/SetTrialStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EarlyStopping service

type EarlyStoppingServer interface {
	GetEarlyStoppingRules(context.Context, *GetEarlyStoppingRulesRequest) (*GetEarlyStoppingRulesReply, error)
	SetTrialStatus(context.Context, *SetTrialStatusRequest) (*SetTrialStatusReply, error)
}

func RegisterEarlyStoppingServer(s *grpc.Server, srv EarlyStoppingServer) {
	s.RegisterService(&_EarlyStopping_serviceDesc, srv)
}

func _EarlyStopping_GetEarlyStoppingRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEarlyStoppingRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EarlyStoppingServer).GetEarlyStoppingRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.EarlyStopping/GetEarlyStoppingRules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EarlyStoppingServer).GetEarlyStoppingRules(ctx, req.(*GetEarlyStoppingRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EarlyStopping_SetTrialStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTrialStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EarlyStoppingServer).SetTrialStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.beta1.EarlyStopping/SetTrialStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EarlyStoppingServer).SetTrialStatus(ctx, req.(*SetTrialStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EarlyStopping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.beta1.EarlyStopping",
	HandlerType: (*EarlyStoppingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEarlyStoppingRules",
			Handler:    _EarlyStopping_GetEarlyStoppingRules_Handler,
		},
		{
			MethodName: "SetTrialStatus",
			Handler:    _EarlyStopping_SetTrialStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x6e, 0x1b, 0xc9,
	0x11, 0xf6, 0xf0, 0x47, 0x12, 0x8b, 0x22, 0x45, 0xb7, 0xa8, 0x15, 0x25, 0x3b, 0x6b, 0x79, 0x92,
	0x78, 0x15, 0xdb, 0xa0, 0xd7, 0xcc, 0xae, 0xe1, 0xc0, 0x0e, 0x02, 0x99, 0xe2, 0x0a, 0x5c, 0x4b,
	0xd4, 0xa6, 0x49, 0x25, 0x4e, 0x36, 0xc0, 0xa0, 0x45, 0xb5, 0xb9, 0xe3, 0xcc, 0x5f, 0x66, 0x9a,
	0x86, 0x95, 0xbd, 0x04, 0x08, 0xf2, 0x06, 0x39, 0xe5, 0x9e, 0x53, 0x5e, 0x22, 0xc8, 0x21, 0xd7,
	0x00, 0x39, 0x04, 0x7b, 0xcd, 0x9b, 0x04, 0x5d, 0x3d, 0x9c, 0x3f, 0x0e, 0x25, 0xd9, 0xeb, 0xec,
	0xad, 0xbb, 0xfa, 0xab, 0xea, 0xaa, 0xea, 0xaa, 0xaf, 0x7b, 0x06, 0x2a, 0xcc, 0x33, 0xdb, 0x9e,
	0xef, 0x0a, 0x97, 0xac, 0xca, 0xe1, 0xeb, 0x87, 0xed, 0x53, 0x2e, 0xd8, 0xc3, 0xed, 0x9b, 0x13,
	0xd7, 0x9d, 0x58, 0xfc, 0x01, 0xf3, 0xcc, 0x07, 0xcc, 0x71, 0x5c, 0xc1, 0x84, 0xe9, 0x3a, 0x81,
	0xc2, 0xea, 0x5f, 0x42, 0xed, 0x33, 0xce, 0x02, 0xf3, 0xd4, 0xe2, 0x43, 0x8f, 0x8d, 0x39, 0x69,
	0x40, 0xd1, 0x66, 0x6f, 0x5a, 0xda, 0x8e, 0xb6, 0x5b, 0xa1, 0x72, 0x88, 0x12, 0xd3, 0x69, 0x15,
	0x42, 0x89, 0xe9, 0x10, 0x02, 0x25, 0xcb, 0x0c, 0x44, 0xab, 0xb8, 0x53, 0xdc, 0xad, 0x50, 0x1c,
	0x4b, 0x59, 0x20, 0xb8, 0xd7, 0x2a, 0x21, 0x0c, 0xc7, 0xfa, 0xdf, 0x34, 0xa8, 0x7d, 0xc1, 0x7c,
	0x66, 0x73, 0xc1, 0xfd, 0xa1, 0xc7, 0xc7, 0x12, 0xe5, 0x30, 0x9b, 0x87, 0xe6, 0x71, 0x4c, 0x9e,
	0x41, 0xdd, 0x9b, 0x81, 0x0c, 0x71, 0xee, 0x71, 0xdc, 0xaa, 0xde, 0xb9, 0xd1, 0x4e, 0xc6, 0xd1,
	0x8e, 0x0c, 0x8d, 0xce, 0x3d, 0x4e, 0x6b, 0x5e, 0x72, 0x2a, 0x6d, 0xbc, 0x0c, 0xc3, 0x30, 0x02,
	0x19, 0x47, 0xab, 0xb8, 0xa3, 0xed, 0x56, 0xb3, 0x36, 0x52, 0xa1, 0xd2, 0xda, 0xcb, 0xe4, 0x54,
	0xff, 0xbb, 0x06, 0xb5, 0xe3, 0xd3, 0x57, 0x7c, 0x2c, 0xcc, 0xd7, 0x1c, 0xbd, 0x7d, 0x00, 0x25,
	0xf4, 0x47, 0xcb, 0xf3, 0x27, 0x82, 0xa2, 0x3f, 0x08, 0x94, 0xe1, 0x4d, 0x5c, 0x66, 0x61, 0x00,
	0x1a, 0xc5, 0x31, 0xe9, 0xc0, 0x86, 0x3b, 0x83, 0x1a, 0x36, 0x17, 0xbe, 0x39, 0x36, 0x30, 0x07,
	0x45, 0xcc, 0xc1, 0x7a, 0xb4, 0x78, 0x84, 0x6b, 0x03, 0x99, 0x92, 0x47, 0xb0, 0xc9, 0xce, 0xce,
	0x4c, 0x79, 0x50, 0xcc, 0x4a, 0x2a, 0x05, 0xad, 0x12, 0xe6, 0x7c, 0x23, 0x5e, 0x8e, 0xd5, 0x02,
	0xfd, 0x29, 0x34, 0xf6, 0xac, 0x89, 0xeb, 0x9b, 0xe2, 0x2b, 0x7b, 0xc8, 0x85, 0x30, 0x9d, 0x49,
	0x6e, 0xca, 0x9b, 0x50, 0x7e, 0xcd, 0xac, 0x29, 0x0f, 0x0f, 0x55, 0x4d, 0xf4, 0x75, 0xb8, 0xde,
	0x63, 0xbe, 0x75, 0x3e, 0x14, 0xae, 0xe7, 0x99, 0xce, 0x44, 0xe6, 0x40, 0xff, 0x8f, 0x06, 0xb5,
	0xd8, 0xa6, 0xcc, 0xca, 0x0f, 0xa1, 0xce, 0x66, 0x02, 0x23, 0x61, 0xba, 0x16, 0x49, 0x31, 0x86,
	0x23, 0x20, 0x31, 0x2c, 0x50, 0xce, 0x04, 0xad, 0xc2, 0x4e, 0x71, 0xb7, 0xda, 0xf9, 0x30, 0x9d,
	0xca, 0xac, 0xcf, 0xf4, 0x3a, 0xcb, 0x48, 0x02, 0x72, 0x0c, 0xeb, 0x5c, 0x3a, 0x67, 0x04, 0xa1,
	0x77, 0x46, 0xe0, 0xf1, 0x71, 0x78, 0xcc, 0xb7, 0xd2, 0xf6, 0xe6, 0xa2, 0xa0, 0xd7, 0xf9, 0x5c,
	0x60, 0xff, 0xd6, 0xa0, 0x32, 0x60, 0x41, 0xd7, 0x75, 0x5e, 0x9a, 0x13, 0xf2, 0x14, 0x56, 0x27,
	0x3e, 0xf3, 0xbe, 0x32, 0xc6, 0x38, 0xc7, 0x90, 0xaa, 0x9d, 0xad, 0xb4, 0xdd, 0x03, 0x89, 0x50,
	0x0a, 0xb4, 0x3a, 0x89, 0x27, 0xe4, 0x19, 0x80, 0xeb, 0x71, 0x5f, 0x75, 0x16, 0x26, 0xb5, 0xda,
	0xd1, 0xd3, 0xba, 0xd1, 0x56, 0xed, 0xe3, 0x08, 0x49, 0x13, 0x5a, 0xdb, 0x5d, 0x80, 0x78, 0x85,
	0x7c, 0x0a, 0x95, 0x68, 0xad, 0xa5, 0x61, 0xd2, 0x36, 0x33, 0xf5, 0x37, 0x5b, 0xa6, 0x31, 0x52,
	0xf7, 0xa0, 0x9a, 0x70, 0x92, 0x7c, 0x0f, 0xc0, 0x99, 0xda, 0x86, 0xc5, 0xce, 0xb9, 0x1f, 0x60,
	0x4c, 0x65, 0x5a, 0x71, 0xa6, 0xf6, 0x21, 0x0a, 0xc8, 0x2d, 0xa8, 0x9a, 0x8e, 0x37, 0x15, 0x46,
	0x60, 0xfe, 0x9e, 0xab, 0xb3, 0x29, 0x53, 0x40, 0xd1, 0x50, 0x4a, 0xc8, 0x6d, 0x58, 0x75, 0xa7,
	0x22, 0x46, 0x14, 0x11, 0x51, 0x55, 0x32, 0x84, 0x60, 0x1a, 0x23, 0x57, 0x64, 0x6d, 0x44, 0xce,
	0x18, 0x51, 0xef, 0x54, 0x68, 0x2d, 0x92, 0x62, 0xbb, 0x1e, 0xc3, 0x5a, 0xdc, 0xf2, 0xf2, 0x1c,
	0x67, 0x49, 0xbb, 0xb3, 0x20, 0xc6, 0x76, 0x8a, 0x46, 0x02, 0x1a, 0x33, 0x06, 0xce, 0xb7, 0x8f,
	0xa0, 0x9e, 0x46, 0x90, 0x27, 0x00, 0x11, 0x26, 0x08, 0x33, 0xb8, 0x88, 0x51, 0xb0, 0x44, 0x12,
	0x70, 0xfd, 0x2f, 0x25, 0xa8, 0xf7, 0xde, 0x78, 0xdc, 0x37, 0x6d, 0xee, 0x08, 0xac, 0xfa, 0xd1,
	0xbc, 0xcb, 0xaa, 0x46, 0xee, 0x65, 0x6a, 0x2f, 0xa5, 0x76, 0x89, 0xdf, 0xe4, 0x27, 0x50, 0x89,
	0xfa, 0x3f, 0x4c, 0xc1, 0x22, 0x9a, 0x41, 0x27, 0x63, 0xb4, 0x54, 0x8d, 0xba, 0x24, 0x9f, 0xed,
	0x52, 0x6d, 0x4b, 0x63, 0xb4, 0x3c, 0x25, 0xe1, 0x9b, 0xcc, 0x32, 0x04, 0xb7, 0x3d, 0x8b, 0x09,
	0x1e, 0xb2, 0x76, 0x0d, 0xa5, 0xa3, 0x50, 0x48, 0x3e, 0x81, 0x0f, 0x14, 0xf5, 0x04, 0xc6, 0xd8,
	0xb5, 0x2c, 0x3e, 0x16, 0xae, 0x0a, 0xbd, 0x55, 0x46, 0x78, 0x33, 0x5c, 0xed, 0xce, 0x16, 0x31,
	0x51, 0x1f, 0x43, 0x53, 0x06, 0x69, 0x59, 0xdc, 0x32, 0xd4, 0x2e, 0x63, 0x77, 0xea, 0x88, 0xd6,
	0x12, 0x56, 0x1f, 0x99, 0xad, 0x8d, 0xe4, 0x52, 0x57, 0xae, 0x90, 0x3b, 0xb0, 0x66, 0xb3, 0x37,
	0x29, 0xf0, 0x32, 0x82, 0x6b, 0x36, 0x7b, 0x93, 0xc0, 0x3d, 0x02, 0x70, 0x58, 0x30, 0xeb, 0xd0,
	0x15, 0x0c, 0x79, 0x73, 0x41, 0x97, 0xd1, 0x8a, 0x33, 0x1b, 0xbe, 0xef, 0xe2, 0xa0, 0x00, 0xf1,
	0x21, 0xe7, 0xd2, 0xeb, 0xc7, 0x50, 0xc2, 0x34, 0xa9, 0x03, 0xbd, 0x79, 0x51, 0x81, 0x50, 0x44,
	0xea, 0x3f, 0x83, 0xf5, 0x68, 0xc3, 0xbd, 0x20, 0x30, 0x27, 0xce, 0x42, 0xe3, 0xf9, 0xdc, 0xdd,
	0x81, 0x25, 0x75, 0x11, 0xbc, 0x85, 0xce, 0x0b, 0xa8, 0x28, 0x9d, 0x43, 0x17, 0xa9, 0x42, 0x98,
	0x36, 0x37, 0x02, 0xc1, 0x6c, 0x2f, 0x54, 0xae, 0x48, 0xc9, 0x50, 0x0a, 0xc8, 0x7d, 0x58, 0x52,
	0xa7, 0x1d, 0x06, 0xd5, 0x4c, 0x07, 0xa5, 0xec, 0xd0, 0x10, 0xa3, 0xff, 0x14, 0xaa, 0xc7, 0xa7,
	0x01, 0xf7, 0x5f, 0x2b, 0x56, 0x68, 0xc3, 0x72, 0x58, 0x2a, 0x61, 0xae, 0xf3, 0xb5, 0x67, 0x20,
	0xfd, 0x73, 0xa8, 0x27, 0xd4, 0xa5, 0x77, 0x8f, 0xa1, 0x1a, 0xde, 0x82, 0x96, 0x3b, 0x09, 0xf2,
	0x09, 0x31, 0x8a, 0x85, 0x82, 0x3d, 0x1b, 0x06, 0xfa, 0x1f, 0x8a, 0x50, 0xc1, 0x1a, 0xc2, 0xe2,
	0xfc, 0x08, 0xd6, 0x78, 0x94, 0xff, 0xe4, 0xe5, 0x55, 0x8f, 0xc5, 0x78, 0x7b, 0x7d, 0x8b, 0xc6,
	0x64, 0xb0, 0x11, 0x33, 0x05, 0x8b, 0x0e, 0x33, 0x08, 0x9b, 0xf4, 0x7e, 0xda, 0x4c, 0xe4, 0x5b,
	0x3b, 0xa7, 0x00, 0x02, 0xda, 0xf4, 0x72, 0xa4, 0x64, 0x0b, 0x56, 0xfc, 0xa9, 0xa3, 0x7a, 0x51,
	0xb5, 0xee, 0xb2, 0x3f, 0x75, 0x30, 0xc2, 0x77, 0x6a, 0xda, 0xed, 0x2f, 0xa1, 0x99, 0xb7, 0x3d,
	0xe9, 0x42, 0x35, 0x19, 0x81, 0xca, 0xfb, 0xed, 0x05, 0x9d, 0x12, 0x2b, 0xd2, 0xa4, 0x96, 0xfe,
	0x8f, 0x02, 0x54, 0x55, 0x98, 0x82, 0x89, 0x69, 0x20, 0x4b, 0x2d, 0x10, 0xcc, 0x17, 0x86, 0x2c,
	0xaf, 0x59, 0xa9, 0xa1, 0x64, 0x64, 0xda, 0x5c, 0x9e, 0xd1, 0xd8, 0xb5, 0x3d, 0x8b, 0xab, 0x4b,
	0x44, 0x62, 0x54, 0xd9, 0xd6, 0x63, 0x31, 0x02, 0x3f, 0x87, 0xca, 0xd8, 0x75, 0xd4, 0x3b, 0x08,
	0x93, 0x5b, 0xcf, 0x4f, 0x2e, 0xee, 0xda, 0x0e, 0x89, 0x24, 0xc4, 0xe3, 0xa3, 0x2d, 0x56, 0x27,
	0x4f, 0xa0, 0xea, 0xc6, 0x25, 0x87, 0x49, 0x9d, 0xbb, 0xfe, 0x13, 0x35, 0x49, 0x93, 0x68, 0xfd,
	0x14, 0xc8, 0xbc, 0x75, 0x52, 0x85, 0xe5, 0x2e, 0xed, 0xed, 0x8d, 0x7a, 0xfb, 0x8d, 0x6b, 0x72,
	0x42, 0x4f, 0x06, 0x83, 0xfe, 0xe0, 0xa0, 0xa1, 0x91, 0x1a, 0x54, 0x86, 0x27, 0xdd, 0x6e, 0xaf,
	0xb7, 0xdf, 0xdb, 0x6f, 0x14, 0x08, 0xc0, 0xd2, 0xf3, 0xfe, 0xe1, 0x61, 0x6f, 0xbf, 0x51, 0x94,
	0xe3, 0xcf, 0xf6, 0xfa, 0x72, 0x5c, 0x92, 0x3a, 0x27, 0x83, 0xe7, 0x83, 0xe3, 0x5f, 0x0e, 0x1a,
	0x65, 0xfd, 0x6b, 0x28, 0xe3, 0x1e, 0xb9, 0xfd, 0x7d, 0x2f, 0x45, 0x38, 0x9b, 0x0b, 0x2a, 0x4c,
	0x71, 0x0d, 0x79, 0x08, 0x4b, 0x01, 0xa6, 0x24, 0x2c, 0xc8, 0xad, 0x85, 0x39, 0xa3, 0x21, 0x50,
	0xff, 0xa3, 0x06, 0x37, 0x28, 0xf7, 0x5c, 0x5f, 0xa4, 0xfb, 0x92, 0xf2, 0xdf, 0x4d, 0x79, 0x20,
	0x90, 0x3c, 0x90, 0xbd, 0x13, 0x9e, 0x55, 0x50, 0x82, 0xcd, 0xd4, 0x83, 0xb5, 0x44, 0xba, 0x64,
	0x0b, 0xe7, 0x53, 0x63, 0xc6, 0x78, 0xdd, 0x4d, 0xcd, 0xf5, 0x1b, 0xb0, 0x95, 0xef, 0x84, 0x67,
	0x9d, 0xeb, 0x4f, 0xe1, 0xc6, 0x3e, 0xb7, 0xb8, 0xe0, 0xef, 0xe2, 0xa1, 0x34, 0x9d, 0xaf, 0x2d,
	0x4d, 0xff, 0x59, 0x83, 0xd6, 0x01, 0x7f, 0xb7, 0xd0, 0x6f, 0x45, 0xc4, 0x85, 0xeb, 0xaa, 0x90,
	0x43, 0x7e, 0x42, 0x40, 0xba, 0x19, 0x8a, 0xd9, 0x66, 0xd8, 0x82, 0x15, 0xee, 0x9c, 0xa9, 0xc5,
	0xb0, 0xd3, 0xb9, 0x73, 0x26, 0x97, 0x74, 0x03, 0x3e, 0xc8, 0xf1, 0xca, 0xb3, 0xce, 0xf3, 0xf2,
	0xad, 0xbd, 0x43, 0xbe, 0xff, 0xaa, 0xc1, 0xc6, 0x01, 0x17, 0xc3, 0xe9, 0x64, 0xc2, 0x03, 0xf5,
	0x60, 0x0d, 0x83, 0x7e, 0x0c, 0x10, 0xf3, 0x65, 0x68, 0xbb, 0xb5, 0xe8, 0x9a, 0xa3, 0x09, 0x2c,
	0xb9, 0x07, 0x4b, 0x98, 0x9c, 0xd9, 0x97, 0xc0, 0x7a, 0x4e, 0xf1, 0xd1, 0x10, 0x22, 0xdf, 0x29,
	0xbe, 0xda, 0xd1, 0x70, 0xa6, 0xf6, 0x29, 0xf7, 0x31, 0x3f, 0x65, 0x5a, 0x0b, 0xa5, 0x03, 0x14,
	0xea, 0xff, 0x2a, 0xc2, 0x7a, 0xd6, 0x4f, 0x99, 0x86, 0xdf, 0x2e, 0x22, 0x62, 0x45, 0x63, 0x8f,
	0x32, 0x8f, 0xfb, 0x79, 0x0b, 0x6f, 0x43, 0xc9, 0xa9, 0xe7, 0x58, 0xe1, 0xad, 0x9e, 0x63, 0x2f,
	0xa1, 0x99, 0xf9, 0xb4, 0xf1, 0xa7, 0x56, 0xf8, 0xda, 0xae, 0x76, 0x3e, 0xb9, 0xdc, 0xcd, 0xd4,
	0xf7, 0x0e, 0x95, 0xba, 0x94, 0xf0, 0x39, 0xd9, 0xff, 0x95, 0xe4, 0xb7, 0x9f, 0x03, 0x99, 0x77,
	0x83, 0x7c, 0x0a, 0x65, 0x15, 0x8b, 0x32, 0x7a, 0xd1, 0x77, 0x9a, 0x54, 0xa0, 0x0a, 0xad, 0xff,
	0x06, 0x76, 0x7e, 0xc1, 0x2c, 0xf3, 0x8c, 0x09, 0x9e, 0xfd, 0x36, 0xfc, 0xf6, 0x35, 0xa8, 0xef,
	0xc0, 0x87, 0x17, 0x58, 0x97, 0x1d, 0xff, 0x27, 0x0d, 0x6e, 0x1e, 0x70, 0x91, 0x93, 0xd7, 0xef,
	0xb4, 0x01, 0xf4, 0x6f, 0x34, 0xd8, 0x5e, 0xe0, 0x87, 0x2c, 0x70, 0x7b, 0x41, 0xe1, 0xa8, 0x64,
	0x3f, 0x99, 0x2b, 0x9c, 0x05, 0x76, 0xae, 0x5a, 0x3f, 0xef, 0xf5, 0x88, 0xbf, 0xce, 0xfc, 0x6c,
	0x90, 0x6b, 0x57, 0x7f, 0xbb, 0x92, 0xa7, 0x00, 0xf2, 0x35, 0xc0, 0x7c, 0x33, 0x88, 0x2e, 0xff,
	0x0c, 0xbb, 0x75, 0xa3, 0x75, 0xbc, 0xec, 0x13, 0x78, 0x7d, 0x13, 0x36, 0x86, 0x5c, 0x24, 0x6f,
	0x3a, 0x75, 0xae, 0xfa, 0x06, 0xac, 0x67, 0x17, 0x3c, 0xeb, 0xfc, 0xee, 0x49, 0xe2, 0x3f, 0x16,
	0xde, 0xed, 0x0d, 0x58, 0x0d, 0xaf, 0x66, 0x63, 0xf4, 0xab, 0x2f, 0x7a, 0x8d, 0x6b, 0xf2, 0xe2,
	0xde, 0x3f, 0x3e, 0x79, 0x76, 0xd8, 0x6b, 0x68, 0x64, 0x19, 0x8a, 0xfd, 0xc1, 0xa8, 0x51, 0x20,
	0xab, 0xb0, 0xb2, 0xdf, 0x1f, 0x76, 0x69, 0x6f, 0xd4, 0x6b, 0x14, 0xc9, 0x1a, 0x54, 0xbb, 0x7b,
	0xa3, 0xde, 0xc1, 0x31, 0xed, 0x77, 0xf7, 0x0e, 0x1b, 0xa5, 0xbb, 0x8f, 0x13, 0x3f, 0x9c, 0x66,
	0x4f, 0x86, 0xd9, 0x8d, 0x7f, 0x4d, 0x2a, 0x1f, 0xf5, 0x07, 0xfd, 0xa3, 0xfe, 0xaf, 0xa5, 0x4d,
	0x39, 0xdb, 0x7b, 0xa1, 0x66, 0x85, 0xbb, 0x1d, 0xa8, 0xa7, 0xc3, 0x23, 0x15, 0x28, 0xf7, 0x7e,
	0x7e, 0xb2, 0x77, 0xd8, 0xb8, 0x46, 0x56, 0xa0, 0x74, 0xd8, 0x1b, 0x0e, 0x1b, 0x9a, 0xb4, 0x77,
	0x80, 0x4f, 0x10, 0xda, 0x28, 0x74, 0xfe, 0x59, 0x80, 0xca, 0xfe, 0xb3, 0x23, 0xe6, 0xb0, 0x09,
	0xf7, 0xc9, 0x2b, 0x68, 0xe6, 0x5d, 0xa6, 0xe4, 0x47, 0xe9, 0x24, 0x5e, 0x70, 0xeb, 0x6f, 0x7f,
	0x74, 0x15, 0xa8, 0xac, 0x53, 0x06, 0xd7, 0xe7, 0x6e, 0x2a, 0x72, 0x67, 0xae, 0x3c, 0xf3, 0x77,
	0xf9, 0xc1, 0xa5, 0x38, 0xb9, 0xc5, 0x2b, 0x68, 0xe6, 0x5d, 0xe0, 0xd9, 0x70, 0x2e, 0x78, 0x22,
	0x64, 0xc3, 0x59, 0xf8, 0x1e, 0xe8, 0xfc, 0x57, 0x03, 0x88, 0x39, 0x98, 0xbc, 0x80, 0x7a, 0x9a,
	0x94, 0xc9, 0xf7, 0x2f, 0xa6, 0x6c, 0xb5, 0xdd, 0xed, 0x4b, 0x79, 0x9d, 0x9c, 0xc3, 0xd6, 0x42,
	0xa2, 0x22, 0xed, 0xb4, 0xfe, 0x65, 0x7c, 0xb9, 0x7d, 0xff, 0xca, 0x78, 0x19, 0xe3, 0x37, 0x1a,
	0xd4, 0x52, 0xfd, 0x49, 0x6c, 0x7c, 0x0c, 0xe4, 0x10, 0xc0, 0xdd, 0x2b, 0xf1, 0x8c, 0x72, 0x62,
	0xf7, 0xaa, 0x9c, 0x24, 0xb3, 0x9a, 0xee, 0xc4, 0x6c, 0x56, 0x73, 0x1b, 0x38, 0x9b, 0xd5, 0x9c,
	0x66, 0x3e, 0x5d, 0xc2, 0x3f, 0xdf, 0x3f, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0x28,
	0x2f, 0x98, 0x32, 0x17, 0x00, 0x00,
}
