// +build !ignore_autogenerated

/*
Copyright 2019 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by main. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha3

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.AlgorithmSetting": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"value": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.AlgorithmSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"algorithmName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"algorithmSettings": {
							SchemaProps: spec.SchemaProps{
								Description: "Key-value pairs representing settings for suggestion algorithms.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.AlgorithmSetting"),
										},
									},
								},
							},
						},
						"earlyStopping": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.EarlyStoppingSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.AlgorithmSetting", "github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.EarlyStoppingSpec"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.CollectorSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"customCollector": {
							SchemaProps: spec.SchemaProps{
								Description: "When kind is \"customCollector\", this field will be used",
								Ref:         ref("k8s.io/api/core/v1.Container"),
							},
						},
					},
					Required: []string{"kind"},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.Container"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.EarlyStoppingSetting": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"value": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.EarlyStoppingSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"earlyStoppingAlgorithmName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"earlyStoppingSettings": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.EarlyStoppingSetting"),
										},
									},
								},
							},
						},
					},
					Required: []string{"earlyStoppingSettings"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.EarlyStoppingSetting"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.FileSystemPath": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"path": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"kind": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.FilterSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"metricsFormat": {
							SchemaProps: spec.SchemaProps{
								Description: "When the metrics output follows format as this field specified, metricsCollector collects it and reports to metrics server, it can be \"<metric_name>: <float>\" or else",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.Metric": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"value": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"number"},
								Format: "double",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.MetricsCollectorSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"source": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.SourceSpec"),
							},
						},
						"collector": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.CollectorSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.CollectorSpec", "github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.SourceSpec"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ObjectiveSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"goal": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"number"},
								Format: "double",
							},
						},
						"objectiveMetricName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"additionalMetricNames": {
							SchemaProps: spec.SchemaProps{
								Description: "This can be empty if we only care about the objective metric. Note: If we adopt a push instead of pull mechanism, this can be omitted completely.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.Observation": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"metrics": {
							SchemaProps: spec.SchemaProps{
								Description: "Key-value pairs for metric names and values",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.Metric"),
										},
									},
								},
							},
						},
					},
					Required: []string{"metrics"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.Metric"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ParameterAssignment": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"value": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.SourceSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"httpGet": {
							SchemaProps: spec.SchemaProps{
								Description: "Model-train source code can expose metrics by http, such as HTTP endpoint in prometheus metric format",
								Ref:         ref("k8s.io/api/core/v1.HTTPGetAction"),
							},
						},
						"fileSystemPath": {
							SchemaProps: spec.SchemaProps{
								Description: "During training model, metrics may be persisted into local file in source code, such as tfEvent use case",
								Ref:         ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.FileSystemPath"),
							},
						},
						"filter": {
							SchemaProps: spec.SchemaProps{
								Description: "Default metric output format is {\"metric\": \"<metric_name>\", \"value\": <int_or_float>, \"epoch\": <int>, \"step\": <int>}, but if the output doesn't follow default format, please extend it here",
								Ref:         ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.FilterSpec"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.FileSystemPath", "github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.FilterSpec", "k8s.io/api/core/v1.HTTPGetAction"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.Experiment": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Structure of the Experiment custom resource.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ExperimentSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ExperimentStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ExperimentSpec", "github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ExperimentStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ExperimentCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ExperimentCondition describes the state of the experiment at a certain point.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of experiment condition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition, one of True, False, Unknown.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "The reason for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human readable message indicating details about the transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastUpdateTime": {
							SchemaProps: spec.SchemaProps{
								Description: "The last time this condition was updated.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time the condition transitioned from one status to another.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
					Required: []string{"type", "status"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ExperimentList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "ExperimentList contains a list of Experiments",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.Experiment"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.Experiment", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ExperimentSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"parameters": {
							SchemaProps: spec.SchemaProps{
								Description: "List of hyperparameter configurations.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ParameterSpec"),
										},
									},
								},
							},
						},
						"objective": {
							SchemaProps: spec.SchemaProps{
								Description: "Describes the objective of the experiment.",
								Ref:         ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ObjectiveSpec"),
							},
						},
						"algorithm": {
							SchemaProps: spec.SchemaProps{
								Description: "Describes the suggestion algorithm.",
								Ref:         ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.AlgorithmSpec"),
							},
						},
						"trialTemplate": {
							SchemaProps: spec.SchemaProps{
								Description: "Template for each run of the trial.",
								Ref:         ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.TrialTemplate"),
							},
						},
						"parallelTrialCount": {
							SchemaProps: spec.SchemaProps{
								Description: "How many trials can be processed in parallel. Defaults to 3",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"maxTrialCount": {
							SchemaProps: spec.SchemaProps{
								Description: "Max completed trials to mark experiment as succeeded",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"maxFailedTrialCount": {
							SchemaProps: spec.SchemaProps{
								Description: "Max failed trials to mark experiment as failed.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"metricsCollectorSpec": {
							SchemaProps: spec.SchemaProps{
								Description: "For v1alpha3 we will keep the metrics collector implementation same as v1alpha1.",
								Ref:         ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.MetricsCollectorSpec"),
							},
						},
						"nasConfig": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.NasConfig"),
							},
						},
						"resumePolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "Describes resuming policy which usually take effect after experiment terminated.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.AlgorithmSpec", "github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.MetricsCollectorSpec", "github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ObjectiveSpec", "github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.NasConfig", "github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ParameterSpec", "github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.TrialTemplate"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ExperimentStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"startTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents time when the Experiment was acknowledged by the Experiment controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"completionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents time when the Experiment was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastReconcileTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents last time when the Experiment was reconciled. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"conditions": {
							SchemaProps: spec.SchemaProps{
								Description: "List of observed runtime conditions for this Experiment.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ExperimentCondition"),
										},
									},
								},
							},
						},
						"currentOptimalTrial": {
							SchemaProps: spec.SchemaProps{
								Description: "Current optimal trial parameters and observations.",
								Ref:         ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.OptimalTrial"),
							},
						},
						"runningTrialList": {
							SchemaProps: spec.SchemaProps{
								Description: "List of trial names which are running.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"pendingTrialList": {
							SchemaProps: spec.SchemaProps{
								Description: "List of trial names which are pending.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"failedTrialList": {
							SchemaProps: spec.SchemaProps{
								Description: "List of trial names which have already failed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"succeededTrialList": {
							SchemaProps: spec.SchemaProps{
								Description: "List of trial names which have already succeeded.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"killedTrialList": {
							SchemaProps: spec.SchemaProps{
								Description: "List of trial names which have been killed.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"trials": {
							SchemaProps: spec.SchemaProps{
								Description: "Trials is the total number of trials owned by the experiment.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"trialsSucceeded": {
							SchemaProps: spec.SchemaProps{
								Description: "How many trials have succeeded.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"trialsFailed": {
							SchemaProps: spec.SchemaProps{
								Description: "How many trials have failed.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"trialsKilled": {
							SchemaProps: spec.SchemaProps{
								Description: "How many trials have been killed.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"trialsPending": {
							SchemaProps: spec.SchemaProps{
								Description: "How many trials are currently pending.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"trialsRunning": {
							SchemaProps: spec.SchemaProps{
								Description: "How many trials are currently running.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ExperimentCondition", "github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.OptimalTrial", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.FeasibleSpace": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"max": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"min": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"list": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"string"},
											Format: "",
										},
									},
								},
							},
						},
						"step": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.GoTemplate": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"templateSpec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.TemplateSpec"),
							},
						},
						"rawTemplate": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.TemplateSpec"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.GraphConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "GraphConfig contains a config of DAG",
					Properties: map[string]spec.Schema{
						"numLayers": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"integer"},
								Format: "int32",
							},
						},
						"inputSizes": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"integer"},
											Format: "int32",
										},
									},
								},
							},
						},
						"outputSizes": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Type:   []string{"integer"},
											Format: "int32",
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.NasConfig": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "NasConfig contains config for NAS job",
					Properties: map[string]spec.Schema{
						"graphConfig": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.GraphConfig"),
							},
						},
						"operations": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.Operation"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.GraphConfig", "github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.Operation"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.Operation": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Operation contains type of operation in DAG",
					Properties: map[string]spec.Schema{
						"operationType": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"parameters": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ParameterSpec"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ParameterSpec"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.OptimalTrial": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "OptimalTrial is the metrics and assignments of the best trial.",
					Properties: map[string]spec.Schema{
						"bestTrialName": {
							SchemaProps: spec.SchemaProps{
								Description: "BestTrialName is the name of the best trial.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"parameterAssignments": {
							SchemaProps: spec.SchemaProps{
								Description: "Key-value pairs for hyperparameters and assignment values.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ParameterAssignment"),
										},
									},
								},
							},
						},
						"observation": {
							SchemaProps: spec.SchemaProps{
								Description: "Observation for this trial",
								Ref:         ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.Observation"),
							},
						},
					},
					Required: []string{"bestTrialName", "parameterAssignments"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.Observation", "github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ParameterAssignment"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.ParameterSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"name": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"parameterType": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"feasibleSpace": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.FeasibleSpace"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.FeasibleSpace"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.TemplateSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"configMapName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"configMapNamespace": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"templatePath": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.TrialTemplate": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"retain": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"boolean"},
								Format: "",
							},
						},
						"goTemplate": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.GoTemplate"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/experiments/v1alpha3.GoTemplate"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.Suggestion": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Suggestion represents the structure of a Suggestion resource.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.SuggestionSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.SuggestionStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.SuggestionSpec", "github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.SuggestionStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.SuggestionCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SuggestionCondition describes the state of the Suggestion at a certain point.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of Suggestion condition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition, one of True, False, Unknown.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "The reason for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human readable message indicating details about the transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastUpdateTime": {
							SchemaProps: spec.SchemaProps{
								Description: "The last time this condition was updated.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time the condition transitioned from one status to another.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
					Required: []string{"type", "status"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.SuggestionList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SuggestionList contains a list of Suggestion",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.Suggestion"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.Suggestion", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.SuggestionSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SuggestionSpec defines the desired state of Suggestion",
					Properties: map[string]spec.Schema{
						"algorithmName": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{"string"},
								Format: "",
							},
						},
						"requests": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of suggestions requested",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
					Required: []string{"algorithmName"},
				},
			},
			Dependencies: []string{},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.SuggestionStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "SuggestionStatus defines the observed state of Suggestion",
					Properties: map[string]spec.Schema{
						"algorithmSettings": {
							SchemaProps: spec.SchemaProps{
								Description: "Algorithmsettings set by the algorithm services.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.AlgorithmSetting"),
										},
									},
								},
							},
						},
						"suggestionCount": {
							SchemaProps: spec.SchemaProps{
								Description: "Number of suggestion results",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"suggestions": {
							SchemaProps: spec.SchemaProps{
								Description: "Suggestion results",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.TrialAssignment"),
										},
									},
								},
							},
						},
						"startTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents time when the Suggestion was acknowledged by the Suggestion controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"completionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents time when the Suggestion was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastReconcileTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents last time when the Suggestion was reconciled. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"conditions": {
							SchemaProps: spec.SchemaProps{
								Description: "List of observed runtime conditions for this Suggestion.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.SuggestionCondition"),
										},
									},
								},
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.AlgorithmSetting", "github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.SuggestionCondition", "github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.TrialAssignment", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/suggestions/v1alpha3.TrialAssignment": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TrialAssignment is the assignment for one trial.",
					Properties: map[string]spec.Schema{
						"parameterAssignments": {
							SchemaProps: spec.SchemaProps{
								Description: "Suggestion results",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ParameterAssignment"),
										},
									},
								},
							},
						},
						"name": {
							SchemaProps: spec.SchemaProps{
								Description: "Name of the suggestion",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ParameterAssignment"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.Trial": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "Represents the structure of a Trial resource.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.TrialSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.TrialStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.TrialSpec", "github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.TrialStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.TrialCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TrialCondition describes the state of the trial at a certain point.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of trial condition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition, one of True, False, Unknown.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "The reason for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human readable message indicating details about the transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastUpdateTime": {
							SchemaProps: spec.SchemaProps{
								Description: "The last time this condition was updated.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time the condition transitioned from one status to another.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
					Required: []string{"type", "status"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.TrialList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TrialList contains a list of Trials",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Type: []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.Trial"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.Trial", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.TrialSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"objective": {
							SchemaProps: spec.SchemaProps{
								Description: "Describes the objective of the experiment.",
								Ref:         ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ObjectiveSpec"),
							},
						},
						"parameterAssignments": {
							SchemaProps: spec.SchemaProps{
								Description: "Key-value pairs for hyperparameters and assignment values.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ParameterAssignment"),
										},
									},
								},
							},
						},
						"runSpec": {
							SchemaProps: spec.SchemaProps{
								Description: "Raw text for the trial run spec. This can be any generic Kubernetes runtime object. The trial operator should create the resource as written, and let the corresponding resource controller (e.g. tf-operator) handle the rest.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"retainRun": {
							SchemaProps: spec.SchemaProps{
								Description: "Whether to retain the trial run object after completed.",
								Type:        []string{"boolean"},
								Format:      "",
							},
						},
						"metricsCollector": {
							SchemaProps: spec.SchemaProps{
								Description: "Describes how metrics will be collected",
								Ref:         ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.MetricsCollectorSpec"),
							},
						},
					},
					Required: []string{"parameterAssignments"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.MetricsCollectorSpec", "github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ObjectiveSpec", "github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.ParameterAssignment"},
		},
		"github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.TrialStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Properties: map[string]spec.Schema{
						"startTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents time when the Trial was acknowledged by the Trial controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"completionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents time when the Trial was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastReconcileTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents last time when the Trial was reconciled. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"conditions": {
							SchemaProps: spec.SchemaProps{
								Description: "List of observed runtime conditions for this Trial.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.TrialCondition"),
										},
									},
								},
							},
						},
						"observation": {
							SchemaProps: spec.SchemaProps{
								Description: "Results of the Trial - objectives and other metrics values.",
								Ref:         ref("github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.Observation"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/katib/pkg/apis/controller/common/v1alpha3.Observation", "github.com/kubeflow/katib/pkg/apis/controller/trials/v1alpha3.TrialCondition", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
	}
}
