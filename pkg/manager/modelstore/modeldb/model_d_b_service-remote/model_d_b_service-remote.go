// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/kubeflow/katib/pkg/manager/modelstore/modeldb"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  i32 testConnection()")
	fmt.Fprintln(os.Stderr, "  i32 storeDataFrame(DataFrame df, i32 experimentRunId)")
	fmt.Fprintln(os.Stderr, "  string pathForTransformer(i32 transformerId)")
	fmt.Fprintln(os.Stderr, "  FitEventResponse storeFitEvent(FitEvent fe)")
	fmt.Fprintln(os.Stderr, "  MetricEventResponse storeMetricEvent(MetricEvent me)")
	fmt.Fprintln(os.Stderr, "  string getFilePath(Transformer t, i32 experimentRunId, string filename)")
	fmt.Fprintln(os.Stderr, "  TransformEventResponse storeTransformEvent(TransformEvent te)")
	fmt.Fprintln(os.Stderr, "  RandomSplitEventResponse storeRandomSplitEvent(RandomSplitEvent rse)")
	fmt.Fprintln(os.Stderr, "  PipelineEventResponse storePipelineEvent(PipelineEvent pipelineEvent)")
	fmt.Fprintln(os.Stderr, "  CrossValidationEventResponse storeCrossValidationEvent(CrossValidationEvent cve)")
	fmt.Fprintln(os.Stderr, "  GridSearchCrossValidationEventResponse storeGridSearchCrossValidationEvent(GridSearchCrossValidationEvent gscve)")
	fmt.Fprintln(os.Stderr, "  AnnotationEventResponse storeAnnotationEvent(AnnotationEvent ae)")
	fmt.Fprintln(os.Stderr, "  ProjectEventResponse storeProjectEvent(ProjectEvent pr)")
	fmt.Fprintln(os.Stderr, "  ExperimentEventResponse storeExperimentEvent(ExperimentEvent er)")
	fmt.Fprintln(os.Stderr, "  ExperimentRunEventResponse storeExperimentRunEvent(ExperimentRunEvent er)")
	fmt.Fprintln(os.Stderr, "  bool storeLinearModel(i32 modelId, LinearModel model)")
	fmt.Fprintln(os.Stderr, "  DataFrameAncestry getDataFrameAncestry(i32 dataFrameId)")
	fmt.Fprintln(os.Stderr, "  CommonAncestor getCommonAncestor(i32 dfId1, i32 dfId2)")
	fmt.Fprintln(os.Stderr, "  CommonAncestor getCommonAncestorForModels(i32 modelId1, i32 modelId2)")
	fmt.Fprintln(os.Stderr, "  i32 getTrainingRowsCount(i32 modelId)")
	fmt.Fprintln(os.Stderr, "   getTrainingRowsCounts( modelIds)")
	fmt.Fprintln(os.Stderr, "  CompareHyperParametersResponse compareHyperparameters(i32 modelId1, i32 modelId2)")
	fmt.Fprintln(os.Stderr, "  CompareFeaturesResponse compareFeatures(i32 modelId1, i32 modelId2)")
	fmt.Fprintln(os.Stderr, "   groupByProblemType( modelIds)")
	fmt.Fprintln(os.Stderr, "   similarModels(i32 modelId,  compMetrics, i32 numModels)")
	fmt.Fprintln(os.Stderr, "   linearModelFeatureImportances(i32 modelId)")
	fmt.Fprintln(os.Stderr, "   compareLinearModelFeatureImportances(i32 model1Id, i32 model2Id)")
	fmt.Fprintln(os.Stderr, "   iterationsUntilConvergence( modelIds, double tolerance)")
	fmt.Fprintln(os.Stderr, "   rankModels( modelIds, ModelRankMetric metric)")
	fmt.Fprintln(os.Stderr, "   confidenceIntervals(i32 modelId, double sigLevel)")
	fmt.Fprintln(os.Stderr, "   modelsWithFeatures( featureNames)")
	fmt.Fprintln(os.Stderr, "   modelsDerivedFromDataFrame(i32 dfId)")
	fmt.Fprintln(os.Stderr, "   getProjectIds( keyValuePairs)")
	fmt.Fprintln(os.Stderr, "   getModelIds( keyValuePairs)")
	fmt.Fprintln(os.Stderr, "  bool updateProject(i32 projectId, string key, string value)")
	fmt.Fprintln(os.Stderr, "  bool createOrUpdateScalarField(i32 modelId, string key, string value, string valueType)")
	fmt.Fprintln(os.Stderr, "  bool createVectorField(i32 modelId, string vectorName,  vectorConfig)")
	fmt.Fprintln(os.Stderr, "  bool updateVectorField(i32 modelId, string key, i32 valueIndex, string value, string valueType)")
	fmt.Fprintln(os.Stderr, "  bool appendToVectorField(i32 modelId, string vectorName, string value, string valueType)")
	fmt.Fprintln(os.Stderr, "  ModelResponse getModel(i32 modelId)")
	fmt.Fprintln(os.Stderr, "   getRunsInExperiment(i32 experimentId)")
	fmt.Fprintln(os.Stderr, "  ProjectExperimentsAndRuns getRunsAndExperimentsInProject(i32 projId)")
	fmt.Fprintln(os.Stderr, "   getProjectOverviews()")
	fmt.Fprintln(os.Stderr, "  ExperimentRunDetailsResponse getExperimentRunDetails(i32 experimentRunId)")
	fmt.Fprintln(os.Stderr, "   originalFeatures(i32 modelId)")
	fmt.Fprintln(os.Stderr, "  bool storeTreeModel(i32 modelId, TreeModel model)")
	fmt.Fprintln(os.Stderr, "   storePipelineTransformEvent( te)")
	fmt.Fprintln(os.Stderr, "  ModelAncestryResponse computeModelAncestry(i32 modelId)")
	fmt.Fprintln(os.Stderr, "  ExtractedPipelineResponse extractPipeline(i32 modelId)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
	var m map[string]string = h
	return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
	parts := strings.Split(value, ": ")
	if len(parts) != 2 {
		return fmt.Errorf("header should be of format 'Key: Value'")
	}
	h[parts[0]] = parts[1]
	return nil
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	headers := make(httpHeaders)
	var parsedUrl *url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
	flag.Parse()

	if len(urlString) > 0 {
		var err error
		parsedUrl, err = url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
		if len(headers) > 0 {
			httptrans := trans.(*thrift.THttpClient)
			for key, value := range headers {
				httptrans.SetHeader(key, value)
			}
		}
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	iprot := protocolFactory.GetProtocol(trans)
	oprot := protocolFactory.GetProtocol(trans)
	client := modeldb.NewModelDBServiceClient(thrift.NewTStandardClient(iprot, oprot))
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "testConnection":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "TestConnection requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.TestConnection(context.Background()))
		fmt.Print("\n")
		break
	case "storeDataFrame":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "StoreDataFrame requires 2 args")
			flag.Usage()
		}
		arg185 := flag.Arg(1)
		mbTrans186 := thrift.NewTMemoryBufferLen(len(arg185))
		defer mbTrans186.Close()
		_, err187 := mbTrans186.WriteString(arg185)
		if err187 != nil {
			Usage()
			return
		}
		factory188 := thrift.NewTJSONProtocolFactory()
		jsProt189 := factory188.GetProtocol(mbTrans186)
		argvalue0 := modeldb.NewDataFrame()
		err190 := argvalue0.Read(jsProt189)
		if err190 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err191 := (strconv.Atoi(flag.Arg(2)))
		if err191 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.StoreDataFrame(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "pathForTransformer":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PathForTransformer requires 1 args")
			flag.Usage()
		}
		tmp0, err192 := (strconv.Atoi(flag.Arg(1)))
		if err192 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.PathForTransformer(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storeFitEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StoreFitEvent requires 1 args")
			flag.Usage()
		}
		arg193 := flag.Arg(1)
		mbTrans194 := thrift.NewTMemoryBufferLen(len(arg193))
		defer mbTrans194.Close()
		_, err195 := mbTrans194.WriteString(arg193)
		if err195 != nil {
			Usage()
			return
		}
		factory196 := thrift.NewTJSONProtocolFactory()
		jsProt197 := factory196.GetProtocol(mbTrans194)
		argvalue0 := modeldb.NewFitEvent()
		err198 := argvalue0.Read(jsProt197)
		if err198 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StoreFitEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storeMetricEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StoreMetricEvent requires 1 args")
			flag.Usage()
		}
		arg199 := flag.Arg(1)
		mbTrans200 := thrift.NewTMemoryBufferLen(len(arg199))
		defer mbTrans200.Close()
		_, err201 := mbTrans200.WriteString(arg199)
		if err201 != nil {
			Usage()
			return
		}
		factory202 := thrift.NewTJSONProtocolFactory()
		jsProt203 := factory202.GetProtocol(mbTrans200)
		argvalue0 := modeldb.NewMetricEvent()
		err204 := argvalue0.Read(jsProt203)
		if err204 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StoreMetricEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getFilePath":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetFilePath requires 3 args")
			flag.Usage()
		}
		arg205 := flag.Arg(1)
		mbTrans206 := thrift.NewTMemoryBufferLen(len(arg205))
		defer mbTrans206.Close()
		_, err207 := mbTrans206.WriteString(arg205)
		if err207 != nil {
			Usage()
			return
		}
		factory208 := thrift.NewTJSONProtocolFactory()
		jsProt209 := factory208.GetProtocol(mbTrans206)
		argvalue0 := modeldb.NewTransformer()
		err210 := argvalue0.Read(jsProt209)
		if err210 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err211 := (strconv.Atoi(flag.Arg(2)))
		if err211 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.GetFilePath(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "storeTransformEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StoreTransformEvent requires 1 args")
			flag.Usage()
		}
		arg213 := flag.Arg(1)
		mbTrans214 := thrift.NewTMemoryBufferLen(len(arg213))
		defer mbTrans214.Close()
		_, err215 := mbTrans214.WriteString(arg213)
		if err215 != nil {
			Usage()
			return
		}
		factory216 := thrift.NewTJSONProtocolFactory()
		jsProt217 := factory216.GetProtocol(mbTrans214)
		argvalue0 := modeldb.NewTransformEvent()
		err218 := argvalue0.Read(jsProt217)
		if err218 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StoreTransformEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storeRandomSplitEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StoreRandomSplitEvent requires 1 args")
			flag.Usage()
		}
		arg219 := flag.Arg(1)
		mbTrans220 := thrift.NewTMemoryBufferLen(len(arg219))
		defer mbTrans220.Close()
		_, err221 := mbTrans220.WriteString(arg219)
		if err221 != nil {
			Usage()
			return
		}
		factory222 := thrift.NewTJSONProtocolFactory()
		jsProt223 := factory222.GetProtocol(mbTrans220)
		argvalue0 := modeldb.NewRandomSplitEvent()
		err224 := argvalue0.Read(jsProt223)
		if err224 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StoreRandomSplitEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storePipelineEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StorePipelineEvent requires 1 args")
			flag.Usage()
		}
		arg225 := flag.Arg(1)
		mbTrans226 := thrift.NewTMemoryBufferLen(len(arg225))
		defer mbTrans226.Close()
		_, err227 := mbTrans226.WriteString(arg225)
		if err227 != nil {
			Usage()
			return
		}
		factory228 := thrift.NewTJSONProtocolFactory()
		jsProt229 := factory228.GetProtocol(mbTrans226)
		argvalue0 := modeldb.NewPipelineEvent()
		err230 := argvalue0.Read(jsProt229)
		if err230 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StorePipelineEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storeCrossValidationEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StoreCrossValidationEvent requires 1 args")
			flag.Usage()
		}
		arg231 := flag.Arg(1)
		mbTrans232 := thrift.NewTMemoryBufferLen(len(arg231))
		defer mbTrans232.Close()
		_, err233 := mbTrans232.WriteString(arg231)
		if err233 != nil {
			Usage()
			return
		}
		factory234 := thrift.NewTJSONProtocolFactory()
		jsProt235 := factory234.GetProtocol(mbTrans232)
		argvalue0 := modeldb.NewCrossValidationEvent()
		err236 := argvalue0.Read(jsProt235)
		if err236 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StoreCrossValidationEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storeGridSearchCrossValidationEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StoreGridSearchCrossValidationEvent requires 1 args")
			flag.Usage()
		}
		arg237 := flag.Arg(1)
		mbTrans238 := thrift.NewTMemoryBufferLen(len(arg237))
		defer mbTrans238.Close()
		_, err239 := mbTrans238.WriteString(arg237)
		if err239 != nil {
			Usage()
			return
		}
		factory240 := thrift.NewTJSONProtocolFactory()
		jsProt241 := factory240.GetProtocol(mbTrans238)
		argvalue0 := modeldb.NewGridSearchCrossValidationEvent()
		err242 := argvalue0.Read(jsProt241)
		if err242 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StoreGridSearchCrossValidationEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storeAnnotationEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StoreAnnotationEvent requires 1 args")
			flag.Usage()
		}
		arg243 := flag.Arg(1)
		mbTrans244 := thrift.NewTMemoryBufferLen(len(arg243))
		defer mbTrans244.Close()
		_, err245 := mbTrans244.WriteString(arg243)
		if err245 != nil {
			Usage()
			return
		}
		factory246 := thrift.NewTJSONProtocolFactory()
		jsProt247 := factory246.GetProtocol(mbTrans244)
		argvalue0 := modeldb.NewAnnotationEvent()
		err248 := argvalue0.Read(jsProt247)
		if err248 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StoreAnnotationEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storeProjectEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StoreProjectEvent requires 1 args")
			flag.Usage()
		}
		arg249 := flag.Arg(1)
		mbTrans250 := thrift.NewTMemoryBufferLen(len(arg249))
		defer mbTrans250.Close()
		_, err251 := mbTrans250.WriteString(arg249)
		if err251 != nil {
			Usage()
			return
		}
		factory252 := thrift.NewTJSONProtocolFactory()
		jsProt253 := factory252.GetProtocol(mbTrans250)
		argvalue0 := modeldb.NewProjectEvent()
		err254 := argvalue0.Read(jsProt253)
		if err254 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StoreProjectEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storeExperimentEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StoreExperimentEvent requires 1 args")
			flag.Usage()
		}
		arg255 := flag.Arg(1)
		mbTrans256 := thrift.NewTMemoryBufferLen(len(arg255))
		defer mbTrans256.Close()
		_, err257 := mbTrans256.WriteString(arg255)
		if err257 != nil {
			Usage()
			return
		}
		factory258 := thrift.NewTJSONProtocolFactory()
		jsProt259 := factory258.GetProtocol(mbTrans256)
		argvalue0 := modeldb.NewExperimentEvent()
		err260 := argvalue0.Read(jsProt259)
		if err260 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StoreExperimentEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storeExperimentRunEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StoreExperimentRunEvent requires 1 args")
			flag.Usage()
		}
		arg261 := flag.Arg(1)
		mbTrans262 := thrift.NewTMemoryBufferLen(len(arg261))
		defer mbTrans262.Close()
		_, err263 := mbTrans262.WriteString(arg261)
		if err263 != nil {
			Usage()
			return
		}
		factory264 := thrift.NewTJSONProtocolFactory()
		jsProt265 := factory264.GetProtocol(mbTrans262)
		argvalue0 := modeldb.NewExperimentRunEvent()
		err266 := argvalue0.Read(jsProt265)
		if err266 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StoreExperimentRunEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storeLinearModel":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "StoreLinearModel requires 2 args")
			flag.Usage()
		}
		tmp0, err267 := (strconv.Atoi(flag.Arg(1)))
		if err267 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg268 := flag.Arg(2)
		mbTrans269 := thrift.NewTMemoryBufferLen(len(arg268))
		defer mbTrans269.Close()
		_, err270 := mbTrans269.WriteString(arg268)
		if err270 != nil {
			Usage()
			return
		}
		factory271 := thrift.NewTJSONProtocolFactory()
		jsProt272 := factory271.GetProtocol(mbTrans269)
		argvalue1 := modeldb.NewLinearModel()
		err273 := argvalue1.Read(jsProt272)
		if err273 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.StoreLinearModel(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getDataFrameAncestry":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetDataFrameAncestry requires 1 args")
			flag.Usage()
		}
		tmp0, err274 := (strconv.Atoi(flag.Arg(1)))
		if err274 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetDataFrameAncestry(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getCommonAncestor":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetCommonAncestor requires 2 args")
			flag.Usage()
		}
		tmp0, err275 := (strconv.Atoi(flag.Arg(1)))
		if err275 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err276 := (strconv.Atoi(flag.Arg(2)))
		if err276 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetCommonAncestor(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getCommonAncestorForModels":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetCommonAncestorForModels requires 2 args")
			flag.Usage()
		}
		tmp0, err277 := (strconv.Atoi(flag.Arg(1)))
		if err277 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err278 := (strconv.Atoi(flag.Arg(2)))
		if err278 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetCommonAncestorForModels(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "getTrainingRowsCount":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTrainingRowsCount requires 1 args")
			flag.Usage()
		}
		tmp0, err279 := (strconv.Atoi(flag.Arg(1)))
		if err279 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetTrainingRowsCount(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getTrainingRowsCounts":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTrainingRowsCounts requires 1 args")
			flag.Usage()
		}
		arg280 := flag.Arg(1)
		mbTrans281 := thrift.NewTMemoryBufferLen(len(arg280))
		defer mbTrans281.Close()
		_, err282 := mbTrans281.WriteString(arg280)
		if err282 != nil {
			Usage()
			return
		}
		factory283 := thrift.NewTJSONProtocolFactory()
		jsProt284 := factory283.GetProtocol(mbTrans281)
		containerStruct0 := modeldb.NewModelDBServiceGetTrainingRowsCountsArgs()
		err285 := containerStruct0.ReadField1(jsProt284)
		if err285 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.ModelIds
		value0 := argvalue0
		fmt.Print(client.GetTrainingRowsCounts(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compareHyperparameters":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CompareHyperparameters requires 2 args")
			flag.Usage()
		}
		tmp0, err286 := (strconv.Atoi(flag.Arg(1)))
		if err286 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err287 := (strconv.Atoi(flag.Arg(2)))
		if err287 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.CompareHyperparameters(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "compareFeatures":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CompareFeatures requires 2 args")
			flag.Usage()
		}
		tmp0, err288 := (strconv.Atoi(flag.Arg(1)))
		if err288 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err289 := (strconv.Atoi(flag.Arg(2)))
		if err289 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.CompareFeatures(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "groupByProblemType":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GroupByProblemType requires 1 args")
			flag.Usage()
		}
		arg290 := flag.Arg(1)
		mbTrans291 := thrift.NewTMemoryBufferLen(len(arg290))
		defer mbTrans291.Close()
		_, err292 := mbTrans291.WriteString(arg290)
		if err292 != nil {
			Usage()
			return
		}
		factory293 := thrift.NewTJSONProtocolFactory()
		jsProt294 := factory293.GetProtocol(mbTrans291)
		containerStruct0 := modeldb.NewModelDBServiceGroupByProblemTypeArgs()
		err295 := containerStruct0.ReadField1(jsProt294)
		if err295 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.ModelIds
		value0 := argvalue0
		fmt.Print(client.GroupByProblemType(context.Background(), value0))
		fmt.Print("\n")
		break
	case "similarModels":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SimilarModels requires 3 args")
			flag.Usage()
		}
		tmp0, err296 := (strconv.Atoi(flag.Arg(1)))
		if err296 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg297 := flag.Arg(2)
		mbTrans298 := thrift.NewTMemoryBufferLen(len(arg297))
		defer mbTrans298.Close()
		_, err299 := mbTrans298.WriteString(arg297)
		if err299 != nil {
			Usage()
			return
		}
		factory300 := thrift.NewTJSONProtocolFactory()
		jsProt301 := factory300.GetProtocol(mbTrans298)
		containerStruct1 := modeldb.NewModelDBServiceSimilarModelsArgs()
		err302 := containerStruct1.ReadField2(jsProt301)
		if err302 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.CompMetrics
		value1 := argvalue1
		tmp2, err303 := (strconv.Atoi(flag.Arg(3)))
		if err303 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		fmt.Print(client.SimilarModels(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "linearModelFeatureImportances":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "LinearModelFeatureImportances requires 1 args")
			flag.Usage()
		}
		tmp0, err304 := (strconv.Atoi(flag.Arg(1)))
		if err304 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.LinearModelFeatureImportances(context.Background(), value0))
		fmt.Print("\n")
		break
	case "compareLinearModelFeatureImportances":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CompareLinearModelFeatureImportances requires 2 args")
			flag.Usage()
		}
		tmp0, err305 := (strconv.Atoi(flag.Arg(1)))
		if err305 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		tmp1, err306 := (strconv.Atoi(flag.Arg(2)))
		if err306 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.CompareLinearModelFeatureImportances(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "iterationsUntilConvergence":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "IterationsUntilConvergence requires 2 args")
			flag.Usage()
		}
		arg307 := flag.Arg(1)
		mbTrans308 := thrift.NewTMemoryBufferLen(len(arg307))
		defer mbTrans308.Close()
		_, err309 := mbTrans308.WriteString(arg307)
		if err309 != nil {
			Usage()
			return
		}
		factory310 := thrift.NewTJSONProtocolFactory()
		jsProt311 := factory310.GetProtocol(mbTrans308)
		containerStruct0 := modeldb.NewModelDBServiceIterationsUntilConvergenceArgs()
		err312 := containerStruct0.ReadField1(jsProt311)
		if err312 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.ModelIds
		value0 := argvalue0
		argvalue1, err313 := (strconv.ParseFloat(flag.Arg(2), 64))
		if err313 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.IterationsUntilConvergence(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "rankModels":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RankModels requires 2 args")
			flag.Usage()
		}
		arg314 := flag.Arg(1)
		mbTrans315 := thrift.NewTMemoryBufferLen(len(arg314))
		defer mbTrans315.Close()
		_, err316 := mbTrans315.WriteString(arg314)
		if err316 != nil {
			Usage()
			return
		}
		factory317 := thrift.NewTJSONProtocolFactory()
		jsProt318 := factory317.GetProtocol(mbTrans315)
		containerStruct0 := modeldb.NewModelDBServiceRankModelsArgs()
		err319 := containerStruct0.ReadField1(jsProt318)
		if err319 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.ModelIds
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := modeldb.ModelRankMetric(tmp1)
		value1 := argvalue1
		fmt.Print(client.RankModels(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "confidenceIntervals":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ConfidenceIntervals requires 2 args")
			flag.Usage()
		}
		tmp0, err320 := (strconv.Atoi(flag.Arg(1)))
		if err320 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1, err321 := (strconv.ParseFloat(flag.Arg(2), 64))
		if err321 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.ConfidenceIntervals(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "modelsWithFeatures":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ModelsWithFeatures requires 1 args")
			flag.Usage()
		}
		arg322 := flag.Arg(1)
		mbTrans323 := thrift.NewTMemoryBufferLen(len(arg322))
		defer mbTrans323.Close()
		_, err324 := mbTrans323.WriteString(arg322)
		if err324 != nil {
			Usage()
			return
		}
		factory325 := thrift.NewTJSONProtocolFactory()
		jsProt326 := factory325.GetProtocol(mbTrans323)
		containerStruct0 := modeldb.NewModelDBServiceModelsWithFeaturesArgs()
		err327 := containerStruct0.ReadField1(jsProt326)
		if err327 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.FeatureNames
		value0 := argvalue0
		fmt.Print(client.ModelsWithFeatures(context.Background(), value0))
		fmt.Print("\n")
		break
	case "modelsDerivedFromDataFrame":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ModelsDerivedFromDataFrame requires 1 args")
			flag.Usage()
		}
		tmp0, err328 := (strconv.Atoi(flag.Arg(1)))
		if err328 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.ModelsDerivedFromDataFrame(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getProjectIds":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetProjectIds requires 1 args")
			flag.Usage()
		}
		arg329 := flag.Arg(1)
		mbTrans330 := thrift.NewTMemoryBufferLen(len(arg329))
		defer mbTrans330.Close()
		_, err331 := mbTrans330.WriteString(arg329)
		if err331 != nil {
			Usage()
			return
		}
		factory332 := thrift.NewTJSONProtocolFactory()
		jsProt333 := factory332.GetProtocol(mbTrans330)
		containerStruct0 := modeldb.NewModelDBServiceGetProjectIdsArgs()
		err334 := containerStruct0.ReadField1(jsProt333)
		if err334 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.KeyValuePairs
		value0 := argvalue0
		fmt.Print(client.GetProjectIds(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getModelIds":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetModelIds requires 1 args")
			flag.Usage()
		}
		arg335 := flag.Arg(1)
		mbTrans336 := thrift.NewTMemoryBufferLen(len(arg335))
		defer mbTrans336.Close()
		_, err337 := mbTrans336.WriteString(arg335)
		if err337 != nil {
			Usage()
			return
		}
		factory338 := thrift.NewTJSONProtocolFactory()
		jsProt339 := factory338.GetProtocol(mbTrans336)
		containerStruct0 := modeldb.NewModelDBServiceGetModelIdsArgs()
		err340 := containerStruct0.ReadField1(jsProt339)
		if err340 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.KeyValuePairs
		value0 := argvalue0
		fmt.Print(client.GetModelIds(context.Background(), value0))
		fmt.Print("\n")
		break
	case "updateProject":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "UpdateProject requires 3 args")
			flag.Usage()
		}
		tmp0, err341 := (strconv.Atoi(flag.Arg(1)))
		if err341 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.UpdateProject(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "createOrUpdateScalarField":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "CreateOrUpdateScalarField requires 4 args")
			flag.Usage()
		}
		tmp0, err344 := (strconv.Atoi(flag.Arg(1)))
		if err344 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.CreateOrUpdateScalarField(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "createVectorField":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "CreateVectorField requires 3 args")
			flag.Usage()
		}
		tmp0, err348 := (strconv.Atoi(flag.Arg(1)))
		if err348 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		arg350 := flag.Arg(3)
		mbTrans351 := thrift.NewTMemoryBufferLen(len(arg350))
		defer mbTrans351.Close()
		_, err352 := mbTrans351.WriteString(arg350)
		if err352 != nil {
			Usage()
			return
		}
		factory353 := thrift.NewTJSONProtocolFactory()
		jsProt354 := factory353.GetProtocol(mbTrans351)
		containerStruct2 := modeldb.NewModelDBServiceCreateVectorFieldArgs()
		err355 := containerStruct2.ReadField3(jsProt354)
		if err355 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.VectorConfig
		value2 := argvalue2
		fmt.Print(client.CreateVectorField(context.Background(), value0, value1, value2))
		fmt.Print("\n")
		break
	case "updateVectorField":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "UpdateVectorField requires 5 args")
			flag.Usage()
		}
		tmp0, err356 := (strconv.Atoi(flag.Arg(1)))
		if err356 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err358 := (strconv.Atoi(flag.Arg(3)))
		if err358 != nil {
			Usage()
			return
		}
		argvalue2 := int32(tmp2)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.UpdateVectorField(context.Background(), value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "appendToVectorField":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AppendToVectorField requires 4 args")
			flag.Usage()
		}
		tmp0, err361 := (strconv.Atoi(flag.Arg(1)))
		if err361 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.AppendToVectorField(context.Background(), value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getModel":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetModel requires 1 args")
			flag.Usage()
		}
		tmp0, err365 := (strconv.Atoi(flag.Arg(1)))
		if err365 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetModel(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getRunsInExperiment":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRunsInExperiment requires 1 args")
			flag.Usage()
		}
		tmp0, err366 := (strconv.Atoi(flag.Arg(1)))
		if err366 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetRunsInExperiment(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getRunsAndExperimentsInProject":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRunsAndExperimentsInProject requires 1 args")
			flag.Usage()
		}
		tmp0, err367 := (strconv.Atoi(flag.Arg(1)))
		if err367 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetRunsAndExperimentsInProject(context.Background(), value0))
		fmt.Print("\n")
		break
	case "getProjectOverviews":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetProjectOverviews requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetProjectOverviews(context.Background()))
		fmt.Print("\n")
		break
	case "getExperimentRunDetails":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetExperimentRunDetails requires 1 args")
			flag.Usage()
		}
		tmp0, err368 := (strconv.Atoi(flag.Arg(1)))
		if err368 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetExperimentRunDetails(context.Background(), value0))
		fmt.Print("\n")
		break
	case "originalFeatures":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "OriginalFeatures requires 1 args")
			flag.Usage()
		}
		tmp0, err369 := (strconv.Atoi(flag.Arg(1)))
		if err369 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.OriginalFeatures(context.Background(), value0))
		fmt.Print("\n")
		break
	case "storeTreeModel":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "StoreTreeModel requires 2 args")
			flag.Usage()
		}
		tmp0, err370 := (strconv.Atoi(flag.Arg(1)))
		if err370 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		arg371 := flag.Arg(2)
		mbTrans372 := thrift.NewTMemoryBufferLen(len(arg371))
		defer mbTrans372.Close()
		_, err373 := mbTrans372.WriteString(arg371)
		if err373 != nil {
			Usage()
			return
		}
		factory374 := thrift.NewTJSONProtocolFactory()
		jsProt375 := factory374.GetProtocol(mbTrans372)
		argvalue1 := modeldb.NewTreeModel()
		err376 := argvalue1.Read(jsProt375)
		if err376 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.StoreTreeModel(context.Background(), value0, value1))
		fmt.Print("\n")
		break
	case "storePipelineTransformEvent":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StorePipelineTransformEvent requires 1 args")
			flag.Usage()
		}
		arg377 := flag.Arg(1)
		mbTrans378 := thrift.NewTMemoryBufferLen(len(arg377))
		defer mbTrans378.Close()
		_, err379 := mbTrans378.WriteString(arg377)
		if err379 != nil {
			Usage()
			return
		}
		factory380 := thrift.NewTJSONProtocolFactory()
		jsProt381 := factory380.GetProtocol(mbTrans378)
		containerStruct0 := modeldb.NewModelDBServiceStorePipelineTransformEventArgs()
		err382 := containerStruct0.ReadField1(jsProt381)
		if err382 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Te
		value0 := argvalue0
		fmt.Print(client.StorePipelineTransformEvent(context.Background(), value0))
		fmt.Print("\n")
		break
	case "computeModelAncestry":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ComputeModelAncestry requires 1 args")
			flag.Usage()
		}
		tmp0, err383 := (strconv.Atoi(flag.Arg(1)))
		if err383 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.ComputeModelAncestry(context.Background(), value0))
		fmt.Print("\n")
		break
	case "extractPipeline":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ExtractPipeline requires 1 args")
			flag.Usage()
		}
		tmp0, err384 := (strconv.Atoi(flag.Arg(1)))
		if err384 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.ExtractPipeline(context.Background(), value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
