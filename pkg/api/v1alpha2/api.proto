/**
 * Katib API
 */
syntax = "proto3";

package api.v1.alpha2;

import "google/api/annotations.proto";

/**
 * Service for Main API for Katib
 * For each RPC service, we define mapping to HTTP REST API method.
 * The mapping includes the URL path, query parameters and request body.
 * https://cloud.google.com/service-infrastructure/docs/service-management/reference/rpc/google.api#http
 */
service Manager {
    /**
     * Register a Experiment to DB.
     */
    rpc RegisterExperiment(RegisterExperimentRequest) returns (RegisterExperimentReply){
        option (google.api.http) = {
            post: "/api/Manager/RegisterExperiment"
            body: "experiment"
        };
    };

    /** 
     * Delete a Experiment from DB by name.
     */
    rpc DeleteExperiment(DeleteExperimentRequest) returns (DeleteExperimentReply){
        option (google.api.http) = {
            get: "/api/Manager/DeleteExperiment/{experiment_name}"
        };
    };

    /** 
     * Get a Experiment from DB by name.
     */
    rpc GetExperiment(GetExperimentRequest) returns (GetExperimentReply){
        option (google.api.http) = {
            get: "/api/Manager/GetExperiment/{experiment_name}"
        };
    };

    /**
     * Get a summary list of Experiment from DB.
     * The summary includes name and condition.
     */
    rpc GetExperimentList(GetExperimentListRequest) returns (GetExperimentListReply){
        option (google.api.http) = {
            get: "/api/Manager/GetExperimentList"
        };
    };

    /** 
     * Update Status of a experiment.
     */
    rpc UpdateExperimentStatus(UpdateExperimentStatusRequest) returns (UpdateExperimentStatusReply){
        option (google.api.http) = {
            put: "/api/Manager/UpdateExperimentStatus/{experiment_name}",
            body: "*"
        };
    };

    /** 
     * Update AlgorithmExtraSettings.
     * The ExtraSetting is created if it does not exist, otherwise it is overwrited.
     */
    rpc UpdateAlgorithmExtraSettings(UpdateAlgorithmExtraSettingsRequest) returns (UpdateAlgorithmExtraSettingsReply){
        option (google.api.http) = {
            put: "/api/Manager/UpdateAlgorithmExtraSettings/{experiment_name}",
            body: "*"
        };
    };

    /** 
     * Get all AlgorithmExtraSettings.
     */
    rpc GetAlgorithmExtraSettings(GetAlgorithmExtraSettingsRequest) returns (GetAlgorithmExtraSettingsReply){
        option (google.api.http) = {
            get: "/api/Manager/GetAlgorithmExtraSettings/{experiment_name}",
        };
    };


    /**
     * Register a Trial to DB.
     * ID will be filled by manager automatically.
     */
    rpc RegisterTrial(RegisterTrialRequest) returns (RegisterTrialReply){
        option (google.api.http) = {
            post: "/api/Manager/RegisterTrial"
            body: "trial"
        };
    };

    /** 
     * Delete a Trial from DB by ID.
     */
    rpc DeleteTrial(DeleteTrialRequest) returns (DeleteTrialReply){
        option (google.api.http) = {
            get: "/api/Manager/DeleteTrial/{trial_name}"
        };
    };

    /** 
     * Get a list of Trial from DB by name of a Experiment.
     */
    rpc GetTrialList(GetTrialListRequest) returns (GetTrialListReply){
        option (google.api.http) = {
            get: "/api/Manager/GetTrialList/{experiment_name}"
        };
    };

    /**
     * Get a Trial from DB by ID of Trial.
     */
    rpc GetTrial(GetTrialRequest) returns (GetTrialReply){
        option (google.api.http) = {
            get: "/api/Manager/GetTrial/{trial_name}"
        };
    };

    /** 
     * Update Status of a trial.
     */
    rpc UpdateTrialStatus(UpdateTrialStatusRequest) returns (UpdateTrialStatusReply){
        option (google.api.http) = {
            put: "/api/Manager/UpdateTrialStatus",
            body: "*"
        };
    };

    /** 
     * Report a log of Observations for a Trial.
     * The log consists of timestamp and value of metric.
     * Katib store every log of metrics.
     * You can see accuracy curve or other metric logs on UI.
     */
    rpc ReportObservationLog(ReportObservationLogRequest) returns (ReportObservationLogReply){
        option (google.api.http) = {
            post: "/api/Manager/ReportObservationLog"
            body: "*"
        };
    };

    /**
     * Get all log of Observations for a Trial.
     */
    rpc GetObservationLog(GetObservationLogRequest) returns (GetObservationLogReply){
        option (google.api.http) = {
            get: "/api/Manager/GetObservationLog/{trial_name}"
            };
    };

    /** 
     * Get Suggestions from a Suggestion service.
     */
    rpc GetSuggestions(GetSuggestionsRequest) returns (GetSuggestionsReply){
        option (google.api.http) = {
            post: "/api/Manager/GetSuggestions"
            body: "*"
        };
    };

    /** 
     * Validate AlgorithmSettings in an Experiment.
     * Suggestion service should return INVALID_ARGUMENT Error when the parameter is invalid
     */
     rpc ValidateAlgorithmSettings(ValidateAlgorithmSettingsRequest) returns (ValidateAlgorithmSettingsReply){
        option (google.api.http) = {
            post: "/api/Manager/ValidateAlgorithmSettings"
            body: "*"
        };
    };
}

service Suggestion {
    rpc GetSuggestions(GetSuggestionsRequest) returns (GetSuggestionsReply);
    rpc ValidateAlgorithmSettings(ValidateAlgorithmSettingsRequest) returns (ValidateAlgorithmSettingsReply);
}

service EarlyStopping {
//TODO
}

/**
 * Types of value for HyperParameter.
 */
enum ParameterType {
    UNKNOWN_TYPE = 0; /// Undefined type and not used.
    DOUBLE = 1; /// Double float type. Use "Max/Min".
    INT = 2; /// Int type. Use "Max/Min".
    DISCRETE = 3; /// Discrete number type. Use "List" as float.
    CATEGORICAL = 4; /// Categorical type. Use "List" as string.
}


/**
 * Feasible space for optimization.
 * Int and Double type use Max/Min.
 * Discrete and Categorical type use List.
 */
message FeasibleSpace {
    string max = 1; /// Max Value
    string min = 2; /// Minimum Value
    repeated string list = 3; /// List of Values.
    string step = 4; /// Step for double or int parameter
}

/**
 * Config for a Hyper parameter.
 * Katib will create each Hyper parameter from this config.
 */
message ParameterSpec {
    string name = 1; /// Name of the parameter.
    ParameterType parameter_type = 2; /// Type of the parameter.
    FeasibleSpace feasible_space = 3; /// FeasibleSpace for the parameter.
}

/**
 * Direction of optimization. Minimize or Maximize.
 */
enum ObjectiveType {
    UNKNOWN = 0; /// Undefined type and not used.
    MINIMIZE = 1; /// Minimize
    MAXIMIZE = 2; /// Maximize
}

message ObjectiveSpec{
    ObjectiveType type = 1;
    float goal = 2;
    string objective_metric_name = 3;
    repeated string additional_metric_names = 4; 
    /// This can be empty if we only care about the objective metric.
}

message AlgorithmSetting {
    string name = 1;
    string value = 2;
}

message EarlyStoppingSpec {
//TODO
}

message AlgorithmSpec {
    string algorithm_name = 1;
    repeated AlgorithmSetting algorithm_setting = 2;
    EarlyStoppingSpec early_stopping_spec = 3;
}

/**
 * NasConfig contains a config of NAS job
 */
 message NasConfig {
    GraphConfig graph_config = 1; /// Config of DAG
    message Operations {
        repeated Operation operation = 1;
    }
    Operations operations = 2; /// List of Operation
}

/**
 * GraphConfig contains a config of DAG
 */
 message GraphConfig {
    int32 num_layers = 1; /// Number of layers
    repeated int32 input_sizes = 2; /// Dimensions of input size
    repeated int32 output_sizes = 3; /// Dimensions of output size
}

/**
 * Config for operations in DAG
 */
 message Operation {
     string operation_type = 1; /// Type of operation in DAG
      /** 
     * List of ParameterSpec
     */
     message ParameterSpecs {
        repeated ParameterSpec parameters = 1; 
    }
    ParameterSpecs parameter_specs = 2;
}

/**
 * Spec of a Experiment. Experiment represents a single optimization run over a feasible space. 
 * Each Experiment contains a configuration describing the feasible space, as well as a set of Trials.
 * It is assumed that objective function f(x) does not change in the course of a Experiment.
 */
message ExperimentSpec {
     /** 
     * List of ParameterSpec
     */
    message ParameterSpecs {
        repeated ParameterSpec parameters = 1; 
    }
    ParameterSpecs parameter_specs = 1;
    ObjectiveSpec objective = 2; 
    AlgorithmSpec algorithm = 3;
    string trial_template = 4;
    string metrics_collector_spec = 5;
    int32 parallel_trial_count = 6;
    int32 max_trial_count = 7;
    NasConfig nas_config = 8;
}

message ExperimentStatus {
    enum ExperimentConditionType {
        CREATED = 0;
        RUNNING = 1;
        RESTARTING = 2;
        SUCCEEDED = 3;
        FAILED = 4;
    }
    string start_time = 1; /// RFC3339 format
    string completion_time = 2; /// RFC3339 format
    ExperimentConditionType condition = 3;
}

message Experiment {
    string name = 1; /// Name of Experiment. This is unique in DB.
    ExperimentSpec experiment_spec = 2;
    ExperimentStatus experiment_status = 3;
}

message ParameterAssignment {
    string name = 1;
    string value = 2;
}

message Metric {
    string name = 1;
    string value = 2;
}

message MetricLog {
    string time_stamp = 1; /// RFC3339 format
    Metric metric = 2;
}

message Observation {
    repeated Metric metrics = 1;
}

message ObservationLog {
    repeated MetricLog metric_logs = 1;
}

message TrialSpec {
     /** 
     * List of ParameterAssignment
     */
    message ParameterAssignments{
        repeated ParameterAssignment assignments = 1;
    }
    string experiment_name = 1;
    ObjectiveSpec objective = 2;
    ParameterAssignments parameter_assignments = 3;
    string run_spec = 4;
    string metrics_collector_spec = 5;
}

message TrialStatus {
    enum TrialConditionType {
        PENDING = 0;
        RUNNING = 1;
        COMPLETED = 2;
        KILLED = 3;
        FAILED = 4;
    }
    string start_time = 1; /// RFC3339 format
    string completion_time = 2; /// RFC3339 format
    TrialConditionType condition = 3;
    Observation observation = 4; /// The best observation in logs.
}

message Trial {
    string name = 1;
    TrialSpec spec = 2;
    TrialStatus status = 3;
}

message RegisterExperimentRequest {
    Experiment experiment = 1;
}

message RegisterExperimentReply {
}

message DeleteExperimentRequest {
    string experiment_name = 1;
}

message DeleteExperimentReply {
}

message GetExperimentRequest {
    string experiment_name = 1;
}

message GetExperimentReply {
    Experiment experiment = 1;
}

message ExperimentSummary {
    string experiment_name = 1;
    ExperimentStatus status = 2;
}

message GetExperimentListRequest {
}

message GetExperimentListReply {
    repeated ExperimentSummary experiment_summaries = 1;
}

message UpdateExperimentStatusRequest {
    string experiment_name = 1;
    ExperimentStatus new_status = 2;
}

message UpdateExperimentStatusReply {
}

message UpdateAlgorithmExtraSettingsRequest {
    string experiment_name = 1;
    repeated AlgorithmSetting extra_algorithm_settings = 2;
}

message UpdateAlgorithmExtraSettingsReply {
}

message GetAlgorithmExtraSettingsRequest {
    string experiment_name = 1;
}

message GetAlgorithmExtraSettingsReply {
    repeated AlgorithmSetting extra_algorithm_settings = 1;
}

message RegisterTrialRequest {
    Trial trial = 1;
}

message RegisterTrialReply {
}

message DeleteTrialRequest {
    string trial_name = 1;
}

message DeleteTrialReply {
}

message GetTrialListRequest {
    string experiment_name = 1;
    string filter = 2;
}

message GetTrialListReply {
    repeated Trial trials = 1;
}

message GetTrialRequest {
    string trial_name = 1;
}

message GetTrialReply {
    Trial trial = 1;
}

message UpdateTrialStatusRequest {
    string trial_name = 1;
    TrialStatus new_status = 2;
}

message UpdateTrialStatusReply {
}

message ReportObservationLogRequest {
    string trial_name = 1;
    ObservationLog observation_log = 2;
}

message ReportObservationLogReply {
}

message GetObservationLogRequest {
    string trial_name = 1;
    string start_time = 2; ///The start of the time range. RFC3339 format
    string end_time = 3; ///The end of the time range. RFC3339 format
}

message GetObservationLogReply {
    ObservationLog observation_log = 1;
}

message GetSuggestionsRequest {
    string experiment_name = 1;
    string algorithm_name = 2;
    int32 request_number = 3; ///The number of Suggestion you request at one time. When you set 3 to request_number, you can get three Suggestions at one time.
}

message GetSuggestionsReply {
    repeated Trial trials = 1;
}

message ValidateAlgorithmSettingsRequest {
    ExperimentSpec experiment_spec = 1;
    string algorithm_name = 2;
}

/**
 * Return INVALID_ARGUMENT Error if Algorithm Settings are not Valid
 */
message ValidateAlgorithmSettingsReply {
}
