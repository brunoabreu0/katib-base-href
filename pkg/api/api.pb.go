// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	FeasibleSpace
	ParameterConfig
	Parameter
	Metrics
	EvaluationLog
	SuggestionParameter
	EarlyStoppingParameter
	Tag
	MountConf
	Trial
	StudyConfig
	CreateStudyRequest
	CreateStudyReply
	StopStudyRequest
	StopStudyReply
	GetStudiesRequest
	StudyInfo
	GetStudiesReply
	SuggestTrialsRequest
	SuggestTrialsReply
	CompleteTrialRequest
	CompleteTrialReply
	EarlyStoppingRequest
	EarlyStoppingReply
	GetObjectValueRequest
	GetObjectValueReply
	AddMeasurementToTrialsRequest
	AddMeasurementToTrialsReply
	StudyOverview
	ModelInfo
	DataSetInfo
	SaveStudyRequest
	SaveStudyReply
	SaveModelRequest
	SaveModelReply
	GetSavedStudiesRequest
	GetSavedStudiesReply
	GetSavedModelsRequest
	GetSavedModelsReply
	GetSavedModelRequest
	GetSavedModelReply
	InitializeSuggestServiceRequest
	InitializeSuggestServiceReply
	GenerateTrialsRequest
	GenerateTrialsReply
	SetSuggestionParametersRequest
	SetSuggestionParametersReply
	StopSuggestionRequest
	StopSuggestionReply
	ShouldTrialStopRequest
	ShouldTrialStopReply
	SetEarlyStoppingParameterRequest
	SetEarlyStoppingParameterReply
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ParameterType int32

const (
	// Not used
	ParameterType_UNKNOWN_TYPE ParameterType = 0
	ParameterType_DOUBLE       ParameterType = 1
	ParameterType_INT          ParameterType = 2
	ParameterType_DISCRETE     ParameterType = 3
	ParameterType_CATEGORICAL  ParameterType = 4
)

var ParameterType_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "DOUBLE",
	2: "INT",
	3: "DISCRETE",
	4: "CATEGORICAL",
}
var ParameterType_value = map[string]int32{
	"UNKNOWN_TYPE": 0,
	"DOUBLE":       1,
	"INT":          2,
	"DISCRETE":     3,
	"CATEGORICAL":  4,
}

func (x ParameterType) String() string {
	return proto.EnumName(ParameterType_name, int32(x))
}
func (ParameterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OptimizationType int32

const (
	// Not used
	OptimizationType_UNKNOWN_OPTIMIZATION OptimizationType = 0
	OptimizationType_MINIMIZE             OptimizationType = 1
	OptimizationType_MAXIMIZE             OptimizationType = 2
)

var OptimizationType_name = map[int32]string{
	0: "UNKNOWN_OPTIMIZATION",
	1: "MINIMIZE",
	2: "MAXIMIZE",
}
var OptimizationType_value = map[string]int32{
	"UNKNOWN_OPTIMIZATION": 0,
	"MINIMIZE":             1,
	"MAXIMIZE":             2,
}

func (x OptimizationType) String() string {
	return proto.EnumName(OptimizationType_name, int32(x))
}
func (OptimizationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// This value is stored as TINYINT in MySQL.
type TrialState int32

const (
	TrialState_PENDING   TrialState = 0
	TrialState_RUNNING   TrialState = 1
	TrialState_COMPLETED TrialState = 2
	TrialState_KILLED    TrialState = 3
	TrialState_ERROR     TrialState = 120
)

var TrialState_name = map[int32]string{
	0:   "PENDING",
	1:   "RUNNING",
	2:   "COMPLETED",
	3:   "KILLED",
	120: "ERROR",
}
var TrialState_value = map[string]int32{
	"PENDING":   0,
	"RUNNING":   1,
	"COMPLETED": 2,
	"KILLED":    3,
	"ERROR":     120,
}

func (x TrialState) String() string {
	return proto.EnumName(TrialState_name, int32(x))
}
func (TrialState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type FeasibleSpace struct {
	Max  string   `protobuf:"bytes,1,opt,name=max" json:"max,omitempty"`
	Min  string   `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
	List []string `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
}

func (m *FeasibleSpace) Reset()                    { *m = FeasibleSpace{} }
func (m *FeasibleSpace) String() string            { return proto.CompactTextString(m) }
func (*FeasibleSpace) ProtoMessage()               {}
func (*FeasibleSpace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FeasibleSpace) GetMax() string {
	if m != nil {
		return m.Max
	}
	return ""
}

func (m *FeasibleSpace) GetMin() string {
	if m != nil {
		return m.Min
	}
	return ""
}

func (m *FeasibleSpace) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

type ParameterConfig struct {
	Name          string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ParameterType ParameterType `protobuf:"varint,2,opt,name=parameter_type,json=parameterType,enum=api.ParameterType" json:"parameter_type,omitempty"`
	// The following values defines a feasible parameter space.
	Feasible *FeasibleSpace `protobuf:"bytes,3,opt,name=feasible" json:"feasible,omitempty"`
}

func (m *ParameterConfig) Reset()                    { *m = ParameterConfig{} }
func (m *ParameterConfig) String() string            { return proto.CompactTextString(m) }
func (*ParameterConfig) ProtoMessage()               {}
func (*ParameterConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ParameterConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParameterConfig) GetParameterType() ParameterType {
	if m != nil {
		return m.ParameterType
	}
	return ParameterType_UNKNOWN_TYPE
}

func (m *ParameterConfig) GetFeasible() *FeasibleSpace {
	if m != nil {
		return m.Feasible
	}
	return nil
}

type Parameter struct {
	Name          string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ParameterType ParameterType `protobuf:"varint,2,opt,name=parameter_type,json=parameterType,enum=api.ParameterType" json:"parameter_type,omitempty"`
	Value         string        `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Parameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Parameter) GetParameterType() ParameterType {
	if m != nil {
		return m.ParameterType
	}
	return ParameterType_UNKNOWN_TYPE
}

func (m *Parameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Metrics struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Metrics) Reset()                    { *m = Metrics{} }
func (m *Metrics) String() string            { return proto.CompactTextString(m) }
func (*Metrics) ProtoMessage()               {}
func (*Metrics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Metrics) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metrics) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EvaluationLog struct {
	Time    string     `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Metrics []*Metrics `protobuf:"bytes,2,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *EvaluationLog) Reset()                    { *m = EvaluationLog{} }
func (m *EvaluationLog) String() string            { return proto.CompactTextString(m) }
func (*EvaluationLog) ProtoMessage()               {}
func (*EvaluationLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EvaluationLog) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *EvaluationLog) GetMetrics() []*Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type SuggestionParameter struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SuggestionParameter) Reset()                    { *m = SuggestionParameter{} }
func (m *SuggestionParameter) String() string            { return proto.CompactTextString(m) }
func (*SuggestionParameter) ProtoMessage()               {}
func (*SuggestionParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SuggestionParameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SuggestionParameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EarlyStoppingParameter struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *EarlyStoppingParameter) Reset()                    { *m = EarlyStoppingParameter{} }
func (m *EarlyStoppingParameter) String() string            { return proto.CompactTextString(m) }
func (*EarlyStoppingParameter) ProtoMessage()               {}
func (*EarlyStoppingParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EarlyStoppingParameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EarlyStoppingParameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Tag struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MountConf struct {
	Pvc  string `protobuf:"bytes,1,opt,name=pvc" json:"pvc,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *MountConf) Reset()                    { *m = MountConf{} }
func (m *MountConf) String() string            { return proto.CompactTextString(m) }
func (*MountConf) ProtoMessage()               {}
func (*MountConf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MountConf) GetPvc() string {
	if m != nil {
		return m.Pvc
	}
	return ""
}

func (m *MountConf) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Trial struct {
	TrialId        string           `protobuf:"bytes,1,opt,name=trial_id,json=trialId" json:"trial_id,omitempty"`
	StudyId        string           `protobuf:"bytes,2,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
	ParameterSet   []*Parameter     `protobuf:"bytes,3,rep,name=parameter_set,json=parameterSet" json:"parameter_set,omitempty"`
	Status         TrialState       `protobuf:"varint,4,opt,name=status,enum=api.TrialState" json:"status,omitempty"`
	EvalLogs       []*EvaluationLog `protobuf:"bytes,5,rep,name=eval_logs,json=evalLogs" json:"eval_logs,omitempty"`
	ObjectiveValue string           `protobuf:"bytes,6,opt,name=objective_value,json=objectiveValue" json:"objective_value,omitempty"`
	Tags           []*Tag           `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
}

func (m *Trial) Reset()                    { *m = Trial{} }
func (m *Trial) String() string            { return proto.CompactTextString(m) }
func (*Trial) ProtoMessage()               {}
func (*Trial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Trial) GetTrialId() string {
	if m != nil {
		return m.TrialId
	}
	return ""
}

func (m *Trial) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *Trial) GetParameterSet() []*Parameter {
	if m != nil {
		return m.ParameterSet
	}
	return nil
}

func (m *Trial) GetStatus() TrialState {
	if m != nil {
		return m.Status
	}
	return TrialState_PENDING
}

func (m *Trial) GetEvalLogs() []*EvaluationLog {
	if m != nil {
		return m.EvalLogs
	}
	return nil
}

func (m *Trial) GetObjectiveValue() string {
	if m != nil {
		return m.ObjectiveValue
	}
	return ""
}

func (m *Trial) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type StudyConfig struct {
	Name                    string                        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Owner                   string                        `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	OptimizationType        OptimizationType              `protobuf:"varint,3,opt,name=optimization_type,json=optimizationType,enum=api.OptimizationType" json:"optimization_type,omitempty"`
	OptimizationGoal        float64                       `protobuf:"fixed64,4,opt,name=optimization_goal,json=optimizationGoal" json:"optimization_goal,omitempty"`
	ParameterConfigs        *StudyConfig_ParameterConfigs `protobuf:"bytes,5,opt,name=parameter_configs,json=parameterConfigs" json:"parameter_configs,omitempty"`
	AccessPermissions       []string                      `protobuf:"bytes,6,rep,name=access_permissions,json=accessPermissions" json:"access_permissions,omitempty"`
	SuggestAlgorithm        string                        `protobuf:"bytes,7,opt,name=suggest_algorithm,json=suggestAlgorithm" json:"suggest_algorithm,omitempty"`
	EarlyStoppingAlgorithm  string                        `protobuf:"bytes,8,opt,name=early_stopping_algorithm,json=earlyStoppingAlgorithm" json:"early_stopping_algorithm,omitempty"`
	StudyTaskName           string                        `protobuf:"bytes,9,opt,name=study_task_name,json=studyTaskName" json:"study_task_name,omitempty"`
	SuggestionParameters    []*SuggestionParameter        `protobuf:"bytes,10,rep,name=suggestion_parameters,json=suggestionParameters" json:"suggestion_parameters,omitempty"`
	EarlyStoppingParameters []*EarlyStoppingParameter     `protobuf:"bytes,11,rep,name=early_stopping_parameters,json=earlyStoppingParameters" json:"early_stopping_parameters,omitempty"`
	Tags                    []*Tag                        `protobuf:"bytes,12,rep,name=tags" json:"tags,omitempty"`
	ObjectiveValueName      string                        `protobuf:"bytes,13,opt,name=objective_value_name,json=objectiveValueName" json:"objective_value_name,omitempty"`
	Metrics                 []string                      `protobuf:"bytes,14,rep,name=metrics" json:"metrics,omitempty"`
	Image                   string                        `protobuf:"bytes,15,opt,name=image" json:"image,omitempty"`
	Command                 []string                      `protobuf:"bytes,16,rep,name=command" json:"command,omitempty"`
	Gpu                     int32                         `protobuf:"varint,17,opt,name=gpu" json:"gpu,omitempty"`
	Scheduler               string                        `protobuf:"bytes,18,opt,name=scheduler" json:"scheduler,omitempty"`
	Mount                   *MountConf                    `protobuf:"bytes,19,opt,name=mount" json:"mount,omitempty"`
	PullSecret              string                        `protobuf:"bytes,20,opt,name=pull_secret,json=pullSecret" json:"pull_secret,omitempty"`
}

func (m *StudyConfig) Reset()                    { *m = StudyConfig{} }
func (m *StudyConfig) String() string            { return proto.CompactTextString(m) }
func (*StudyConfig) ProtoMessage()               {}
func (*StudyConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StudyConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StudyConfig) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *StudyConfig) GetOptimizationType() OptimizationType {
	if m != nil {
		return m.OptimizationType
	}
	return OptimizationType_UNKNOWN_OPTIMIZATION
}

func (m *StudyConfig) GetOptimizationGoal() float64 {
	if m != nil {
		return m.OptimizationGoal
	}
	return 0
}

func (m *StudyConfig) GetParameterConfigs() *StudyConfig_ParameterConfigs {
	if m != nil {
		return m.ParameterConfigs
	}
	return nil
}

func (m *StudyConfig) GetAccessPermissions() []string {
	if m != nil {
		return m.AccessPermissions
	}
	return nil
}

func (m *StudyConfig) GetSuggestAlgorithm() string {
	if m != nil {
		return m.SuggestAlgorithm
	}
	return ""
}

func (m *StudyConfig) GetEarlyStoppingAlgorithm() string {
	if m != nil {
		return m.EarlyStoppingAlgorithm
	}
	return ""
}

func (m *StudyConfig) GetStudyTaskName() string {
	if m != nil {
		return m.StudyTaskName
	}
	return ""
}

func (m *StudyConfig) GetSuggestionParameters() []*SuggestionParameter {
	if m != nil {
		return m.SuggestionParameters
	}
	return nil
}

func (m *StudyConfig) GetEarlyStoppingParameters() []*EarlyStoppingParameter {
	if m != nil {
		return m.EarlyStoppingParameters
	}
	return nil
}

func (m *StudyConfig) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *StudyConfig) GetObjectiveValueName() string {
	if m != nil {
		return m.ObjectiveValueName
	}
	return ""
}

func (m *StudyConfig) GetMetrics() []string {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *StudyConfig) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *StudyConfig) GetCommand() []string {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *StudyConfig) GetGpu() int32 {
	if m != nil {
		return m.Gpu
	}
	return 0
}

func (m *StudyConfig) GetScheduler() string {
	if m != nil {
		return m.Scheduler
	}
	return ""
}

func (m *StudyConfig) GetMount() *MountConf {
	if m != nil {
		return m.Mount
	}
	return nil
}

func (m *StudyConfig) GetPullSecret() string {
	if m != nil {
		return m.PullSecret
	}
	return ""
}

type StudyConfig_ParameterConfigs struct {
	Configs []*ParameterConfig `protobuf:"bytes,1,rep,name=configs" json:"configs,omitempty"`
}

func (m *StudyConfig_ParameterConfigs) Reset()         { *m = StudyConfig_ParameterConfigs{} }
func (m *StudyConfig_ParameterConfigs) String() string { return proto.CompactTextString(m) }
func (*StudyConfig_ParameterConfigs) ProtoMessage()    {}
func (*StudyConfig_ParameterConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0}
}

func (m *StudyConfig_ParameterConfigs) GetConfigs() []*ParameterConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

type CreateStudyRequest struct {
	StudyConfig *StudyConfig `protobuf:"bytes,1,opt,name=study_config,json=studyConfig" json:"study_config,omitempty"`
}

func (m *CreateStudyRequest) Reset()                    { *m = CreateStudyRequest{} }
func (m *CreateStudyRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateStudyRequest) ProtoMessage()               {}
func (*CreateStudyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CreateStudyRequest) GetStudyConfig() *StudyConfig {
	if m != nil {
		return m.StudyConfig
	}
	return nil
}

type CreateStudyReply struct {
	StudyId string `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
}

func (m *CreateStudyReply) Reset()                    { *m = CreateStudyReply{} }
func (m *CreateStudyReply) String() string            { return proto.CompactTextString(m) }
func (*CreateStudyReply) ProtoMessage()               {}
func (*CreateStudyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateStudyReply) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

type StopStudyRequest struct {
	StudyId string `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
}

func (m *StopStudyRequest) Reset()                    { *m = StopStudyRequest{} }
func (m *StopStudyRequest) String() string            { return proto.CompactTextString(m) }
func (*StopStudyRequest) ProtoMessage()               {}
func (*StopStudyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *StopStudyRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

type StopStudyReply struct {
}

func (m *StopStudyReply) Reset()                    { *m = StopStudyReply{} }
func (m *StopStudyReply) String() string            { return proto.CompactTextString(m) }
func (*StopStudyReply) ProtoMessage()               {}
func (*StopStudyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type GetStudiesRequest struct {
}

func (m *GetStudiesRequest) Reset()                    { *m = GetStudiesRequest{} }
func (m *GetStudiesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStudiesRequest) ProtoMessage()               {}
func (*GetStudiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type StudyInfo struct {
	StudyId           string `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
	Name              string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Owner             string `protobuf:"bytes,3,opt,name=owner" json:"owner,omitempty"`
	RunningTrialNum   int32  `protobuf:"varint,4,opt,name=running_trial_num,json=runningTrialNum" json:"running_trial_num,omitempty"`
	CompletedTrialNum int32  `protobuf:"varint,5,opt,name=completed_trial_num,json=completedTrialNum" json:"completed_trial_num,omitempty"`
}

func (m *StudyInfo) Reset()                    { *m = StudyInfo{} }
func (m *StudyInfo) String() string            { return proto.CompactTextString(m) }
func (*StudyInfo) ProtoMessage()               {}
func (*StudyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *StudyInfo) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *StudyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StudyInfo) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *StudyInfo) GetRunningTrialNum() int32 {
	if m != nil {
		return m.RunningTrialNum
	}
	return 0
}

func (m *StudyInfo) GetCompletedTrialNum() int32 {
	if m != nil {
		return m.CompletedTrialNum
	}
	return 0
}

type GetStudiesReply struct {
	StudyInfos []*StudyInfo `protobuf:"bytes,1,rep,name=study_infos,json=studyInfos" json:"study_infos,omitempty"`
}

func (m *GetStudiesReply) Reset()                    { *m = GetStudiesReply{} }
func (m *GetStudiesReply) String() string            { return proto.CompactTextString(m) }
func (*GetStudiesReply) ProtoMessage()               {}
func (*GetStudiesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetStudiesReply) GetStudyInfos() []*StudyInfo {
	if m != nil {
		return m.StudyInfos
	}
	return nil
}

type SuggestTrialsRequest struct {
	StudyId          string       `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
	SuggestAlgorithm string       `protobuf:"bytes,2,opt,name=suggest_algorithm,json=suggestAlgorithm" json:"suggest_algorithm,omitempty"`
	Configs          *StudyConfig `protobuf:"bytes,3,opt,name=configs" json:"configs,omitempty"`
}

func (m *SuggestTrialsRequest) Reset()                    { *m = SuggestTrialsRequest{} }
func (m *SuggestTrialsRequest) String() string            { return proto.CompactTextString(m) }
func (*SuggestTrialsRequest) ProtoMessage()               {}
func (*SuggestTrialsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SuggestTrialsRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *SuggestTrialsRequest) GetSuggestAlgorithm() string {
	if m != nil {
		return m.SuggestAlgorithm
	}
	return ""
}

func (m *SuggestTrialsRequest) GetConfigs() *StudyConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

type SuggestTrialsReply struct {
	Trials    []*Trial `protobuf:"bytes,1,rep,name=trials" json:"trials,omitempty"`
	Completed bool     `protobuf:"varint,2,opt,name=completed" json:"completed,omitempty"`
}

func (m *SuggestTrialsReply) Reset()                    { *m = SuggestTrialsReply{} }
func (m *SuggestTrialsReply) String() string            { return proto.CompactTextString(m) }
func (*SuggestTrialsReply) ProtoMessage()               {}
func (*SuggestTrialsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SuggestTrialsReply) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

func (m *SuggestTrialsReply) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type CompleteTrialRequest struct {
	StudyId    string `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
	TrialId    string `protobuf:"bytes,2,opt,name=trial_id,json=trialId" json:"trial_id,omitempty"`
	IsComplete bool   `protobuf:"varint,3,opt,name=is_complete,json=isComplete" json:"is_complete,omitempty"`
}

func (m *CompleteTrialRequest) Reset()                    { *m = CompleteTrialRequest{} }
func (m *CompleteTrialRequest) String() string            { return proto.CompactTextString(m) }
func (*CompleteTrialRequest) ProtoMessage()               {}
func (*CompleteTrialRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CompleteTrialRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *CompleteTrialRequest) GetTrialId() string {
	if m != nil {
		return m.TrialId
	}
	return ""
}

func (m *CompleteTrialRequest) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

type CompleteTrialReply struct {
}

func (m *CompleteTrialReply) Reset()                    { *m = CompleteTrialReply{} }
func (m *CompleteTrialReply) String() string            { return proto.CompactTextString(m) }
func (*CompleteTrialReply) ProtoMessage()               {}
func (*CompleteTrialReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type EarlyStoppingRequest struct {
	StudyId                string `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
	EarlyStoppingAlgorithm string `protobuf:"bytes,2,opt,name=early_stopping_algorithm,json=earlyStoppingAlgorithm" json:"early_stopping_algorithm,omitempty"`
}

func (m *EarlyStoppingRequest) Reset()                    { *m = EarlyStoppingRequest{} }
func (m *EarlyStoppingRequest) String() string            { return proto.CompactTextString(m) }
func (*EarlyStoppingRequest) ProtoMessage()               {}
func (*EarlyStoppingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *EarlyStoppingRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *EarlyStoppingRequest) GetEarlyStoppingAlgorithm() string {
	if m != nil {
		return m.EarlyStoppingAlgorithm
	}
	return ""
}

type EarlyStoppingReply struct {
	Trials []*Trial `protobuf:"bytes,1,rep,name=trials" json:"trials,omitempty"`
}

func (m *EarlyStoppingReply) Reset()                    { *m = EarlyStoppingReply{} }
func (m *EarlyStoppingReply) String() string            { return proto.CompactTextString(m) }
func (*EarlyStoppingReply) ProtoMessage()               {}
func (*EarlyStoppingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *EarlyStoppingReply) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

type GetObjectValueRequest struct {
	WorkerId string `protobuf:"bytes,1,opt,name=worker_id,json=workerId" json:"worker_id,omitempty"`
}

func (m *GetObjectValueRequest) Reset()                    { *m = GetObjectValueRequest{} }
func (m *GetObjectValueRequest) String() string            { return proto.CompactTextString(m) }
func (*GetObjectValueRequest) ProtoMessage()               {}
func (*GetObjectValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GetObjectValueRequest) GetWorkerId() string {
	if m != nil {
		return m.WorkerId
	}
	return ""
}

type GetObjectValueReply struct {
	Trials []*Trial `protobuf:"bytes,1,rep,name=trials" json:"trials,omitempty"`
}

func (m *GetObjectValueReply) Reset()                    { *m = GetObjectValueReply{} }
func (m *GetObjectValueReply) String() string            { return proto.CompactTextString(m) }
func (*GetObjectValueReply) ProtoMessage()               {}
func (*GetObjectValueReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *GetObjectValueReply) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

type AddMeasurementToTrialsRequest struct {
	StudyId string `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
	// metrics can be a json string
	Metrics string `protobuf:"bytes,2,opt,name=metrics" json:"metrics,omitempty"`
}

func (m *AddMeasurementToTrialsRequest) Reset()                    { *m = AddMeasurementToTrialsRequest{} }
func (m *AddMeasurementToTrialsRequest) String() string            { return proto.CompactTextString(m) }
func (*AddMeasurementToTrialsRequest) ProtoMessage()               {}
func (*AddMeasurementToTrialsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *AddMeasurementToTrialsRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *AddMeasurementToTrialsRequest) GetMetrics() string {
	if m != nil {
		return m.Metrics
	}
	return ""
}

type AddMeasurementToTrialsReply struct {
}

func (m *AddMeasurementToTrialsReply) Reset()                    { *m = AddMeasurementToTrialsReply{} }
func (m *AddMeasurementToTrialsReply) String() string            { return proto.CompactTextString(m) }
func (*AddMeasurementToTrialsReply) ProtoMessage()               {}
func (*AddMeasurementToTrialsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type StudyOverview struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Owner       string `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *StudyOverview) Reset()                    { *m = StudyOverview{} }
func (m *StudyOverview) String() string            { return proto.CompactTextString(m) }
func (*StudyOverview) ProtoMessage()               {}
func (*StudyOverview) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *StudyOverview) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StudyOverview) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *StudyOverview) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ModelInfo struct {
	StudyName  string       `protobuf:"bytes,1,opt,name=study_name,json=studyName" json:"study_name,omitempty"`
	TrialId    string       `protobuf:"bytes,2,opt,name=trial_id,json=trialId" json:"trial_id,omitempty"`
	Parameters []*Parameter `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty"`
	Metrics    []*Metrics   `protobuf:"bytes,4,rep,name=metrics" json:"metrics,omitempty"`
	ModelPath  string       `protobuf:"bytes,5,opt,name=model_path,json=modelPath" json:"model_path,omitempty"`
}

func (m *ModelInfo) Reset()                    { *m = ModelInfo{} }
func (m *ModelInfo) String() string            { return proto.CompactTextString(m) }
func (*ModelInfo) ProtoMessage()               {}
func (*ModelInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ModelInfo) GetStudyName() string {
	if m != nil {
		return m.StudyName
	}
	return ""
}

func (m *ModelInfo) GetTrialId() string {
	if m != nil {
		return m.TrialId
	}
	return ""
}

func (m *ModelInfo) GetParameters() []*Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *ModelInfo) GetMetrics() []*Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *ModelInfo) GetModelPath() string {
	if m != nil {
		return m.ModelPath
	}
	return ""
}

type DataSetInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *DataSetInfo) Reset()                    { *m = DataSetInfo{} }
func (m *DataSetInfo) String() string            { return proto.CompactTextString(m) }
func (*DataSetInfo) ProtoMessage()               {}
func (*DataSetInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DataSetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DataSetInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SaveStudyRequest struct {
	StudyName string `protobuf:"bytes,1,opt,name=study_name,json=studyName" json:"study_name,omitempty"`
	Author    string `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
}

func (m *SaveStudyRequest) Reset()                    { *m = SaveStudyRequest{} }
func (m *SaveStudyRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveStudyRequest) ProtoMessage()               {}
func (*SaveStudyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *SaveStudyRequest) GetStudyName() string {
	if m != nil {
		return m.StudyName
	}
	return ""
}

func (m *SaveStudyRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type SaveStudyReply struct {
}

func (m *SaveStudyReply) Reset()                    { *m = SaveStudyReply{} }
func (m *SaveStudyReply) String() string            { return proto.CompactTextString(m) }
func (*SaveStudyReply) ProtoMessage()               {}
func (*SaveStudyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

type SaveModelRequest struct {
	Model   *ModelInfo   `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
	DataSet *DataSetInfo `protobuf:"bytes,2,opt,name=data_set,json=dataSet" json:"data_set,omitempty"`
}

func (m *SaveModelRequest) Reset()                    { *m = SaveModelRequest{} }
func (m *SaveModelRequest) String() string            { return proto.CompactTextString(m) }
func (*SaveModelRequest) ProtoMessage()               {}
func (*SaveModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *SaveModelRequest) GetModel() *ModelInfo {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *SaveModelRequest) GetDataSet() *DataSetInfo {
	if m != nil {
		return m.DataSet
	}
	return nil
}

type SaveModelReply struct {
}

func (m *SaveModelReply) Reset()                    { *m = SaveModelReply{} }
func (m *SaveModelReply) String() string            { return proto.CompactTextString(m) }
func (*SaveModelReply) ProtoMessage()               {}
func (*SaveModelReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type GetSavedStudiesRequest struct {
}

func (m *GetSavedStudiesRequest) Reset()                    { *m = GetSavedStudiesRequest{} }
func (m *GetSavedStudiesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSavedStudiesRequest) ProtoMessage()               {}
func (*GetSavedStudiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

type GetSavedStudiesReply struct {
	Studies []*StudyOverview `protobuf:"bytes,1,rep,name=studies" json:"studies,omitempty"`
}

func (m *GetSavedStudiesReply) Reset()                    { *m = GetSavedStudiesReply{} }
func (m *GetSavedStudiesReply) String() string            { return proto.CompactTextString(m) }
func (*GetSavedStudiesReply) ProtoMessage()               {}
func (*GetSavedStudiesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *GetSavedStudiesReply) GetStudies() []*StudyOverview {
	if m != nil {
		return m.Studies
	}
	return nil
}

type GetSavedModelsRequest struct {
	StudyName string `protobuf:"bytes,1,opt,name=study_name,json=studyName" json:"study_name,omitempty"`
}

func (m *GetSavedModelsRequest) Reset()                    { *m = GetSavedModelsRequest{} }
func (m *GetSavedModelsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSavedModelsRequest) ProtoMessage()               {}
func (*GetSavedModelsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *GetSavedModelsRequest) GetStudyName() string {
	if m != nil {
		return m.StudyName
	}
	return ""
}

type GetSavedModelsReply struct {
	Models []*ModelInfo `protobuf:"bytes,1,rep,name=models" json:"models,omitempty"`
}

func (m *GetSavedModelsReply) Reset()                    { *m = GetSavedModelsReply{} }
func (m *GetSavedModelsReply) String() string            { return proto.CompactTextString(m) }
func (*GetSavedModelsReply) ProtoMessage()               {}
func (*GetSavedModelsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *GetSavedModelsReply) GetModels() []*ModelInfo {
	if m != nil {
		return m.Models
	}
	return nil
}

type GetSavedModelRequest struct {
	StudyName string `protobuf:"bytes,1,opt,name=study_name,json=studyName" json:"study_name,omitempty"`
	TrialId   string `protobuf:"bytes,2,opt,name=trial_id,json=trialId" json:"trial_id,omitempty"`
}

func (m *GetSavedModelRequest) Reset()                    { *m = GetSavedModelRequest{} }
func (m *GetSavedModelRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSavedModelRequest) ProtoMessage()               {}
func (*GetSavedModelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *GetSavedModelRequest) GetStudyName() string {
	if m != nil {
		return m.StudyName
	}
	return ""
}

func (m *GetSavedModelRequest) GetTrialId() string {
	if m != nil {
		return m.TrialId
	}
	return ""
}

type GetSavedModelReply struct {
	Model *ModelInfo `protobuf:"bytes,1,opt,name=model" json:"model,omitempty"`
}

func (m *GetSavedModelReply) Reset()                    { *m = GetSavedModelReply{} }
func (m *GetSavedModelReply) String() string            { return proto.CompactTextString(m) }
func (*GetSavedModelReply) ProtoMessage()               {}
func (*GetSavedModelReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *GetSavedModelReply) GetModel() *ModelInfo {
	if m != nil {
		return m.Model
	}
	return nil
}

type InitializeSuggestServiceRequest struct {
	StudyId              string                 `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
	SuggestAlgorithm     string                 `protobuf:"bytes,2,opt,name=suggest_algorithm,json=suggestAlgorithm" json:"suggest_algorithm,omitempty"`
	SuggestionParameters []*SuggestionParameter `protobuf:"bytes,3,rep,name=suggestion_parameters,json=suggestionParameters" json:"suggestion_parameters,omitempty"`
	Configs              *StudyConfig           `protobuf:"bytes,4,opt,name=configs" json:"configs,omitempty"`
}

func (m *InitializeSuggestServiceRequest) Reset()         { *m = InitializeSuggestServiceRequest{} }
func (m *InitializeSuggestServiceRequest) String() string { return proto.CompactTextString(m) }
func (*InitializeSuggestServiceRequest) ProtoMessage()    {}
func (*InitializeSuggestServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{41}
}

func (m *InitializeSuggestServiceRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *InitializeSuggestServiceRequest) GetSuggestAlgorithm() string {
	if m != nil {
		return m.SuggestAlgorithm
	}
	return ""
}

func (m *InitializeSuggestServiceRequest) GetSuggestionParameters() []*SuggestionParameter {
	if m != nil {
		return m.SuggestionParameters
	}
	return nil
}

func (m *InitializeSuggestServiceRequest) GetConfigs() *StudyConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

type InitializeSuggestServiceReply struct {
}

func (m *InitializeSuggestServiceReply) Reset()                    { *m = InitializeSuggestServiceReply{} }
func (m *InitializeSuggestServiceReply) String() string            { return proto.CompactTextString(m) }
func (*InitializeSuggestServiceReply) ProtoMessage()               {}
func (*InitializeSuggestServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

type GenerateTrialsRequest struct {
	StudyId         string       `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
	Configs         *StudyConfig `protobuf:"bytes,2,opt,name=configs" json:"configs,omitempty"`
	CompletedTrials []*Trial     `protobuf:"bytes,3,rep,name=completed_trials,json=completedTrials" json:"completed_trials,omitempty"`
	RunningTrials   []*Trial     `protobuf:"bytes,4,rep,name=running_trials,json=runningTrials" json:"running_trials,omitempty"`
}

func (m *GenerateTrialsRequest) Reset()                    { *m = GenerateTrialsRequest{} }
func (m *GenerateTrialsRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateTrialsRequest) ProtoMessage()               {}
func (*GenerateTrialsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *GenerateTrialsRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *GenerateTrialsRequest) GetConfigs() *StudyConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *GenerateTrialsRequest) GetCompletedTrials() []*Trial {
	if m != nil {
		return m.CompletedTrials
	}
	return nil
}

func (m *GenerateTrialsRequest) GetRunningTrials() []*Trial {
	if m != nil {
		return m.RunningTrials
	}
	return nil
}

type GenerateTrialsReply struct {
	Trials    []*Trial `protobuf:"bytes,1,rep,name=trials" json:"trials,omitempty"`
	Completed bool     `protobuf:"varint,2,opt,name=completed" json:"completed,omitempty"`
}

func (m *GenerateTrialsReply) Reset()                    { *m = GenerateTrialsReply{} }
func (m *GenerateTrialsReply) String() string            { return proto.CompactTextString(m) }
func (*GenerateTrialsReply) ProtoMessage()               {}
func (*GenerateTrialsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *GenerateTrialsReply) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

func (m *GenerateTrialsReply) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

type SetSuggestionParametersRequest struct {
	StudyId              string                 `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
	SuggestionParameters []*SuggestionParameter `protobuf:"bytes,2,rep,name=suggestion_parameters,json=suggestionParameters" json:"suggestion_parameters,omitempty"`
	Configs              *StudyConfig           `protobuf:"bytes,3,opt,name=configs" json:"configs,omitempty"`
}

func (m *SetSuggestionParametersRequest) Reset()                    { *m = SetSuggestionParametersRequest{} }
func (m *SetSuggestionParametersRequest) String() string            { return proto.CompactTextString(m) }
func (*SetSuggestionParametersRequest) ProtoMessage()               {}
func (*SetSuggestionParametersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *SetSuggestionParametersRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *SetSuggestionParametersRequest) GetSuggestionParameters() []*SuggestionParameter {
	if m != nil {
		return m.SuggestionParameters
	}
	return nil
}

func (m *SetSuggestionParametersRequest) GetConfigs() *StudyConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

type SetSuggestionParametersReply struct {
}

func (m *SetSuggestionParametersReply) Reset()                    { *m = SetSuggestionParametersReply{} }
func (m *SetSuggestionParametersReply) String() string            { return proto.CompactTextString(m) }
func (*SetSuggestionParametersReply) ProtoMessage()               {}
func (*SetSuggestionParametersReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

type StopSuggestionRequest struct {
	StudyId string `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
}

func (m *StopSuggestionRequest) Reset()                    { *m = StopSuggestionRequest{} }
func (m *StopSuggestionRequest) String() string            { return proto.CompactTextString(m) }
func (*StopSuggestionRequest) ProtoMessage()               {}
func (*StopSuggestionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *StopSuggestionRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

type StopSuggestionReply struct {
}

func (m *StopSuggestionReply) Reset()                    { *m = StopSuggestionReply{} }
func (m *StopSuggestionReply) String() string            { return proto.CompactTextString(m) }
func (*StopSuggestionReply) ProtoMessage()               {}
func (*StopSuggestionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

type ShouldTrialStopRequest struct {
	StudyId string `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
}

func (m *ShouldTrialStopRequest) Reset()                    { *m = ShouldTrialStopRequest{} }
func (m *ShouldTrialStopRequest) String() string            { return proto.CompactTextString(m) }
func (*ShouldTrialStopRequest) ProtoMessage()               {}
func (*ShouldTrialStopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *ShouldTrialStopRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

type ShouldTrialStopReply struct {
	Trials []*Trial `protobuf:"bytes,1,rep,name=trials" json:"trials,omitempty"`
}

func (m *ShouldTrialStopReply) Reset()                    { *m = ShouldTrialStopReply{} }
func (m *ShouldTrialStopReply) String() string            { return proto.CompactTextString(m) }
func (*ShouldTrialStopReply) ProtoMessage()               {}
func (*ShouldTrialStopReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *ShouldTrialStopReply) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

type SetEarlyStoppingParameterRequest struct {
	StudyId                 string                    `protobuf:"bytes,1,opt,name=study_id,json=studyId" json:"study_id,omitempty"`
	EarlyStoppingParameters []*EarlyStoppingParameter `protobuf:"bytes,2,rep,name=early_stopping_parameters,json=earlyStoppingParameters" json:"early_stopping_parameters,omitempty"`
}

func (m *SetEarlyStoppingParameterRequest) Reset()         { *m = SetEarlyStoppingParameterRequest{} }
func (m *SetEarlyStoppingParameterRequest) String() string { return proto.CompactTextString(m) }
func (*SetEarlyStoppingParameterRequest) ProtoMessage()    {}
func (*SetEarlyStoppingParameterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{51}
}

func (m *SetEarlyStoppingParameterRequest) GetStudyId() string {
	if m != nil {
		return m.StudyId
	}
	return ""
}

func (m *SetEarlyStoppingParameterRequest) GetEarlyStoppingParameters() []*EarlyStoppingParameter {
	if m != nil {
		return m.EarlyStoppingParameters
	}
	return nil
}

type SetEarlyStoppingParameterReply struct {
}

func (m *SetEarlyStoppingParameterReply) Reset()                    { *m = SetEarlyStoppingParameterReply{} }
func (m *SetEarlyStoppingParameterReply) String() string            { return proto.CompactTextString(m) }
func (*SetEarlyStoppingParameterReply) ProtoMessage()               {}
func (*SetEarlyStoppingParameterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func init() {
	proto.RegisterType((*FeasibleSpace)(nil), "api.FeasibleSpace")
	proto.RegisterType((*ParameterConfig)(nil), "api.ParameterConfig")
	proto.RegisterType((*Parameter)(nil), "api.Parameter")
	proto.RegisterType((*Metrics)(nil), "api.Metrics")
	proto.RegisterType((*EvaluationLog)(nil), "api.EvaluationLog")
	proto.RegisterType((*SuggestionParameter)(nil), "api.SuggestionParameter")
	proto.RegisterType((*EarlyStoppingParameter)(nil), "api.EarlyStoppingParameter")
	proto.RegisterType((*Tag)(nil), "api.Tag")
	proto.RegisterType((*MountConf)(nil), "api.MountConf")
	proto.RegisterType((*Trial)(nil), "api.Trial")
	proto.RegisterType((*StudyConfig)(nil), "api.StudyConfig")
	proto.RegisterType((*StudyConfig_ParameterConfigs)(nil), "api.StudyConfig.ParameterConfigs")
	proto.RegisterType((*CreateStudyRequest)(nil), "api.CreateStudyRequest")
	proto.RegisterType((*CreateStudyReply)(nil), "api.CreateStudyReply")
	proto.RegisterType((*StopStudyRequest)(nil), "api.StopStudyRequest")
	proto.RegisterType((*StopStudyReply)(nil), "api.StopStudyReply")
	proto.RegisterType((*GetStudiesRequest)(nil), "api.GetStudiesRequest")
	proto.RegisterType((*StudyInfo)(nil), "api.StudyInfo")
	proto.RegisterType((*GetStudiesReply)(nil), "api.GetStudiesReply")
	proto.RegisterType((*SuggestTrialsRequest)(nil), "api.SuggestTrialsRequest")
	proto.RegisterType((*SuggestTrialsReply)(nil), "api.SuggestTrialsReply")
	proto.RegisterType((*CompleteTrialRequest)(nil), "api.CompleteTrialRequest")
	proto.RegisterType((*CompleteTrialReply)(nil), "api.CompleteTrialReply")
	proto.RegisterType((*EarlyStoppingRequest)(nil), "api.EarlyStoppingRequest")
	proto.RegisterType((*EarlyStoppingReply)(nil), "api.EarlyStoppingReply")
	proto.RegisterType((*GetObjectValueRequest)(nil), "api.GetObjectValueRequest")
	proto.RegisterType((*GetObjectValueReply)(nil), "api.GetObjectValueReply")
	proto.RegisterType((*AddMeasurementToTrialsRequest)(nil), "api.AddMeasurementToTrialsRequest")
	proto.RegisterType((*AddMeasurementToTrialsReply)(nil), "api.AddMeasurementToTrialsReply")
	proto.RegisterType((*StudyOverview)(nil), "api.StudyOverview")
	proto.RegisterType((*ModelInfo)(nil), "api.ModelInfo")
	proto.RegisterType((*DataSetInfo)(nil), "api.DataSetInfo")
	proto.RegisterType((*SaveStudyRequest)(nil), "api.SaveStudyRequest")
	proto.RegisterType((*SaveStudyReply)(nil), "api.SaveStudyReply")
	proto.RegisterType((*SaveModelRequest)(nil), "api.SaveModelRequest")
	proto.RegisterType((*SaveModelReply)(nil), "api.SaveModelReply")
	proto.RegisterType((*GetSavedStudiesRequest)(nil), "api.GetSavedStudiesRequest")
	proto.RegisterType((*GetSavedStudiesReply)(nil), "api.GetSavedStudiesReply")
	proto.RegisterType((*GetSavedModelsRequest)(nil), "api.GetSavedModelsRequest")
	proto.RegisterType((*GetSavedModelsReply)(nil), "api.GetSavedModelsReply")
	proto.RegisterType((*GetSavedModelRequest)(nil), "api.GetSavedModelRequest")
	proto.RegisterType((*GetSavedModelReply)(nil), "api.GetSavedModelReply")
	proto.RegisterType((*InitializeSuggestServiceRequest)(nil), "api.InitializeSuggestServiceRequest")
	proto.RegisterType((*InitializeSuggestServiceReply)(nil), "api.InitializeSuggestServiceReply")
	proto.RegisterType((*GenerateTrialsRequest)(nil), "api.GenerateTrialsRequest")
	proto.RegisterType((*GenerateTrialsReply)(nil), "api.GenerateTrialsReply")
	proto.RegisterType((*SetSuggestionParametersRequest)(nil), "api.SetSuggestionParametersRequest")
	proto.RegisterType((*SetSuggestionParametersReply)(nil), "api.SetSuggestionParametersReply")
	proto.RegisterType((*StopSuggestionRequest)(nil), "api.StopSuggestionRequest")
	proto.RegisterType((*StopSuggestionReply)(nil), "api.StopSuggestionReply")
	proto.RegisterType((*ShouldTrialStopRequest)(nil), "api.ShouldTrialStopRequest")
	proto.RegisterType((*ShouldTrialStopReply)(nil), "api.ShouldTrialStopReply")
	proto.RegisterType((*SetEarlyStoppingParameterRequest)(nil), "api.SetEarlyStoppingParameterRequest")
	proto.RegisterType((*SetEarlyStoppingParameterReply)(nil), "api.SetEarlyStoppingParameterReply")
	proto.RegisterEnum("api.ParameterType", ParameterType_name, ParameterType_value)
	proto.RegisterEnum("api.OptimizationType", OptimizationType_name, OptimizationType_value)
	proto.RegisterEnum("api.TrialState", TrialState_name, TrialState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Manager service

type ManagerClient interface {
	CreateStudy(ctx context.Context, in *CreateStudyRequest, opts ...grpc.CallOption) (*CreateStudyReply, error)
	StopStudy(ctx context.Context, in *StopStudyRequest, opts ...grpc.CallOption) (*StopStudyReply, error)
	GetStudies(ctx context.Context, in *GetStudiesRequest, opts ...grpc.CallOption) (*GetStudiesReply, error)
	SuggestTrials(ctx context.Context, in *SuggestTrialsRequest, opts ...grpc.CallOption) (*SuggestTrialsReply, error)
	CompleteTrial(ctx context.Context, in *CompleteTrialRequest, opts ...grpc.CallOption) (*CompleteTrialReply, error)
	EarlyStopping(ctx context.Context, in *EarlyStoppingRequest, opts ...grpc.CallOption) (*EarlyStoppingReply, error)
	GetObjectValue(ctx context.Context, in *GetObjectValueRequest, opts ...grpc.CallOption) (*GetObjectValueReply, error)
	AddMeasurementToTrials(ctx context.Context, in *AddMeasurementToTrialsRequest, opts ...grpc.CallOption) (*AddMeasurementToTrialsReply, error)
	InitializeSuggestService(ctx context.Context, in *InitializeSuggestServiceRequest, opts ...grpc.CallOption) (*InitializeSuggestServiceReply, error)
	SaveStudy(ctx context.Context, in *SaveStudyRequest, opts ...grpc.CallOption) (*SaveStudyReply, error)
	SaveModel(ctx context.Context, in *SaveModelRequest, opts ...grpc.CallOption) (*SaveModelReply, error)
	GetSavedStudies(ctx context.Context, in *GetSavedStudiesRequest, opts ...grpc.CallOption) (*GetSavedStudiesReply, error)
	GetSavedModels(ctx context.Context, in *GetSavedModelsRequest, opts ...grpc.CallOption) (*GetSavedModelsReply, error)
	GetSavedModel(ctx context.Context, in *GetSavedModelRequest, opts ...grpc.CallOption) (*GetSavedModelReply, error)
}

type managerClient struct {
	cc *grpc.ClientConn
}

func NewManagerClient(cc *grpc.ClientConn) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateStudy(ctx context.Context, in *CreateStudyRequest, opts ...grpc.CallOption) (*CreateStudyReply, error) {
	out := new(CreateStudyReply)
	err := grpc.Invoke(ctx, "/api.Manager/CreateStudy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) StopStudy(ctx context.Context, in *StopStudyRequest, opts ...grpc.CallOption) (*StopStudyReply, error) {
	out := new(StopStudyReply)
	err := grpc.Invoke(ctx, "/api.Manager/StopStudy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetStudies(ctx context.Context, in *GetStudiesRequest, opts ...grpc.CallOption) (*GetStudiesReply, error) {
	out := new(GetStudiesReply)
	err := grpc.Invoke(ctx, "/api.Manager/GetStudies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SuggestTrials(ctx context.Context, in *SuggestTrialsRequest, opts ...grpc.CallOption) (*SuggestTrialsReply, error) {
	out := new(SuggestTrialsReply)
	err := grpc.Invoke(ctx, "/api.Manager/SuggestTrials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CompleteTrial(ctx context.Context, in *CompleteTrialRequest, opts ...grpc.CallOption) (*CompleteTrialReply, error) {
	out := new(CompleteTrialReply)
	err := grpc.Invoke(ctx, "/api.Manager/CompleteTrial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) EarlyStopping(ctx context.Context, in *EarlyStoppingRequest, opts ...grpc.CallOption) (*EarlyStoppingReply, error) {
	out := new(EarlyStoppingReply)
	err := grpc.Invoke(ctx, "/api.Manager/EarlyStopping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetObjectValue(ctx context.Context, in *GetObjectValueRequest, opts ...grpc.CallOption) (*GetObjectValueReply, error) {
	out := new(GetObjectValueReply)
	err := grpc.Invoke(ctx, "/api.Manager/GetObjectValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) AddMeasurementToTrials(ctx context.Context, in *AddMeasurementToTrialsRequest, opts ...grpc.CallOption) (*AddMeasurementToTrialsReply, error) {
	out := new(AddMeasurementToTrialsReply)
	err := grpc.Invoke(ctx, "/api.Manager/AddMeasurementToTrials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) InitializeSuggestService(ctx context.Context, in *InitializeSuggestServiceRequest, opts ...grpc.CallOption) (*InitializeSuggestServiceReply, error) {
	out := new(InitializeSuggestServiceReply)
	err := grpc.Invoke(ctx, "/api.Manager/InitializeSuggestService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SaveStudy(ctx context.Context, in *SaveStudyRequest, opts ...grpc.CallOption) (*SaveStudyReply, error) {
	out := new(SaveStudyReply)
	err := grpc.Invoke(ctx, "/api.Manager/SaveStudy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SaveModel(ctx context.Context, in *SaveModelRequest, opts ...grpc.CallOption) (*SaveModelReply, error) {
	out := new(SaveModelReply)
	err := grpc.Invoke(ctx, "/api.Manager/SaveModel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSavedStudies(ctx context.Context, in *GetSavedStudiesRequest, opts ...grpc.CallOption) (*GetSavedStudiesReply, error) {
	out := new(GetSavedStudiesReply)
	err := grpc.Invoke(ctx, "/api.Manager/GetSavedStudies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSavedModels(ctx context.Context, in *GetSavedModelsRequest, opts ...grpc.CallOption) (*GetSavedModelsReply, error) {
	out := new(GetSavedModelsReply)
	err := grpc.Invoke(ctx, "/api.Manager/GetSavedModels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSavedModel(ctx context.Context, in *GetSavedModelRequest, opts ...grpc.CallOption) (*GetSavedModelReply, error) {
	out := new(GetSavedModelReply)
	err := grpc.Invoke(ctx, "/api.Manager/GetSavedModel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Manager service

type ManagerServer interface {
	CreateStudy(context.Context, *CreateStudyRequest) (*CreateStudyReply, error)
	StopStudy(context.Context, *StopStudyRequest) (*StopStudyReply, error)
	GetStudies(context.Context, *GetStudiesRequest) (*GetStudiesReply, error)
	SuggestTrials(context.Context, *SuggestTrialsRequest) (*SuggestTrialsReply, error)
	CompleteTrial(context.Context, *CompleteTrialRequest) (*CompleteTrialReply, error)
	EarlyStopping(context.Context, *EarlyStoppingRequest) (*EarlyStoppingReply, error)
	GetObjectValue(context.Context, *GetObjectValueRequest) (*GetObjectValueReply, error)
	AddMeasurementToTrials(context.Context, *AddMeasurementToTrialsRequest) (*AddMeasurementToTrialsReply, error)
	InitializeSuggestService(context.Context, *InitializeSuggestServiceRequest) (*InitializeSuggestServiceReply, error)
	SaveStudy(context.Context, *SaveStudyRequest) (*SaveStudyReply, error)
	SaveModel(context.Context, *SaveModelRequest) (*SaveModelReply, error)
	GetSavedStudies(context.Context, *GetSavedStudiesRequest) (*GetSavedStudiesReply, error)
	GetSavedModels(context.Context, *GetSavedModelsRequest) (*GetSavedModelsReply, error)
	GetSavedModel(context.Context, *GetSavedModelRequest) (*GetSavedModelReply, error)
}

func RegisterManagerServer(s *grpc.Server, srv ManagerServer) {
	s.RegisterService(&_Manager_serviceDesc, srv)
}

func _Manager_CreateStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/CreateStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateStudy(ctx, req.(*CreateStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_StopStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).StopStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/StopStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).StopStudy(ctx, req.(*StopStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetStudies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetStudies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetStudies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetStudies(ctx, req.(*GetStudiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SuggestTrials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestTrialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SuggestTrials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/SuggestTrials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SuggestTrials(ctx, req.(*SuggestTrialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CompleteTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CompleteTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/CompleteTrial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CompleteTrial(ctx, req.(*CompleteTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_EarlyStopping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EarlyStoppingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).EarlyStopping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/EarlyStopping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).EarlyStopping(ctx, req.(*EarlyStoppingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetObjectValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetObjectValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetObjectValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetObjectValue(ctx, req.(*GetObjectValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_AddMeasurementToTrials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMeasurementToTrialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).AddMeasurementToTrials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/AddMeasurementToTrials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).AddMeasurementToTrials(ctx, req.(*AddMeasurementToTrialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_InitializeSuggestService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeSuggestServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).InitializeSuggestService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/InitializeSuggestService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).InitializeSuggestService(ctx, req.(*InitializeSuggestServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SaveStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SaveStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/SaveStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SaveStudy(ctx, req.(*SaveStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SaveModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SaveModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/SaveModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SaveModel(ctx, req.(*SaveModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSavedStudies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedStudiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSavedStudies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetSavedStudies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSavedStudies(ctx, req.(*GetSavedStudiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSavedModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSavedModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetSavedModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSavedModels(ctx, req.(*GetSavedModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSavedModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSavedModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Manager/GetSavedModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSavedModel(ctx, req.(*GetSavedModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudy",
			Handler:    _Manager_CreateStudy_Handler,
		},
		{
			MethodName: "StopStudy",
			Handler:    _Manager_StopStudy_Handler,
		},
		{
			MethodName: "GetStudies",
			Handler:    _Manager_GetStudies_Handler,
		},
		{
			MethodName: "SuggestTrials",
			Handler:    _Manager_SuggestTrials_Handler,
		},
		{
			MethodName: "CompleteTrial",
			Handler:    _Manager_CompleteTrial_Handler,
		},
		{
			MethodName: "EarlyStopping",
			Handler:    _Manager_EarlyStopping_Handler,
		},
		{
			MethodName: "GetObjectValue",
			Handler:    _Manager_GetObjectValue_Handler,
		},
		{
			MethodName: "AddMeasurementToTrials",
			Handler:    _Manager_AddMeasurementToTrials_Handler,
		},
		{
			MethodName: "InitializeSuggestService",
			Handler:    _Manager_InitializeSuggestService_Handler,
		},
		{
			MethodName: "SaveStudy",
			Handler:    _Manager_SaveStudy_Handler,
		},
		{
			MethodName: "SaveModel",
			Handler:    _Manager_SaveModel_Handler,
		},
		{
			MethodName: "GetSavedStudies",
			Handler:    _Manager_GetSavedStudies_Handler,
		},
		{
			MethodName: "GetSavedModels",
			Handler:    _Manager_GetSavedModels_Handler,
		},
		{
			MethodName: "GetSavedModel",
			Handler:    _Manager_GetSavedModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for Suggestion service

type SuggestionClient interface {
	GenerateTrials(ctx context.Context, in *GenerateTrialsRequest, opts ...grpc.CallOption) (*GenerateTrialsReply, error)
	SetSuggestionParameters(ctx context.Context, in *SetSuggestionParametersRequest, opts ...grpc.CallOption) (*SetSuggestionParametersReply, error)
	StopSuggestion(ctx context.Context, in *StopSuggestionRequest, opts ...grpc.CallOption) (*StopSuggestionReply, error)
}

type suggestionClient struct {
	cc *grpc.ClientConn
}

func NewSuggestionClient(cc *grpc.ClientConn) SuggestionClient {
	return &suggestionClient{cc}
}

func (c *suggestionClient) GenerateTrials(ctx context.Context, in *GenerateTrialsRequest, opts ...grpc.CallOption) (*GenerateTrialsReply, error) {
	out := new(GenerateTrialsReply)
	err := grpc.Invoke(ctx, "/api.Suggestion/GenerateTrials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestionClient) SetSuggestionParameters(ctx context.Context, in *SetSuggestionParametersRequest, opts ...grpc.CallOption) (*SetSuggestionParametersReply, error) {
	out := new(SetSuggestionParametersReply)
	err := grpc.Invoke(ctx, "/api.Suggestion/SetSuggestionParameters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *suggestionClient) StopSuggestion(ctx context.Context, in *StopSuggestionRequest, opts ...grpc.CallOption) (*StopSuggestionReply, error) {
	out := new(StopSuggestionReply)
	err := grpc.Invoke(ctx, "/api.Suggestion/StopSuggestion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Suggestion service

type SuggestionServer interface {
	GenerateTrials(context.Context, *GenerateTrialsRequest) (*GenerateTrialsReply, error)
	SetSuggestionParameters(context.Context, *SetSuggestionParametersRequest) (*SetSuggestionParametersReply, error)
	StopSuggestion(context.Context, *StopSuggestionRequest) (*StopSuggestionReply, error)
}

func RegisterSuggestionServer(s *grpc.Server, srv SuggestionServer) {
	s.RegisterService(&_Suggestion_serviceDesc, srv)
}

func _Suggestion_GenerateTrials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTrialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).GenerateTrials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Suggestion/GenerateTrials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).GenerateTrials(ctx, req.(*GenerateTrialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suggestion_SetSuggestionParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSuggestionParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).SetSuggestionParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Suggestion/SetSuggestionParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).SetSuggestionParameters(ctx, req.(*SetSuggestionParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Suggestion_StopSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSuggestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuggestionServer).StopSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Suggestion/StopSuggestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuggestionServer).StopSuggestion(ctx, req.(*StopSuggestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Suggestion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Suggestion",
	HandlerType: (*SuggestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateTrials",
			Handler:    _Suggestion_GenerateTrials_Handler,
		},
		{
			MethodName: "SetSuggestionParameters",
			Handler:    _Suggestion_SetSuggestionParameters_Handler,
		},
		{
			MethodName: "StopSuggestion",
			Handler:    _Suggestion_StopSuggestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for EarlyStopping service

type EarlyStoppingClient interface {
	ShouldTrialStop(ctx context.Context, in *ShouldTrialStopRequest, opts ...grpc.CallOption) (*ShouldTrialStopReply, error)
	SetEarlyStoppingParameter(ctx context.Context, in *SetEarlyStoppingParameterRequest, opts ...grpc.CallOption) (*SetEarlyStoppingParameterReply, error)
}

type earlyStoppingClient struct {
	cc *grpc.ClientConn
}

func NewEarlyStoppingClient(cc *grpc.ClientConn) EarlyStoppingClient {
	return &earlyStoppingClient{cc}
}

func (c *earlyStoppingClient) ShouldTrialStop(ctx context.Context, in *ShouldTrialStopRequest, opts ...grpc.CallOption) (*ShouldTrialStopReply, error) {
	out := new(ShouldTrialStopReply)
	err := grpc.Invoke(ctx, "/api.EarlyStopping/ShouldTrialStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *earlyStoppingClient) SetEarlyStoppingParameter(ctx context.Context, in *SetEarlyStoppingParameterRequest, opts ...grpc.CallOption) (*SetEarlyStoppingParameterReply, error) {
	out := new(SetEarlyStoppingParameterReply)
	err := grpc.Invoke(ctx, "/api.EarlyStopping/SetEarlyStoppingParameter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EarlyStopping service

type EarlyStoppingServer interface {
	ShouldTrialStop(context.Context, *ShouldTrialStopRequest) (*ShouldTrialStopReply, error)
	SetEarlyStoppingParameter(context.Context, *SetEarlyStoppingParameterRequest) (*SetEarlyStoppingParameterReply, error)
}

func RegisterEarlyStoppingServer(s *grpc.Server, srv EarlyStoppingServer) {
	s.RegisterService(&_EarlyStopping_serviceDesc, srv)
}

func _EarlyStopping_ShouldTrialStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShouldTrialStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EarlyStoppingServer).ShouldTrialStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EarlyStopping/ShouldTrialStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EarlyStoppingServer).ShouldTrialStop(ctx, req.(*ShouldTrialStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EarlyStopping_SetEarlyStoppingParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEarlyStoppingParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EarlyStoppingServer).SetEarlyStoppingParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EarlyStopping/SetEarlyStoppingParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EarlyStoppingServer).SetEarlyStoppingParameter(ctx, req.(*SetEarlyStoppingParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EarlyStopping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.EarlyStopping",
	HandlerType: (*EarlyStoppingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShouldTrialStop",
			Handler:    _EarlyStopping_ShouldTrialStop_Handler,
		},
		{
			MethodName: "SetEarlyStoppingParameter",
			Handler:    _EarlyStopping_SetEarlyStoppingParameter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xdd, 0x73, 0xdb, 0xc6,
	0x11, 0x37, 0x48, 0x51, 0x24, 0x97, 0xa2, 0x08, 0x9d, 0x28, 0x19, 0xa2, 0xed, 0x58, 0x41, 0x52,
	0xc7, 0xe3, 0x34, 0x72, 0x23, 0x35, 0x6d, 0xe2, 0x99, 0x4c, 0x47, 0x1f, 0x8c, 0xca, 0xb1, 0x44,
	0x6a, 0x40, 0x3a, 0xee, 0xc7, 0x4c, 0x39, 0x67, 0xf2, 0x4c, 0xa1, 0x06, 0x01, 0x14, 0x07, 0xca,
	0x51, 0xfe, 0x84, 0x3e, 0x75, 0xa6, 0x33, 0xfd, 0x2b, 0xfa, 0xd6, 0x99, 0x3e, 0xf5, 0xad, 0x2f,
	0xfd, 0x43, 0xf2, 0x7f, 0xb4, 0x73, 0x8b, 0x03, 0xf1, 0x41, 0xf0, 0x23, 0xae, 0xdf, 0x70, 0x7b,
	0xbb, 0x7b, 0xfb, 0xf1, 0xbb, 0xdd, 0x3d, 0x12, 0xca, 0xd4, 0x35, 0x0f, 0x5c, 0xcf, 0xf1, 0x1d,
	0x92, 0xa7, 0xae, 0xa9, 0x9f, 0x43, 0xf5, 0x1b, 0x46, 0xb9, 0xf9, 0xca, 0x62, 0x5d, 0x97, 0x0e,
	0x18, 0x51, 0x21, 0x3f, 0xa6, 0xdf, 0x69, 0xca, 0xbe, 0xf2, 0xb8, 0x6c, 0x88, 0x4f, 0xa4, 0x98,
	0xb6, 0x96, 0x93, 0x14, 0xd3, 0x26, 0x04, 0xd6, 0x2c, 0x93, 0xfb, 0x5a, 0x7e, 0x3f, 0xff, 0xb8,
	0x6c, 0xe0, 0xb7, 0xfe, 0x17, 0x05, 0x6a, 0x57, 0xd4, 0xa3, 0x63, 0xe6, 0x33, 0xef, 0xd4, 0xb1,
	0x5f, 0x9b, 0x23, 0xc1, 0x67, 0xd3, 0x31, 0x93, 0xca, 0xf0, 0x9b, 0x7c, 0x05, 0x9b, 0x6e, 0xc8,
	0xd6, 0xf7, 0x6f, 0x5d, 0x86, 0x8a, 0x37, 0x0f, 0xc9, 0x81, 0xb0, 0x6c, 0xaa, 0xa1, 0x77, 0xeb,
	0x32, 0xa3, 0xea, 0xc6, 0x97, 0xe4, 0x00, 0x4a, 0xaf, 0xa5, 0xad, 0x5a, 0x7e, 0x5f, 0x79, 0x5c,
	0x91, 0x42, 0x09, 0x07, 0x8c, 0x29, 0x8f, 0xee, 0x42, 0x79, 0xaa, 0xef, 0x7d, 0xdb, 0x52, 0x87,
	0xc2, 0x0d, 0xb5, 0x26, 0x81, 0x21, 0x65, 0x23, 0x58, 0xe8, 0x47, 0x50, 0xbc, 0x64, 0xbe, 0x67,
	0x0e, 0x78, 0xe6, 0x79, 0x53, 0xa1, 0x5c, 0x5c, 0xe8, 0x39, 0x54, 0x9b, 0xe2, 0x8b, 0xfa, 0xa6,
	0x63, 0x5f, 0x38, 0x18, 0x36, 0xdf, 0x8c, 0x44, 0xc5, 0x37, 0x79, 0x04, 0xc5, 0x71, 0xa0, 0x59,
	0xcb, 0xed, 0xe7, 0x1f, 0x57, 0x0e, 0x37, 0xd0, 0x46, 0x79, 0x9a, 0x11, 0x6e, 0xea, 0xbf, 0x82,
	0xed, 0xee, 0x64, 0x34, 0x62, 0x5c, 0x28, 0x5b, 0xec, 0x7d, 0xb6, 0x35, 0x27, 0xb0, 0xdb, 0xa4,
	0x9e, 0x75, 0xdb, 0xf5, 0x1d, 0xd7, 0x35, 0xed, 0xd1, 0xbb, 0xe8, 0x78, 0x0a, 0xf9, 0x1e, 0x1d,
	0xfd, 0x08, 0x81, 0xcf, 0xa1, 0x7c, 0xe9, 0x4c, 0x6c, 0x5f, 0xe0, 0x46, 0xe0, 0xcd, 0xbd, 0x19,
	0x84, 0x08, 0x74, 0x6f, 0x06, 0x42, 0x91, 0x4b, 0xfd, 0x6b, 0x29, 0x83, 0xdf, 0xfa, 0x5f, 0x73,
	0x50, 0xe8, 0x79, 0x26, 0xb5, 0xc8, 0x1e, 0x94, 0x7c, 0xf1, 0xd1, 0x37, 0x87, 0x52, 0xa8, 0x88,
	0xeb, 0xd6, 0x50, 0x6c, 0x71, 0x7f, 0x32, 0xbc, 0x15, 0x5b, 0x81, 0x70, 0x11, 0xd7, 0xad, 0x21,
	0x39, 0x82, 0x28, 0xa3, 0x7d, 0xce, 0x02, 0x30, 0x57, 0x0e, 0x37, 0x93, 0xa9, 0x37, 0x36, 0xa6,
	0x4c, 0x5d, 0xe6, 0x93, 0x4f, 0x60, 0x9d, 0xfb, 0xd4, 0x9f, 0x70, 0x6d, 0x0d, 0x81, 0x52, 0x43,
	0x6e, 0x34, 0xa3, 0xeb, 0x53, 0x9f, 0x19, 0x72, 0x9b, 0x3c, 0x85, 0x32, 0xbb, 0xa1, 0x56, 0xdf,
	0x72, 0x46, 0x5c, 0x2b, 0xa0, 0xe6, 0x00, 0x54, 0x89, 0x4c, 0x1b, 0x25, 0xc1, 0x74, 0xe1, 0x8c,
	0x38, 0xf9, 0x04, 0x6a, 0xce, 0xab, 0x3f, 0xb2, 0x81, 0x6f, 0xde, 0xb0, 0x7e, 0x10, 0xa1, 0x75,
	0x34, 0x78, 0x73, 0x4a, 0xfe, 0x56, 0x50, 0xc9, 0x7d, 0x58, 0xf3, 0xe9, 0x88, 0x6b, 0x45, 0x54,
	0x5a, 0x0a, 0x0c, 0xa0, 0x23, 0x03, 0xa9, 0xfa, 0x3f, 0x8a, 0x50, 0xe9, 0x0a, 0x0f, 0x17, 0xdc,
	0xc0, 0x3a, 0x14, 0x9c, 0xb7, 0x36, 0xf3, 0xc2, 0x14, 0xe0, 0x82, 0x9c, 0xc0, 0x96, 0xe3, 0xfa,
	0xe6, 0xd8, 0xfc, 0x1e, 0xad, 0x0b, 0xae, 0x43, 0x1e, 0xbd, 0xdc, 0xc1, 0x43, 0x3a, 0xb1, 0x5d,
	0xbc, 0x11, 0xaa, 0x93, 0xa2, 0x90, 0x4f, 0x53, 0x3a, 0x46, 0x0e, 0xb5, 0x30, 0x52, 0x4a, 0x92,
	0xf9, 0xdc, 0xa1, 0x16, 0x69, 0xc3, 0x56, 0x94, 0x80, 0x01, 0x9a, 0x2b, 0x42, 0x25, 0xae, 0xf5,
	0x87, 0x78, 0x60, 0xcc, 0x8f, 0x83, 0x54, 0x65, 0xe1, 0x86, 0xea, 0xa6, 0x28, 0xe4, 0x33, 0x20,
	0x74, 0x30, 0x60, 0x9c, 0xf7, 0x5d, 0xe6, 0x8d, 0x4d, 0xce, 0x4d, 0xc7, 0xe6, 0xda, 0x3a, 0x96,
	0xa8, 0xad, 0x60, 0xe7, 0x2a, 0xda, 0x10, 0xb6, 0xf2, 0xe0, 0xa2, 0xf4, 0xa9, 0x35, 0x72, 0x3c,
	0xd3, 0xbf, 0x1e, 0x6b, 0x45, 0x8c, 0x88, 0x2a, 0x37, 0x8e, 0x43, 0x3a, 0xf9, 0x12, 0x34, 0x26,
	0x2e, 0x45, 0x9f, 0xcb, 0x5b, 0x11, 0x93, 0x29, 0xa1, 0xcc, 0x2e, 0x8b, 0x5f, 0x9a, 0x48, 0xf2,
	0x11, 0xd4, 0x02, 0x04, 0xfa, 0x94, 0xbf, 0xe9, 0x63, 0x2e, 0xca, 0x28, 0x50, 0x45, 0x72, 0x8f,
	0xf2, 0x37, 0x6d, 0x91, 0x94, 0x4b, 0xd8, 0xe1, 0xd3, 0x7b, 0xdb, 0x9f, 0x3a, 0xc7, 0x35, 0xc0,
	0x3c, 0x6b, 0x41, 0x44, 0x66, 0x6f, 0xb6, 0x51, 0xe7, 0xb3, 0x44, 0x4e, 0x5e, 0xc2, 0x5e, 0xca,
	0xe0, 0x98, 0xca, 0x0a, 0xaa, 0xbc, 0x17, 0xe0, 0x31, 0xf3, 0xae, 0x1b, 0x77, 0x59, 0x26, 0x9d,
	0x4f, 0xe1, 0xb7, 0x91, 0x05, 0x3f, 0xf2, 0x33, 0xa8, 0xa7, 0x50, 0x1c, 0xb8, 0x5c, 0x45, 0x97,
	0x49, 0x12, 0xca, 0xe8, 0xb7, 0x16, 0xd5, 0xb5, 0x4d, 0x4c, 0x55, 0xb8, 0x14, 0x30, 0x35, 0xc7,
	0x74, 0xc4, 0xb4, 0x5a, 0x00, 0x53, 0x5c, 0x08, 0xfe, 0x81, 0x33, 0x1e, 0x53, 0x7b, 0xa8, 0xa9,
	0x01, 0xbf, 0x5c, 0x8a, 0xb2, 0x31, 0x72, 0x27, 0xda, 0xd6, 0xbe, 0xf2, 0xb8, 0x60, 0x88, 0x4f,
	0x72, 0x1f, 0xca, 0x7c, 0x70, 0xcd, 0x86, 0x13, 0x8b, 0x79, 0x1a, 0x41, 0x2d, 0x11, 0x81, 0x7c,
	0x0c, 0x85, 0xb1, 0xa8, 0x39, 0xda, 0x36, 0x62, 0x2e, 0xb8, 0xf8, 0xd3, 0x2a, 0x64, 0x04, 0x9b,
	0xe4, 0x21, 0x54, 0xdc, 0x89, 0x65, 0xf5, 0x39, 0x1b, 0x78, 0xcc, 0xd7, 0xea, 0xa8, 0x05, 0x04,
	0xa9, 0x8b, 0x94, 0xc6, 0x09, 0xa8, 0x69, 0x70, 0x92, 0x03, 0x61, 0x64, 0x00, 0x68, 0x05, 0xe3,
	0x54, 0x4f, 0x56, 0x95, 0x80, 0xcf, 0x08, 0x99, 0xf4, 0x16, 0x90, 0x53, 0x8f, 0x51, 0x9f, 0x21,
	0xe4, 0x0d, 0xf6, 0xa7, 0x09, 0xe3, 0x3e, 0x39, 0x82, 0x8d, 0x00, 0x3a, 0x01, 0x1b, 0xde, 0xe1,
	0xca, 0xa1, 0x9a, 0xbe, 0x1b, 0x46, 0x85, 0x47, 0x0b, 0xfd, 0x33, 0x50, 0x13, 0xaa, 0x5c, 0xeb,
	0x36, 0x51, 0x05, 0x95, 0x44, 0x15, 0x14, 0xec, 0x22, 0xc9, 0x89, 0x73, 0x17, 0xb0, 0xab, 0xb0,
	0x19, 0x63, 0x77, 0xad, 0x5b, 0x7d, 0x1b, 0xb6, 0xce, 0x99, 0x2f, 0x08, 0x26, 0xe3, 0x52, 0x83,
	0xfe, 0x77, 0x05, 0xca, 0xc8, 0xd3, 0xb2, 0x5f, 0x3b, 0x0b, 0xf4, 0x4d, 0xcb, 0x53, 0x2e, 0xab,
	0x3c, 0xe5, 0xe3, 0xe5, 0xe9, 0x09, 0x6c, 0x79, 0x13, 0xdb, 0x16, 0x48, 0x0e, 0x8a, 0xbd, 0x3d,
	0x19, 0x63, 0x69, 0x29, 0x18, 0x35, 0xb9, 0x81, 0x65, 0xb8, 0x3d, 0x19, 0x93, 0x03, 0xd8, 0x1e,
	0x38, 0x63, 0xd7, 0x62, 0x3e, 0x1b, 0xc6, 0xb8, 0x0b, 0xc8, 0xbd, 0x35, 0xdd, 0x0a, 0xf9, 0xf5,
	0x13, 0xa8, 0xc5, 0x7d, 0x10, 0x21, 0x7b, 0x0a, 0x15, 0x69, 0xb3, 0xfd, 0xda, 0x09, 0xb3, 0xb8,
	0x19, 0x85, 0x5e, 0x38, 0x66, 0x00, 0x0f, 0x3f, 0xb9, 0xfe, 0x67, 0x05, 0xea, 0xf2, 0x7a, 0xa2,
	0x5e, 0xbe, 0x3c, 0x9a, 0xd9, 0x25, 0x28, 0x37, 0xa7, 0x04, 0x3d, 0x89, 0x30, 0x95, 0x9f, 0x03,
	0x84, 0x29, 0x9e, 0xbe, 0x05, 0x92, 0xb2, 0x45, 0xf8, 0xa4, 0xc3, 0x3a, 0x06, 0x23, 0x74, 0x07,
	0xa2, 0xe6, 0x65, 0xc8, 0x1d, 0x71, 0x65, 0xa6, 0xf1, 0x41, 0x53, 0x4a, 0x46, 0x44, 0xd0, 0xc7,
	0x50, 0x3f, 0x95, 0x8b, 0x40, 0x6c, 0xb9, 0x8f, 0xf1, 0xe6, 0x9c, 0x4b, 0x36, 0xe7, 0x87, 0x50,
	0x31, 0x79, 0x3f, 0xd4, 0x8e, 0x5e, 0x95, 0x0c, 0x30, 0x79, 0x78, 0x84, 0x5e, 0x07, 0x92, 0x3a,
	0x4e, 0x20, 0xee, 0x0d, 0xd4, 0x13, 0x45, 0x6b, 0x05, 0x23, 0x16, 0x95, 0xef, 0xdc, 0xa2, 0xf2,
	0xad, 0x7f, 0x09, 0x24, 0x75, 0xd8, 0x8a, 0x91, 0xd4, 0x7f, 0x0e, 0x3b, 0xe7, 0xcc, 0xef, 0x60,
	0xc5, 0xc3, 0x72, 0x17, 0xda, 0x79, 0x0f, 0xca, 0x6f, 0x1d, 0xef, 0x0d, 0xf3, 0x22, 0x43, 0x4b,
	0x01, 0xa1, 0x35, 0xd4, 0xbf, 0x82, 0xed, 0xb4, 0xd4, 0xaa, 0x07, 0xf6, 0xe0, 0xc1, 0xf1, 0x70,
	0x78, 0xc9, 0x28, 0x9f, 0x78, 0x6c, 0xcc, 0x6c, 0xbf, 0xe7, 0xac, 0x8c, 0x44, 0x2d, 0x3e, 0x5d,
	0x2a, 0xb1, 0x2a, 0xac, 0x3f, 0x80, 0x7b, 0xf3, 0xb4, 0x8a, 0x64, 0xfc, 0x1e, 0xaa, 0x88, 0xc0,
	0xce, 0x0d, 0xf3, 0x6e, 0x4c, 0xf6, 0xf6, 0x47, 0x0c, 0x1c, 0xfb, 0x50, 0x19, 0x32, 0x3e, 0xf0,
	0x4c, 0x57, 0xf4, 0x2e, 0x79, 0xdb, 0xe3, 0x24, 0xfd, 0x5f, 0x8a, 0x18, 0x0b, 0x87, 0xcc, 0xc2,
	0x32, 0xf2, 0x00, 0x82, 0xfb, 0xd6, 0x8f, 0xe9, 0x2f, 0x23, 0x05, 0x1b, 0xc9, 0x02, 0xa0, 0x1d,
	0x00, 0xc4, 0xba, 0x5f, 0xf6, 0x9c, 0x17, 0xe3, 0x88, 0xcf, 0xda, 0x6b, 0x0b, 0x66, 0x6d, 0x61,
	0xd1, 0x58, 0x98, 0xd7, 0xc7, 0xe1, 0xb4, 0x10, 0x58, 0x84, 0x94, 0x2b, 0x31, 0xa1, 0x7e, 0x01,
	0x95, 0x33, 0xea, 0xd3, 0x2e, 0xf3, 0xd1, 0xfe, 0xac, 0xc8, 0x64, 0x0d, 0xb6, 0x2d, 0x50, 0xbb,
	0xf4, 0x26, 0xd9, 0x0a, 0x96, 0xf8, 0xbe, 0x0b, 0xeb, 0x74, 0xe2, 0x5f, 0x3b, 0x61, 0x84, 0xe5,
	0x0a, 0xcb, 0x75, 0xa4, 0x4a, 0xe4, 0x8b, 0x05, 0xca, 0x31, 0xaa, 0xa1, 0x72, 0x6c, 0x84, 0x43,
	0x66, 0xc9, 0x06, 0x13, 0x36, 0x42, 0x19, 0x77, 0x23, 0xd8, 0x24, 0x9f, 0x42, 0x69, 0x48, 0x7d,
	0x8a, 0xa3, 0x72, 0x2e, 0x56, 0x80, 0x62, 0x2e, 0x1a, 0xc5, 0x61, 0xb0, 0x08, 0x0f, 0x96, 0xc7,
	0x88, 0x83, 0x35, 0xd8, 0x15, 0x35, 0x96, 0xde, 0xb0, 0x61, 0xaa, 0x59, 0x9c, 0x41, 0x7d, 0x66,
	0x47, 0x60, 0xfe, 0xa7, 0x80, 0xf0, 0x34, 0x59, 0x08, 0x7a, 0x12, 0x15, 0xbc, 0x10, 0x6e, 0x46,
	0xc8, 0xa2, 0xff, 0x02, 0xaf, 0x1b, 0x6a, 0xc1, 0x53, 0xf9, 0x6a, 0xa1, 0xd3, 0xbf, 0xc6, 0x0b,
	0x97, 0x90, 0x13, 0x87, 0x3f, 0x82, 0x75, 0x74, 0x3b, 0x59, 0xfa, 0xa3, 0xa0, 0xc8, 0x5d, 0xfd,
	0x2a, 0x32, 0x3e, 0x11, 0xd3, 0x77, 0x06, 0xab, 0xfe, 0x0c, 0x48, 0x4a, 0xa3, 0xb0, 0x67, 0xa5,
	0x1c, 0xe9, 0x3f, 0x28, 0xf0, 0xb0, 0x65, 0x9b, 0xbe, 0x49, 0x2d, 0xf3, 0x7b, 0x26, 0x5b, 0x40,
	0x57, 0x84, 0x6a, 0xc0, 0xde, 0x77, 0x3f, 0x9a, 0x3b, 0xb0, 0xe6, 0xdf, 0x69, 0x60, 0x8d, 0xb5,
	0xb7, 0xb5, 0x65, 0xed, 0xed, 0x21, 0x3c, 0x98, 0xef, 0xa5, 0x00, 0xdb, 0x7f, 0x14, 0x81, 0x06,
	0x9b, 0x79, 0x54, 0x76, 0x8e, 0x55, 0x6a, 0x60, 0xcc, 0x82, 0xdc, 0x12, 0x0b, 0xc8, 0x17, 0xa0,
	0xa6, 0x26, 0x8c, 0xd0, 0xef, 0x78, 0x65, 0xae, 0x25, 0x47, 0x0d, 0x4e, 0x3e, 0x87, 0xcd, 0xc4,
	0x10, 0x13, 0xd6, 0x97, 0xb8, 0x50, 0x35, 0x3e, 0xcd, 0x70, 0xfd, 0xa5, 0xc0, 0x67, 0xd2, 0x93,
	0xf7, 0xd3, 0xcb, 0xff, 0xa9, 0xc0, 0x07, 0x5d, 0xe6, 0x67, 0x64, 0x68, 0x95, 0x60, 0xcd, 0xcd,
	0x7e, 0xee, 0xff, 0xcd, 0xfe, 0xd2, 0xe1, 0xe6, 0x03, 0xb8, 0x3f, 0xd7, 0x6e, 0x91, 0xfc, 0x43,
	0xd8, 0xc1, 0x19, 0x75, 0xca, 0xb0, 0xc2, 0x5c, 0xbb, 0x03, 0xdb, 0x69, 0x19, 0xa1, 0xea, 0x08,
	0x76, 0xbb, 0xd7, 0xce, 0xc4, 0x1a, 0xca, 0x17, 0xbe, 0xe3, 0xae, 0xa0, 0xeb, 0x19, 0xd4, 0x67,
	0x84, 0x56, 0xed, 0xe1, 0x7f, 0x53, 0x60, 0xbf, 0xcb, 0xfc, 0x39, 0x8f, 0xb2, 0xe5, 0x69, 0x59,
	0xf8, 0xec, 0xcb, 0xbd, 0xfb, 0xb3, 0x4f, 0xdf, 0x47, 0xb0, 0xcc, 0xb3, 0xcb, 0xb5, 0x6e, 0x9f,
	0xbc, 0x80, 0x6a, 0xe2, 0x07, 0x33, 0xa2, 0xc2, 0xc6, 0x8b, 0xf6, 0xf3, 0x76, 0xe7, 0x65, 0xbb,
	0xdf, 0xfb, 0xed, 0x55, 0x53, 0xbd, 0x43, 0x00, 0xd6, 0xcf, 0x3a, 0x2f, 0x4e, 0x2e, 0x9a, 0xaa,
	0x42, 0x8a, 0x90, 0x6f, 0xb5, 0x7b, 0x6a, 0x8e, 0x6c, 0x40, 0xe9, 0xac, 0xd5, 0x3d, 0x35, 0x9a,
	0xbd, 0xa6, 0x9a, 0x27, 0x35, 0xa8, 0x9c, 0x1e, 0xf7, 0x9a, 0xe7, 0x1d, 0xa3, 0x75, 0x7a, 0x7c,
	0xa1, 0xae, 0x3d, 0xf9, 0x35, 0xa8, 0xe9, 0x1f, 0x1e, 0x88, 0x06, 0xf5, 0x50, 0x73, 0xe7, 0xaa,
	0xd7, 0xba, 0x6c, 0xfd, 0xee, 0xb8, 0xd7, 0xea, 0xb4, 0xd5, 0x3b, 0x42, 0xd9, 0x65, 0xab, 0x2d,
	0x28, 0xe2, 0x0c, 0xb1, 0x3a, 0xfe, 0x4d, 0xb0, 0xca, 0x3d, 0xb9, 0x00, 0x88, 0x7e, 0xa8, 0x21,
	0x15, 0x28, 0x5e, 0x35, 0xdb, 0x67, 0xad, 0xf6, 0xb9, 0x7a, 0x47, 0x2c, 0x8c, 0x17, 0xed, 0xb6,
	0x58, 0x28, 0xa4, 0x0a, 0xe5, 0xd3, 0xce, 0xe5, 0xd5, 0x45, 0xb3, 0xd7, 0x3c, 0x53, 0x73, 0xc2,
	0xe8, 0xe7, 0xad, 0x8b, 0x8b, 0xe6, 0x99, 0x9a, 0x27, 0x65, 0x28, 0x34, 0x0d, 0xa3, 0x63, 0xa8,
	0xdf, 0x1d, 0xfe, 0x50, 0x84, 0xe2, 0x25, 0xb5, 0xe9, 0x88, 0x79, 0xe4, 0x6b, 0xa8, 0xc4, 0xde,
	0x5c, 0xe4, 0x2e, 0x46, 0x78, 0xf6, 0x41, 0xd7, 0xd8, 0x99, 0xdd, 0x10, 0xc0, 0xf8, 0xa5, 0x78,
	0x2c, 0xc9, 0x47, 0x15, 0xd9, 0x91, 0xc0, 0x4f, 0xbe, 0xc9, 0x1a, 0xdb, 0x69, 0xb2, 0x10, 0x7c,
	0x06, 0x10, 0xbd, 0x5b, 0xc8, 0x2e, 0xb2, 0xcc, 0x3c, 0xc6, 0x1a, 0xf5, 0x19, 0xba, 0x90, 0x3d,
	0x85, 0x6a, 0xe2, 0x89, 0x40, 0xf6, 0xe2, 0x57, 0x36, 0x51, 0x34, 0x1b, 0x77, 0xb3, 0xb6, 0xa4,
	0x92, 0xc4, 0x80, 0x2e, 0x95, 0x64, 0xbd, 0x11, 0xa4, 0x92, 0xd9, 0x79, 0x5e, 0x28, 0x49, 0xe0,
	0x4a, 0x2a, 0xc9, 0x9a, 0xf1, 0xa5, 0x92, 0x8c, 0x89, 0xfc, 0x1b, 0xd8, 0x4c, 0xce, 0xcd, 0xa4,
	0x11, 0xba, 0x3d, 0x3b, 0x82, 0x37, 0xb4, 0xcc, 0x3d, 0xa1, 0xe7, 0x0f, 0xb0, 0x9b, 0x3d, 0xee,
	0x12, 0x1d, 0x65, 0x16, 0x4e, 0xd8, 0x8d, 0xfd, 0x85, 0x3c, 0x42, 0xff, 0x10, 0xb4, 0x79, 0xad,
	0x8b, 0x7c, 0x8c, 0xd2, 0x4b, 0xfa, 0x77, 0x43, 0x5f, 0xc2, 0x15, 0x22, 0x2a, 0x9c, 0xfb, 0x42,
	0x44, 0xa5, 0x46, 0xca, 0x10, 0x51, 0x89, 0xf1, 0x30, 0x14, 0xc4, 0xc1, 0x22, 0x26, 0x18, 0x1f,
	0x6d, 0x62, 0x82, 0xb1, 0xf9, 0xa4, 0x15, 0x3c, 0xa1, 0x63, 0x43, 0x1c, 0xb9, 0x37, 0xc5, 0xdd,
	0xec, 0xd0, 0xd7, 0xd8, 0xcb, 0xde, 0x8c, 0x52, 0x19, 0x9b, 0xc8, 0xa2, 0x54, 0xce, 0x8e, 0x77,
	0x51, 0x2a, 0x67, 0x46, 0xb8, 0x53, 0xa8, 0x26, 0xc8, 0x64, 0x6f, 0x96, 0x35, 0x89, 0xab, 0xd9,
	0xb9, 0xeb, 0xf0, 0xbf, 0x0a, 0x40, 0xd4, 0x15, 0x02, 0xdb, 0xe2, 0xdd, 0x78, 0x6a, 0x5b, 0xc6,
	0xb0, 0x31, 0xb5, 0x6d, 0xb6, 0x7d, 0x53, 0xb8, 0x3b, 0xa7, 0x87, 0x91, 0x8f, 0x82, 0xf0, 0x2e,
	0xec, 0xcc, 0x8d, 0x0f, 0x17, 0x33, 0xc9, 0x30, 0x26, 0x5b, 0x9a, 0x34, 0x35, 0xb3, 0x37, 0x4a,
	0x53, 0x33, 0x7a, 0xe0, 0xe1, 0xbf, 0x95, 0xf4, 0xfd, 0x6c, 0x41, 0x2d, 0xd5, 0xe0, 0x64, 0xae,
	0xb3, 0x7b, 0xa5, 0xcc, 0x75, 0x66, 0x4f, 0x1c, 0xc1, 0xde, 0xdc, 0xb6, 0x42, 0x7e, 0x12, 0x3a,
	0xb9, 0xb0, 0x1d, 0x36, 0x3e, 0x5a, 0xc6, 0xe6, 0x5a, 0xb7, 0xaf, 0xd6, 0xf1, 0x2f, 0xaf, 0xa3,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x70, 0xb4, 0x19, 0x74, 0xff, 0x1a, 0x00, 0x00,
}
