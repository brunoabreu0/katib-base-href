name: E2E Test with tune API

on:
  pull_request:
    paths-ignore:
      - "pkg/ui/v1beta1/frontend/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Test Env
        uses: ./.github/workflows/template-setup-e2e-test
        with:
          kubernetes-version: ${{ matrix.kubernetes-version }}
      
      - name: Install Training Operator SDK
        shell: bash
        run: |
          pip install "kubeflow-training[huggingface]==1.8.1"
      
      # Step 2: Check Disk Space Before Test
      - name: Check Disk Space Before Test
        run: |
          echo "Checking disk space usage before e2e test..."
          df -h  # Run 'df' to check free disk space
      
      # Step 3: Run e2e test with tune API
      - name: Run e2e test with tune API
        uses: ./.github/workflows/template-e2e-test
        with:
          tune-api: true
          training-operator: true
      
      # Step 4: Check Disk Space After Test
      - name: Check Disk Space After Test
        if: always()  # Run this step even if previous steps fail
        run: |
          echo "Checking disk space usage after e2e test..."
          df -h  # Run 'df' to check free disk space

      # Step 5: Fetch Pod Logs for Relevant Experiment Pod
      - name: Fetch Experiment Pod Logs
        if: always()  # Run this step even if previous steps fail
        run: |
          echo "Fetching logs for experiment pod..."
          kubectl get pods -n default
          POD_NAME=$(kubectl get pods -n default --no-headers -o custom-columns=":metadata.name" | grep tune-example-2 | grep master)
          kubectl describe pod $POD_NAME -n default
          kubectl get events -n default | grep "tune-example-2"
      
      # Step 6: Fetch kubelet logs (requires sudo for accessing kubelet logs)
      - name: Fetch Kubelet Logs
        if: always()  # Run this step even if previous steps fail
        run: |
          echo "Fetching kubelet logs..."
          sudo journalctl -u kubelet
      
      # Step 7: Check Node Resource Usage
      - name: Check Node Resource Usage
        if: always()
        run: |
          echo "Checking node resource usage..."
          NODE_NAME=$(kubectl get pods -n default -o jsonpath="{.items[0].spec.nodeName}")
          kubectl top node $NODE_NAME

      # Step 8: Check Pod Resource Usage
      - name: Check Pod Resource Usage
        if: always()
        run: |
          echo "Checking pod resource usage..."
          kubectl top pod -n default $POD_NAME
      
      # Step 9: Fetch Network Information for Pod
      - name: Fetch Network Info
        if: always()
        run: |
          echo "Fetching network info for pod $POD_NAME"
          kubectl exec $POD_NAME -n default -- ip a

      # Step 10: Check Docker Logs for Container
      - name: Check Docker Logs for Container
        if: always()
        run: |
          echo "Fetching Docker logs..."
          CONTAINER_ID=$(docker ps | grep $POD_NAME | awk '{print $1}')
          docker logs $CONTAINER_ID

      # Step 11: Check Kernel Logs for OOM/Resource Issues
      - name: Check Kernel Logs for Resource Issues
        if: always()
        run: |
          echo "Checking kernel logs for resource issues..."
          dmesg | grep -i "oom\|kill"

    strategy:
      fail-fast: false
      matrix:
        # Kubernetes versions to test with
        kubernetes-version: ["v1.27.11", "v1.28.7", "v1.29.2"]
